USE [master]
GO
/****** Object:  Database [Ehandbok]    Script Date: 10/20/2016 11:39:14 ******/
CREATE DATABASE [Ehandbok] ON  PRIMARY 
( NAME = N'Ehandbok', FILENAME = N'D:\data_sql\Ehandbok.mdf' , SIZE = 5671936KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'Ehandbok_log', FILENAME = N'D:\data_sql\Ehandbok.ldf' , SIZE = 1219712KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
GO
ALTER DATABASE [Ehandbok] SET COMPATIBILITY_LEVEL = 100
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Ehandbok].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [Ehandbok] SET ANSI_NULL_DEFAULT OFF
GO
ALTER DATABASE [Ehandbok] SET ANSI_NULLS OFF
GO
ALTER DATABASE [Ehandbok] SET ANSI_PADDING OFF
GO
ALTER DATABASE [Ehandbok] SET ANSI_WARNINGS OFF
GO
ALTER DATABASE [Ehandbok] SET ARITHABORT OFF
GO
ALTER DATABASE [Ehandbok] SET AUTO_CLOSE OFF
GO
ALTER DATABASE [Ehandbok] SET AUTO_CREATE_STATISTICS ON
GO
ALTER DATABASE [Ehandbok] SET AUTO_SHRINK OFF
GO
ALTER DATABASE [Ehandbok] SET AUTO_UPDATE_STATISTICS ON
GO
ALTER DATABASE [Ehandbok] SET CURSOR_CLOSE_ON_COMMIT OFF
GO
ALTER DATABASE [Ehandbok] SET CURSOR_DEFAULT  GLOBAL
GO
ALTER DATABASE [Ehandbok] SET CONCAT_NULL_YIELDS_NULL OFF
GO
ALTER DATABASE [Ehandbok] SET NUMERIC_ROUNDABORT OFF
GO
ALTER DATABASE [Ehandbok] SET QUOTED_IDENTIFIER OFF
GO
ALTER DATABASE [Ehandbok] SET RECURSIVE_TRIGGERS OFF
GO
ALTER DATABASE [Ehandbok] SET  ENABLE_BROKER
GO
ALTER DATABASE [Ehandbok] SET AUTO_UPDATE_STATISTICS_ASYNC OFF
GO
ALTER DATABASE [Ehandbok] SET DATE_CORRELATION_OPTIMIZATION OFF
GO
ALTER DATABASE [Ehandbok] SET TRUSTWORTHY OFF
GO
ALTER DATABASE [Ehandbok] SET ALLOW_SNAPSHOT_ISOLATION OFF
GO
ALTER DATABASE [Ehandbok] SET PARAMETERIZATION SIMPLE
GO
ALTER DATABASE [Ehandbok] SET READ_COMMITTED_SNAPSHOT OFF
GO
ALTER DATABASE [Ehandbok] SET HONOR_BROKER_PRIORITY OFF
GO
ALTER DATABASE [Ehandbok] SET  READ_WRITE
GO
ALTER DATABASE [Ehandbok] SET RECOVERY FULL
GO
ALTER DATABASE [Ehandbok] SET  MULTI_USER
GO
ALTER DATABASE [Ehandbok] SET PAGE_VERIFY CHECKSUM
GO
ALTER DATABASE [Ehandbok] SET DB_CHAINING OFF
GO
EXEC sys.sp_db_vardecimal_storage_format N'Ehandbok', N'ON'
GO
USE [Ehandbok]
GO
/****** Object:  User [ehandbok]    Script Date: 10/20/2016 11:39:14 ******/
CREATE USER [ehandbok] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  Schema [Risk]    Script Date: 10/20/2016 11:39:14 ******/
CREATE SCHEMA [Risk] AUTHORIZATION [dbo]
GO
/****** Object:  Schema [Deviation]    Script Date: 10/20/2016 11:39:14 ******/
CREATE SCHEMA [Deviation] AUTHORIZATION [dbo]
GO
/****** Object:  Schema [Calendar]    Script Date: 10/20/2016 11:39:14 ******/
CREATE SCHEMA [Calendar] AUTHORIZATION [dbo]
GO
/****** Object:  FullTextCatalog [Handbook]    Script Date: 10/20/2016 11:39:14 ******/
CREATE FULLTEXT CATALOG [Handbook]WITH ACCENT_SENSITIVITY = ON
AUTHORIZATION [dbo]
GO
/****** Object:  FullTextCatalog [Document]    Script Date: 10/20/2016 11:39:14 ******/
CREATE FULLTEXT CATALOG [Document]WITH ACCENT_SENSITIVITY = ON
AUTHORIZATION [dbo]
GO
/****** Object:  Table [dbo].[relEmployeeSecGroup]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relEmployeeSecGroup](
	[iEmployeeId] [int] NOT NULL,
	[iSecGroupId] [int] NOT NULL,
 CONSTRAINT [PK__relEmployeeSecGroup_iEmployeeId_iSecGroupId] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iSecGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_HasSecGroupAccess]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 12.05.2014
-- Description:	Has SecGroup Access
-- =============================================
CREATE PROCEDURE [dbo].[m136_HasSecGroupAccess] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iSecGroup int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT Count(*)
	FROM [relEmployeeSecGroup] 
	WHERE	
		iEmployeeId = @iSecurityId
		AND iSecGroupId = @iSecGroup
END
GO
/****** Object:  StoredProcedure [dbo].[m136_HasEditDocumentTitleAccess]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 09.12.2013
-- Description:	Has Edit Document-Title Access
-- =============================================
CREATE PROCEDURE [dbo].[m136_HasEditDocumentTitleAccess] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iEditTitleSecGroup int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT Count(*)
	FROM [relEmployeeSecGroup] 
	WHERE	
		iEmployeeId = @iSecurityId
		AND iSecGroupId = @iEditTitleSecGroup
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_AddRoleMember]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 24, 2015
-- Description:	Adding role members
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_AddRoleMember]
	@iEmployeeId INT,
	@iRoleId INT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.relEmployeeSecGroup
	(
	    iEmployeeId,
	    iSecGroupId
	)
	SELECT @iEmployeeId, @iRoleId
	    WHERE NOT EXISTS (SELECT resg.* FROM dbo.relEmployeeSecGroup resg WHERE resg.iEmployeeId = @iEmployeeId AND resg.iSecGroupId = @iRoleId);
END
GO
/****** Object:  Table [dbo].[tblImage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblImage](
	[iAutoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iItemId] [int] NOT NULL,
	[strPhotoNo] [varchar](100) NOT NULL,
	[strDescription] [varchar](400) NOT NULL,
	[strKeyWords] [varchar](100) NOT NULL,
	[strThumbURL] [varchar](100) NOT NULL,
	[strPictureURL] [varchar](100) NOT NULL,
 CONSTRAINT [PK__tblImage_iAutoId] PRIMARY KEY CLUSTERED 
(
	[iAutoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblFile]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblFile](
	[iAutoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iItemId] [int] NOT NULL,
	[strName] [varchar](300) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
	[strFileName] [varchar](300) NOT NULL,
 CONSTRAINT [PK__tblFile_iAutoId] PRIMARY KEY CLUSTERED 
(
	[iAutoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [Calendar].[Activities]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Calendar].[Activities](
	[ActivityId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[ResponsibleId] [int] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedDate] [datetime] NULL,
	[IsPermissionControlled] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Calendar].[CreateActivityForNormalUser]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[CreateActivityForNormalUser] 
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX),
    @StartDate DATETIME,
    @EndDate DATETIME,
    @CreatedBy INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        INSERT INTO 
            [Calendar].[Activities]
                (Name, Description, StartDate, EndDate, ResponsibleId, CreatedBy, CreatedDate, IsPermissionControlled)
            VALUES
                (@Name, @Description, @StartDate, @EndDate, null, @CreatedBy, GETDATE(), 0)
        SELECT SCOPE_IDENTITY()
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [Calendar].[CreateActivityForAdminLeader]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[CreateActivityForAdminLeader] 
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX),
    @StartDate DATETIME,
    @EndDate DATETIME,
    @ResponsibleId INT,
    @CreatedBy INT,
    @IsPermissionControlled BIT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        INSERT INTO 
            [Calendar].[Activities]
                (Name, Description, StartDate, EndDate, ResponsibleId, CreatedBy, CreatedDate, IsPermissionControlled)
            VALUES
                (@Name, @Description, @StartDate, @EndDate, @ResponsibleId, @CreatedBy, GETDATE(), @IsPermissionControlled)
        SELECT SCOPE_IDENTITY()
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  Table [dbo].[tblEmployee]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblEmployee](
	[iEmployeeId] [int] IDENTITY(0,1) NOT FOR REPLICATION NOT NULL,
	[strEmployeeNo] [varchar](20) NOT NULL,
	[iDepartmentId] [int] NOT NULL,
	[strExpDep] [varchar](20) NOT NULL,
	[dtmEmployed] [smalldatetime] NULL,
	[strFirstName] [varchar](50) NOT NULL,
	[strLastName] [varchar](50) NOT NULL,
	[strTitle] [varchar](200) NOT NULL,
	[strAddress1] [varchar](150) NOT NULL,
	[strAddress2] [varchar](150) NOT NULL,
	[strAddress3] [varchar](150) NOT NULL,
	[iCountryId] [int] NOT NULL,
	[strPhoneHome] [varchar](30) NOT NULL,
	[strPhoneInternal] [varchar](30) NOT NULL,
	[strPhoneWork] [varchar](30) NOT NULL,
	[strPhoneMobile] [varchar](30) NOT NULL,
	[strBeeper] [varchar](20) NOT NULL,
	[strCallNumber] [varchar](20) NOT NULL,
	[strFax] [varchar](30) NOT NULL,
	[strEmail] [varchar](100) NOT NULL,
	[strLoginName] [varchar](100) NOT NULL,
	[strLoginDomain] [varchar](200) NOT NULL,
	[strPassword] [varchar](32) NOT NULL,
	[iCompanyId] [int] NOT NULL,
	[bWizard] [bit] NOT NULL,
	[strComment] [varchar](4000) NOT NULL,
	[iImageId] [int] NOT NULL,
	[bEmailConfirmed] [bit] NOT NULL,
	[strMailPassword] [varchar](20) NOT NULL,
	[ADIdentifier] [uniqueidentifier] NOT NULL,
	[LastLogin] [datetime] NULL,
	[PreviousLogin] [datetime] NULL,
 CONSTRAINT [PK__tblEmployee_iEmployeeId] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DepartmentResponsibles]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DepartmentResponsibles](
	[Id] [int] NOT NULL,
	[DepartmentId] [int] NOT NULL,
	[EmployeeId] [int] NOT NULL,
	[ResponsibleTypeId] [tinyint] NOT NULL,
 CONSTRAINT [PK_DepartmentResponsibles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[GetLeaderUsers]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetLeaderUsers]
AS
BEGIN
    SELECT
        iEmployeeId,
        strFirstName,
        strLastName
    FROM
        tblEmployee
    WHERE
        iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1)
END
GO
/****** Object:  Table [dbo].[tblDepartment]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblDepartment](
	[iDepartmentId] [int] IDENTITY(0,1) NOT FOR REPLICATION NOT NULL,
	[iDepartmentParentId] [int] NOT NULL,
	[iCompanyId] [int] NOT NULL,
	[iMin] [int] NOT NULL,
	[iMax] [int] NOT NULL,
	[iLevel] [int] NOT NULL,
	[strName] [varchar](80) NOT NULL,
	[strDescription] [varchar](4000) NOT NULL,
	[strContactInfo] [varchar](4000) NOT NULL,
	[bCompany] [bit] NOT NULL,
	[strPhone] [varchar](20) NOT NULL,
	[strFax] [varchar](20) NOT NULL,
	[strEmail] [varchar](150) NOT NULL,
	[strURL] [varchar](200) NOT NULL,
	[iCountryId] [int] NOT NULL,
	[strOrgNo] [varchar](50) NOT NULL,
	[strVisitAddress1] [varchar](150) NOT NULL,
	[strVisitAddress2] [varchar](150) NOT NULL,
	[strVisitAddress3] [varchar](150) NOT NULL,
	[strAddress1] [varchar](150) NOT NULL,
	[strAddress2] [varchar](150) NOT NULL,
	[strAddress3] [varchar](150) NOT NULL,
	[strFileURL] [varchar](100) NOT NULL,
	[iChildCount] [int] NOT NULL,
	[ADIdentifier] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK__tblDepartment_iDepartmentId] PRIMARY KEY CLUSTERED 
(
	[iDepartmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [Deviation].[fGetClosestDepartmentResponsible]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[fGetClosestDepartmentResponsible] 
(
	@DepartmentId INT
)  
RETURNS INT
AS  
BEGIN 
	DECLARE @ClosetDepartmentId INT = NULL;
	IF(@DepartmentId = 0)
		BEGIN
			SELECT 
				@ClosetDepartmentId = DepartmentId
			FROM 
				dbo.DepartmentResponsibles dr
			WHERE
				dr.DepartmentId = 0
		END
	ELSE
		BEGIN
			DECLARE @Department TABLE
			(
				iDepartmentId INT PRIMARY KEY,
				iDepartmentParentId INT
			);
			WITH Department AS
			(
					SELECT 
						iDepartmentId, iDepartmentParentId
					FROM 
						[dbo].tblDepartment
					WHERE
						iDepartmentId = @DepartmentId
				UNION ALL
					SELECT 
						h.iDepartmentId , h.iDepartmentParentId
					FROM 
						[dbo].tblDepartment h
						INNER JOIN Department 
							ON	h.iDepartmentId = Department.iDepartmentParentId
							AND h.iDepartmentId <> h.iDepartmentParentId
			)
			INSERT INTO @Department
			SELECT DISTINCT d.iDepartmentId, d.iDepartmentParentId
			FROM Department d
			INNER JOIN dbo.DepartmentResponsibles dr ON d.iDepartmentId = dr.DepartmentId
			SELECT @ClosetDepartmentId = iDepartmentId FROM @Department WHERE iDepartmentParentId = (SELECT MAX(iDepartmentParentId) FROM @Department)
			IF(@ClosetDepartmentId = NULL)
				BEGIN
					/*check id = 0 case*/
					IF EXISTS(SELECT iDepartmentId FROM [dbo].tblDepartment WHERE iDepartmentId IN (SELECT iDepartmentId FROM @Department))
						BEGIN
							SELECT 
								@ClosetDepartmentId = DepartmentId
							FROM 
								dbo.DepartmentResponsibles dr
							WHERE
								dr.DepartmentId = 0
							AND
								dr.ResponsibleTypeId = 1
						END
				END
		END
	RETURN @ClosetDepartmentId
END
GO
/****** Object:  StoredProcedure [Deviation].[GetClosestDepartmentResponsible]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetClosestDepartmentResponsible]
	@DepartmentId INT
AS
BEGIN
	DECLARE @ClosetDepartmentId INT = NULL;
	SET @ClosetDepartmentId = [Deviation].[fGetClosestDepartmentResponsible](@DepartmentId);
	IF @ClosetDepartmentId IS NOT NULL
		BEGIN
			SELECT @ClosetDepartmentId AS Id, dr.EmployeeId AS EmployeeId, dr.ResponsibleTypeId AS WorkerType, strEmail AS Email
			FROM dbo.DepartmentResponsibles dr
			LEFT JOIN dbo.tblEmployee e ON e.iEmployeeId = dr.EmployeeId
			WHERE dr.DepartmentId = @ClosetDepartmentId
		END
	ELSE
		BEGIN
			SELECT @ClosetDepartmentId AS Id, NULL AS EmployeeId, NULL AS WorkerType, NULL AS Email
		END
END
GO
/****** Object:  Table [dbo].[relItem]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relItem](
	[iItemId] [int] NOT NULL,
	[iItemChildId] [int] NOT NULL,
 CONSTRAINT [PK__relItem_iItemId_iItemChildId] PRIMARY KEY CLUSTERED 
(
	[iItemId] ASC,
	[iItemChildId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Risk].[AnalysisMembers]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisMembers](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[EmployeeId] [int] NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisMembers_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Risk].[AddAnalysisMember]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddAnalysisMember] 
	@AnalysisId INT,
	@EmployeeId INT
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.AnalysisMembers(AnalysisId, EmployeeId)
    VALUES(@AnalysisId, @EmployeeId);
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  Table [Calendar].[ActivityTasks]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Calendar].[ActivityTasks](
	[ActivityTaskId] [int] IDENTITY(1,1) NOT NULL,
	[ActivityId] [int] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedDate] [datetime] NULL,
	[IsCompleted] [bit] NOT NULL,
	[CompletedDate] [date] NULL,
PRIMARY KEY CLUSTERED 
(
	[ActivityTaskId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Calendar].[UpdateActivityTask]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[UpdateActivityTask] 
    @ActivityTaskId INT,
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX),
    @UpdatedBy INT,
    @IsCompleted BIT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @CompletedDate DATE = NULL;
        IF @IsCompleted = 1
        BEGIN
            SET @CompletedDate = CONVERT(DATE, GETDATE());
        END
        UPDATE
            [Calendar].[ActivityTasks]
        SET
            Name = @Name,
            Description = @Description,
            UpdatedBy = @UpdatedBy,
            UpdatedDate = GETDATE(),
            IsCompleted = @IsCompleted,
            CompletedDate = @CompletedDate
        WHERE
            ActivityTaskId = @ActivityTaskId
        SELECT
                ActivityTaskId,
                ActivityId,
                Name,
                Description,
                CreatedBy,
                CreatedDate,
                IsCompleted,
                CompletedDate
            FROM
                [Calendar].[ActivityTasks]
            WHERE
                ActivityTaskId = @ActivityTaskId
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [Calendar].[CreateActivityTask]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[CreateActivityTask] 
    @ActivityId INT,
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX),
    @CreatedBy INT,
    @IsCompleted BIT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DEClARE @ActivityTaskId INT;
        DECLARE @CompletedDate DATE = NULL;
        IF @IsCompleted = 1
        BEGIN
            SET @CompletedDate = CONVERT(DATE, GETDATE());
        END
        INSERT INTO
            [Calendar].[ActivityTasks]
                (ActivityId, Name, Description, CreatedBy, CreatedDate, IsCompleted, CompletedDate)
            VALUES
                (@ActivityId, @Name, @Description, @CreatedBy, GETDATE(), @IsCompleted, @CompletedDate)
        SET @ActivityTaskId = SCOPE_IDENTITY()
        SELECT
            ActivityTaskId,
            ActivityId,
            Name,
            Description,
            CreatedBy,
            CreatedDate,
            IsCompleted,
            CompletedDate
        FROM
            [Calendar].[ActivityTasks]
        WHERE
            ActivityTaskId = @ActivityTaskId
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertDepartmentResponsible]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 16, 2015
-- Description:	Add new department responsible
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_InsertDepartmentResponsible]
	@EmployeeId INT,
	@DepartmentId INT,
	@ResponsibleTypeId INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @MaxId INT;
	SELECT @MaxId = MAX(dr.Id) FROM dbo.DepartmentResponsibles dr;
	
	SET @MaxId = ISNULL(@MaxId, 0);
    INSERT INTO dbo.DepartmentResponsibles
    (
        Id,
        DepartmentId,
        EmployeeId,
        ResponsibleTypeId
    )
    VALUES
    (
        (@MaxId + 1),
        @DepartmentId,
        @EmployeeId,
        @ResponsibleTypeId 
    )
    
    SELECT (@MaxId + 1);
END
GO
/****** Object:  Table [dbo].[m136_HearingMembers]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_HearingMembers](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[HearingsId] [int] NULL,
	[EmployeeId] [int] NULL,
	[HasRead] [bit] NULL,
	[HearingResponse] [int] NULL,
 CONSTRAINT [m136_HearingMembers_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateReadForHearingMember]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateReadForHearingMember] 
	@HearingId INT,
	@EmployeeId INT
AS
BEGIN
	UPDATE dbo.m136_HearingMembers
	SET HasRead = 1
	WHERE HearingsId = @HearingId 
		AND EmployeeId = @EmployeeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateHearingResponseForMember]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateHearingResponseForMember]
	@UserId AS INT,
	@HearingsId AS INT,
	@HearingResponse AS INT
AS
BEGIN
	UPDATE dbo.m136_HearingMembers
	SET HearingResponse = @HearingResponse
	WHERE EmployeeId = @UserId
		  AND HearingsId = @HearingsId
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_be_CountEmployees]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[m136_be_CountEmployees]
(
	@iDepartmentId INT
)
RETURNS INT
AS
BEGIN
	DECLARE @iReturn INT;

	WITH Total AS (
		SELECT COUNT(*) as Total FROM dbo.tblEmployee te WHERE te.iDepartmentId = @iDepartmentId
	)
	SELECT @iReturn = Total FROM Total OPTION (MAXRECURSION 0);
	
	RETURN @iReturn;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CheckDepartmentsTobeDeleted]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CheckDepartmentsTobeDeleted]
	@iDepartmentId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT COUNT(1) FROM dbo.tblEmployee te WHERE te.iDepartmentId = @iDepartmentId;
END
GO
/****** Object:  StoredProcedure [dbo].[IsUserLeader]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IsUserLeader]
    @UserId INT
AS
BEGIN
    IF (EXISTS (SELECT 1 FROM DepartmentResponsibles WHERE EmployeeId = @UserId ANd ResponsibleTypeId = 1))
    BEGIN
        SELECT 1
    END
    ELSE
    BEGIN
        SELECT 0
    END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_HasDepartmentEmployees]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 14.02.2014
-- Description:	Has Department Employees
-- =============================================
CREATE PROCEDURE [dbo].[m136_HasDepartmentEmployees] 
	-- Add the parameters for the stored procedure here
	@iDepartmentId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT Count(*)
	FROM [tblEmployee] 
	WHERE	
		iDepartmentId = @iDepartmentId
END
GO
/****** Object:  StoredProcedure [Calendar].[GetActiveActivities]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetActiveActivities]
    @MaxItems INT
AS
BEGIN
    DECLARE @Today DATETIME = CONVERT(DATE, GETDATE());
	SELECT TOP (@MaxItems)
        a.ActivityId,
        a.Name,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        a.CreatedBy,
        a.Description,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
		Calendar.Activities a
    WHERE
        (a.StartDate <= @Today AND a.EndDate >= @Today)
        OR (a.EndDate < @Today AND EXISTS (SELECT 1 FROM [Calendar].[ActivityTasks] at WHERE at.ActivityId = a.ActivityId AND at.IsCompleted = 0))
    ORDER BY
        a.StartDate, a.Name
END
GO
/****** Object:  Table [Calendar].[ActivityDocuments]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Calendar].[ActivityDocuments](
	[ActivityDocumentId] [int] IDENTITY(1,1) NOT NULL,
	[ActivityId] [int] NOT NULL,
	[DocumentId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ActivityDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateEmployeeLoginTime]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UpdateEmployeeLoginTime]
	@iEmployeeId int
AS
BEGIN
UPDATE 
	[dbo].[tblEmployee]
SET 
	PreviousLogin = LastLogin,
	LastLogin = GetDate()
WHERE 
	iEmployeeId = @iEmployeeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AuthenticateUser]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AuthenticateUser]
	@Username varchar(100),
	@HashedPassword varchar(32)
AS
BEGIN
	DECLARE @EmployeeId int
	-- Check if the requested user exists with this password
	SELECT @EmployeeId =	
		(SELECT
			[iEmployeeId]
		FROM
			[dbo].[tblEmployee]
		WHERE
				strLoginName = @UserName
			AND	strPassword = @HashedPassword)
	-- Return the required data for the user
	SELECT
		[iEmployeeId], 
		[iDepartmentId], 
		[strFirstName], 
		[strLastName],
		[LastLogin]
	FROM
		[dbo].[tblEmployee]
	WHERE 
		iEmployeeId = @EmployeeId
	-- Update last logon time
	IF @EmployeeId IS NOT NULL
	BEGIN
		EXEC [dbo].[m136_UpdateEmployeeLoginTime] @EmployeeId
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AuthenticateDomainUser]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AuthenticateDomainUser]
	@LoginName varchar(100),
	@Domain varchar(100)
AS
BEGIN
	DECLARE @EmployeeId int
	-- Check if the requested user exists with this password
	SELECT @EmployeeId =	
		(SELECT
			[iEmployeeId]
		FROM
			[dbo].[tblEmployee]
		WHERE
				strLoginName = @LoginName
			AND ',' + strLoginDomain + ',' LIKE '%,' + @Domain + ',%') -- A trick to support the multiple domains in the field (domain1,domain2)
    -- Getting the last logon
	DECLARE @LastLogin datetime
	SET @LastLogin =
	(
		SELECT
			CONVERT(date, [LastLogin])
		FROM
			[dbo].[tblEmployee]
		WHERE 
			iEmployeeId = @EmployeeId
	)
	-- Return the required data for the user
	SELECT
		[iEmployeeId], 
		[iDepartmentId], 
		[strFirstName], 
		[strLastName],
		[LastLogin]
	FROM
		[dbo].[tblEmployee]
	WHERE 
		iEmployeeId = @EmployeeId
	-- Update last logon time only if not the same day
	IF @EmployeeId IS NOT NULL AND @LastLogin < CONVERT(date, GetDate())
	BEGIN
		EXEC [dbo].[m136_UpdateEmployeeLoginTime] @EmployeeId
	END
END
IF OBJECT_ID('[dbo].[m136_AuthenticateUser]', 'p') IS NULL
    EXEC ('CREATE PROCEDURE [dbo].[m136_AuthenticateUser] AS SELECT 1')
GO
/****** Object:  Table [dbo].[tblACL]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblACL](
	[iEntityId] [int] NOT NULL,
	[iApplicationId] [int] NOT NULL,
	[iSecurityId] [int] NOT NULL,
	[iPermissionSetId] [int] NOT NULL,
	[iGroupingId] [int] NOT NULL,
	[iBit] [int] NOT NULL,
 CONSTRAINT [PK__tblACL_iEntityId_iApplicationId_iSecurityId_iPermissionSetId] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC,
	[iApplicationId] ASC,
	[iSecurityId] ASC,
	[iPermissionSetId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[CanUserAccessToActivity]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[CanUserAccessToActivity]
(
	@UserId INT,
	@ActivityId INT
)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT = 0;
    DECLARE @UserDepartmentId TABLE(Id INT);
    DECLARE @UserRoleId TABLE(Id INT);
    INSERT INTO @UserDepartmentId(Id)
    SELECT
        iDepartmentId
    FROM
        tblEmployee
    WHERE
        iEmployeeId = @UserId
    INSERT INTO @UserRoleId(Id)
    SELECT
        iSecGroupId
    FROM
        relEmployeeSecGroup
    WHERE
        iEmployeeId = @UserId
    IF EXISTS
    (
        SELECT 1
        FROM Calendar.Activities
        WHERE
            ActivityId = @ActivityId
            AND 
            (
                IsPermissionControlled = 0
                OR
                (
                    CreatedBy = @UserId
                    OR ResponsibleId = @UserId
                    OR EXISTS(SELECT 1 FROM tblAcl WHERE iApplicationId = 160 AND iPermissionSetId = 701 AND iEntityId = ActivityId AND iSecurityId = @UserId)
                    OR EXISTS(SELECT 1 FROM tblAcl 
                              WHERE iApplicationId = 160 AND iPermissionSetId = 702 AND iEntityId = ActivityId 
                                    AND iSecurityId IN (SELECT Id FROM @UserDepartmentId))
                    OR EXISTS(SELECT 1 FROM tblAcl 
                              WHERE iApplicationId = 160 AND iPermissionSetId = 703 AND iEntityId = ActivityId 
                                    AND iSecurityId IN (SELECT Id FROM @UserRoleId))
                )
            )
    )
    BEGIN
        SET @Result = 1;
    END
    RETURN @Result;
END
GO
/****** Object:  StoredProcedure [Calendar].[GetUserActivitiesInYear]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetUserActivitiesInYear]
    @UserId INT,
    @Year INT
AS
BEGIN
    SELECT
        a.ActivityId,
        a.Name,
        a.Description,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        e1.strFirstName + ' ' + e1.strLastName AS ResponsibleName,
        a.CreatedBy,
        e2.strFirstName + ' ' + e2.strLastName AS CreatorName,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
        [Calendar].[Activities] a
            LEFT JOIN tblEmployee e1 ON a.ResponsibleId = e1.iEmployeeId
            INNER JOIN tblEmployee e2 ON a.CreatedBy = e2.iEmployeeId
    WHERE
        dbo.CanUserAccessToActivity(@UserId, a.ActivityId) = 1
        AND
        (
            Year(StartDate) = @Year
            OR Year(EndDate) = @Year
        )
    ORDER BY a.StartDate, a.Name
END
GO
/****** Object:  StoredProcedure [Calendar].[GetUserActivitiesInMonthOfYear]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetUserActivitiesInMonthOfYear]
    @UserId INT,
    @Year INT,
    @Month INT
AS
BEGIN
    SELECT
        a.ActivityId,
        a.Name,
        a.Description,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        e1.strFirstName + ' ' + e1.strLastName AS ResponsibleName,
        a.CreatedBy,
        e2.strFirstName + ' ' + e2.strLastName AS CreatorName,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
        [Calendar].[Activities] a
            LEFT JOIN tblEmployee e1 ON a.ResponsibleId = e1.iEmployeeId
            INNER JOIN tblEmployee e2 ON a.CreatedBy = e2.iEmployeeId
    WHERE
        dbo.CanUserAccessToActivity(@UserId, a.ActivityId) = 1
        AND
        (
            (Year(StartDate) = @Year AND Month(StartDate) = @Month)
            OR (Year(EndDate) = @Year ANd Month(EndDate) = @Month)
        )
    ORDER BY a.StartDate, a.Name
END
GO
/****** Object:  StoredProcedure [Calendar].[GetUpcomingActivities]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetUpcomingActivities]
    @UserId INT,
    @UpcomingEventsCount INT
AS
BEGIN
    DECLARE @Today DATETIME = CONVERT(DATE, GETDATE());
    SELECT TOP (@UpcomingEventsCount)
        ActivityId,
        Name,
        StartDate,
        EndDate,
        ResponsibleId,
        CreatedBy,
        Description
    FROM
        Calendar.Activities
    WHERE
        dbo.CanUserAccessToActivity(@UserId, ActivityId) = 1
        AND StartDate > @Today
    ORDER BY
        StartDate, Name
END
GO
/****** Object:  StoredProcedure [Calendar].[GetActiveActivitiesForNotification]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetActiveActivitiesForNotification]
    @UserId INT,
    @MaxItems INT
AS
BEGIN
    DECLARE @Today DATETIME = CONVERT(DATE, GETDATE());
	SELECT TOP (@MaxItems)
        a.ActivityId,
        a.Name,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        a.CreatedBy,
        a.Description,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
		Calendar.Activities a
    WHERE
        dbo.CanUserAccessToActivity(@UserId, a.ActivityId) = 1
        AND
        (
            (a.StartDate <= @Today AND a.EndDate >= @Today)
            OR (a.EndDate < @Today AND EXISTS (SELECT 1 FROM [Calendar].[ActivityTasks] at WHERE at.ActivityId = a.ActivityId AND at.IsCompleted = 0))
        )
    ORDER BY
        a.StartDate, a.Name
END
GO
/****** Object:  StoredProcedure [Calendar].[be_GetActiveActivities]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[be_GetActiveActivities]
    @UserId INT
AS
BEGIN
    DECLARE @Today DATETIME = CONVERT(DATE, GETDATE());
	SELECT
        ActivityId,
        Name,
        StartDate,
        EndDate,
        ResponsibleId,
        CreatedBy,
        Description
    FROM
		Calendar.Activities
    WHERE
        dbo.CanUserAccessToActivity(@UserId, ActivityId) = 1
        AND
        (
            StartDate <= @Today
            AND EndDate >= @Today
        )
END
GO
/****** Object:  Table [dbo].[m136_relInfo]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_relInfo](
	[iEntityId] [int] NOT NULL,
	[iItemId] [int] NOT NULL,
	[iScaleDirId] [int] NULL,
	[iPlacementId] [int] NOT NULL,
	[iVJustifyId] [int] NULL,
	[iHJustifyId] [int] NULL,
	[iSize] [int] NULL,
	[strCaption] [varchar](120) NULL,
	[iSort] [int] NULL,
	[strURL] [varchar](100) NULL,
	[iRelationTypeId] [int] NOT NULL,
	[iWidth] [int] NULL,
	[iHeight] [int] NULL,
	[iThumbWidth] [int] NULL,
	[iThumbHeight] [int] NULL,
	[iNewWindow] [int] NULL,
	[iProcessRelationTypeId] [int] NOT NULL,
 CONSTRAINT [PK_m123_relInfo] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC,
	[iItemId] ASC,
	[iPlacementId] ASC,
	[iRelationTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fnHasDocumentAttachment]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 11, 2014
-- Description:	Check a document has attachment
-- =============================================
CREATE FUNCTION [dbo].[fnHasDocumentAttachment]
(
	@iEntityId	INT
)
RETURNS BIT
AS
BEGIN
	IF EXISTS (SELECT 1 FROM dbo.m136_relInfo r WHERE r.iEntityId = @iEntityId AND r.iRelationTypeId = 20) RETURN 1;
	RETURN 0;
END
GO
/****** Object:  Table [dbo].[m136_tblHandbook]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblHandbook](
	[iHandbookId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iParentHandbookId] [int] NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](7000) NOT NULL,
	[iCreatedById] [int] NOT NULL,
	[dtmCreated] [datetime] NOT NULL,
	[iMin] [int] NOT NULL,
	[iMax] [int] NOT NULL,
	[iLevel] [int] NOT NULL,
	[iDepartmentId] [int] NULL,
	[iDeleted] [int] NOT NULL,
	[iLevelType] [int] NOT NULL,
	[iViewTypeId] [int] NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK__m136_tbl__495B80E66991A7CB] PRIMARY KEY CLUSTERED 
(
	[iHandbookId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [IX_Deleted] ON [dbo].[m136_tblHandbook] 
(
	[iDeleted] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Deleted_Include] ON [dbo].[m136_tblHandbook] 
(
	[iDeleted] ASC
)
INCLUDE ( [iHandbookId],
[iParentHandbookId],
[strName],
[iMin],
[iDepartmentId],
[iLevelType]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_DepartmentLevelType] ON [dbo].[m136_tblHandbook] 
(
	[iDepartmentId] ASC,
	[iLevelType] ASC
)
INCLUDE ( [iHandbookId],
[iMin],
[iMax]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_LevelTypeInclude] ON [dbo].[m136_tblHandbook] 
(
	[iLevelType] ASC
)
INCLUDE ( [iHandbookId],
[iMin],
[iMax],
[iDepartmentId]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_ParentAndDeleted] ON [dbo].[m136_tblHandbook] 
(
	[iParentHandbookId] ASC,
	[iDeleted] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetParentPathEx]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn136_GetParentPathEx](@chapterId INT)
RETURNS NVARCHAR(4000)
AS
BEGIN
	DECLARE @Path varchar(4000);
	WITH Parents AS
	(
		SELECT 
			iParentHandbookId,
			strName
		FROM 
			[dbo].[m136_tblHandbook] 
		WHERE
			iHandbookId = @chapterId
		UNION ALL
		SELECT 
			h.iParentHandbookId,
			h.strName
		FROM 
			[dbo].[m136_tblHandbook] h
			INNER JOIN Parents
				ON	(h.iHandbookId = Parents.iParentHandbookId AND (h.iHandbookId <> h.iParentHandbookId OR h.iParentHandbookId IS NULL)) 
	)
	SELECT
		@Path = strName + COALESCE('/' + @Path, '')
	FROM
		Parents --option(maxrecursion 0)
	RETURN @Path
END
GO
/****** Object:  Table [dbo].[m147_tblRegisterItem]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblRegisterItem](
	[iRegisterItemId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iRegisterItemParentId] [int] NULL,
	[iRegisterId] [int] NOT NULL,
	[strName] [varchar](200) NOT NULL,
	[strDescription] [varchar](1000) NOT NULL,
	[eTypeId] [int] NOT NULL,
	[bMandatory] [bit] NOT NULL,
	[bAllowMultiple] [bit] NOT NULL,
 CONSTRAINT [PK_m147_tblRegisterItem] PRIMARY KEY CLUSTERED 
(
	[iRegisterItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136x_tblTextIndex]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136x_tblTextIndex](
	[iEntityId] [int] NOT NULL,
	[totalvalue] [ntext] NULL,
 CONSTRAINT [PK_m136x_tblTextIndex] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[m136x_tblTextIndex](
[totalvalue] LANGUAGE [English])
KEY INDEX [PK_m136x_tblTextIndex]ON ([Handbook], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  UserDefinedFunction [dbo].[fn_Split]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_Split](@text varchar(8000), @delimiter varchar(20) = ' ')
RETURNS @Strings TABLE
(   
  position int IDENTITY PRIMARY KEY,
  value varchar(8000)  
)
AS
BEGIN

DECLARE @index int
SET @index = -1

WHILE (LEN(@text) > 0)
  BEGIN 
    SET @index = CHARINDEX(@delimiter , @text) 
    IF (@index = 0) AND (LEN(@text) > 0) 
      BEGIN  
        INSERT INTO @Strings VALUES (@text)
          BREAK 
      END 
    IF (@index > 1) 
      BEGIN  
        INSERT INTO @Strings VALUES (LEFT(@text, @index - 1))  
        SET @text = RIGHT(@text, (LEN(@text) - @index)) 
      END 
    ELSE
      SET @text = RIGHT(@text, (LEN(@text) - @index))
    END
  RETURN
END
GO
/****** Object:  Table [dbo].[m136_tblDocument]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblDocument](
	[iEntityId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iDocumentId] [int] NULL,
	[iVersion] [int] NOT NULL,
	[iDocumentTypeId] [int] NOT NULL,
	[iHandbookId] [int] NOT NULL,
	[strName] [varchar](200) NOT NULL,
	[strDescription] [varchar](2000) NOT NULL,
	[iCreatedbyId] [int] NOT NULL,
	[dtmCreated] [datetime] NOT NULL,
	[strAuthor] [varchar](200) NOT NULL,
	[iAlterId] [int] NOT NULL,
	[dtmAlter] [datetime] NULL,
	[strAlterer] [varchar](200) NOT NULL,
	[iApprovedById] [int] NOT NULL,
	[dtmApproved] [datetime] NULL,
	[strApprovedBy] [varchar](200) NOT NULL,
	[dtmPublish] [datetime] NULL,
	[dtmPublishUntil] [datetime] NULL,
	[iStatus] [int] NOT NULL,
	[iSort] [int] NOT NULL,
	[iDeleted] [int] NOT NULL,
	[iApproved] [int] NOT NULL,
	[iDraft] [int] NOT NULL,
	[iLevelType] [int] NOT NULL,
	[strHash] [char](32) NOT NULL,
	[iReadCount] [int] NOT NULL,
	[iCompareToVersion] [int] NULL,
	[File] [image] NULL,
	[UrlOrFileName] [nvarchar](4000) NULL,
	[UrlOrFileProperties] [nvarchar](4000) NULL,
	[iInternetDoc] [int] NULL,
	[iLatestVersion] [int] NOT NULL,
	[iLatestApproved] [int] NOT NULL,
	[strNameReversed] [varchar](200) NULL,
	[strDescriptionReversed] [varchar](2000) NULL,
	[iOrientation] [int] NOT NULL,
	[iReceiptsCopied] [bit] NOT NULL,
 CONSTRAINT [PK__m136_tbl__A72E94557ABC33CD] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [un_tblDocument] UNIQUE NONCLUSTERED 
(
	[iDocumentId] ASC,
	[iVersion] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [IX_AdminSearch] ON [dbo].[m136_tblDocument] 
(
	[iLatestVersion] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_AdminSearchApprovedBy] ON [dbo].[m136_tblDocument] 
(
	[iLatestVersion] ASC,
	[iApprovedById] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_AdminSearchDocType] ON [dbo].[m136_tblDocument] 
(
	[iDocumentTypeId] ASC,
	[iLatestVersion] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_AdminSearchOwner] ON [dbo].[m136_tblDocument] 
(
	[iCreatedbyId] ASC,
	[iLatestVersion] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_AdminSearchPublished] ON [dbo].[m136_tblDocument] 
(
	[iLatestApproved] ASC,
	[dtmPublishUntil] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_CreatedAndAltered] ON [dbo].[m136_tblDocument] 
(
	[iCreatedbyId] ASC,
	[iAlterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_EqualityHandbookId] ON [dbo].[m136_tblDocument] 
(
	[iHandbookId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_LatestApproved] ON [dbo].[m136_tblDocument] 
(
	[iApproved] ASC,
	[iLatestApproved] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_LatestApproved_Include] ON [dbo].[m136_tblDocument] 
(
	[iLatestApproved] ASC,
	[iApproved] ASC
)
INCLUDE ( [iHandbookId],
[iDocumentId]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[m136_tblDocument](
[strName] LANGUAGE [English], 
[strNameReversed] LANGUAGE [English])
KEY INDEX [PK__m136_tbl__A72E94557ABC33CD]ON ([Document], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[m147_relRegisterItemItem]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_relRegisterItemItem](
	[iAutoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iRegisterItemId] [int] NOT NULL,
	[iModuleId] [int] NOT NULL,
	[iCategoryId] [int] NOT NULL,
	[iItemId] [int] NOT NULL,
	[ValueDate] [datetime] NULL,
	[ValueTall] [bigint] NULL,
	[ValueText] [varchar](200) NULL,
	[iRegisterItemValueId] [int] NULL,
 CONSTRAINT [PK_m147_relRegisterItemItem] PRIMARY KEY CLUSTERED 
(
	[iAutoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fnSecurityGetPermission]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSecurityGetPermission]
(
    @iApplicationId int, 
    @iPermissionSetId int, 
    @iSecurityId int,
    @iEntityId int
)    
RETURNS int AS    
BEGIN   
    DECLARE @var INT;
    SELECT @var = 0;
    SELECT
        @var = @var | iBit
    FROM
        tblAcl a
            join relEmployeeSecGroup r on a.iSecurityId = r.iSecGroupId
            and r.iEmployeeId = @iSecurityId
    WHERE
        a.iApplicationId = @iApplicationId
        and a.iPermissionSetId = @iPermissionSetId
        and a.iEntityId = @iEntityId
    RETURN @var
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnHandbookHasReadContentsAccess]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 09, 2014
-- Description:	Check the permission read content of handbook
-- =============================================
CREATE FUNCTION [dbo].[fnHandbookHasReadContentsAccess]
(
	@iSecurityId INT,
	@iHandbookId INT
)
RETURNS BIT
AS
BEGIN
	IF (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 1 = 1) RETURN 1;
	RETURN 0;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnOrgGetUserName]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
-- iNameOrder: 
--  0 - 'Firstname Lastname' 
--  1 - 'LastName, Firstname'
CREATE FUNCTION [dbo].[fnOrgGetUserName] (@iUserId int, @strDefaultName varchar(102), @iNameOrder int)  
RETURNS varchar(102) AS  
BEGIN 

declare @var varchar(102)
if @iUserId > 0 
begin
  if @iNameOrder = 0 
    select @var = strFirstName + ' ' + strLastName from tblEmployee where iEmployeeId = @iUserId
  else
    select @var = strLastName + ', ' + strFirstName from tblEmployee where iEmployeeId = @iUserId
end
else
  set @var = ''


return isnull(@var, @strDefaultName)

END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchMetataggedDocuments]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SearchMetataggedDocuments]
	@strSearchString varchar(1024) = '',
	@likeSearchWords varchar(900) = '',
	@searchInContent BIT,
	@iSecurityId INT,
	@iRegisterId INT,
	@iRegsterItemId int = 0
AS
BEGIN
	SET NOCOUNT ON
	declare @searchHits table(iEntityId int not null PRIMARY KEY, RANK int not null)
	declare @KEYWORD table(strKeyWord varchar(900) not null)
	insert into @KEYWORD
	select distinct Value from fn_Split(@likeSearchWords, ',')
	DECLARE @KEYWORDCOUNT as INT
	SELECT @KEYWORDCOUNT = COUNT(*) FROM @Keyword
	insert into @searchHits
    select distinct doc.iEntityId
        ,1000 AS RANK
    FROM
        m136_tblDocument doc	
		INNER JOIN	m136_tblHandbook handbook ON handbook.iHandbookId = doc.iHandbookId				
		INNER JOIN m147_relRegisterItemItem dt ON doc.iDocumentId = dt.iItemId and (dt.iModuleId=136) 
    where
		iLatestApproved = 1
		AND			[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, handbook.iHandbookId) = 1
		AND (
				(@iRegsterItemId > 0 AND dt.iRegisterItemId=@iRegsterItemId)
				OR 
				(@iRegsterItemId = 0 AND dt.iRegisterItemId in (select iRegisterItemId from m147_tblRegisterItem where iRegisterId = @iRegisterId))
			)
		AND
		(
		  (@KEYWORDCOUNT = 0 )
		  OR 
		  (doc.iEntityId in (SELECT iEntityId
					FROM 
						m136_tblDocument doc 
						INNER JOIN @Keyword k
					   ON doc.strName like '%' + k.strKeyWord + '%'					 
					 GROUP BY 
					  iEntityId
					 HAVING COUNT(iEntityId) = @KEYWORDCOUNT))
		)
	IF(@searchInContent = 1)
		BEGIN		
			insert into @searchHits
            select SearchHits.iEntityId
                ,RANK
            FROM
                m136_tblDocument doc 	
				INNER JOIN	m136_tblHandbook handbook ON handbook.iHandbookId = doc.iHandbookId		
				INNER JOIN m147_relRegisterItemItem dt ON doc.iDocumentId = dt.iItemId and (dt.iModuleId=136) 
                RIGHT JOIN 
                m136x_tblTextIndex SearchHits on doc.iEntityId=SearchHits.iEntityId 
                INNER JOIN CONTAINSTABLE (m136x_tblTextIndex, totalvalue, @strSearchString) AS KEY_TBL
                on SearchHits.iEntityId=KEY_TBL.[KEY]
            where
				iLatestApproved = 1
				AND			[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, handbook.iHandbookId) = 1
				AND (
						(@iRegsterItemId > 0 AND dt.iRegisterItemId=@iRegsterItemId)
						OR 
						(@iRegsterItemId = 0 AND dt.iRegisterItemId in (select iRegisterItemId from m147_tblRegisterItem where iRegisterId = @iRegisterId))
					)
				AND doc.iEntityId not in (select iEntityId from @searchHits)
          END
	SELECT DISTINCT	SearchHits.Rank,
					doc.iDocumentId AS Id,
					doc.iHandbookId,
					doc.strName,
					doc.iDocumentTypeId,
					doc.iVersion AS [Version],
					handbook.iLevelType AS LevelType,
					doc.dtmApproved,
					doc.strApprovedBy,
					dbo.fnOrgGetUserName(doc.iCreatedById, '', 0) as Responsible,
					NULL AS DepartmentId,
					0 AS Virtual,
					doc.iSort,
					dbo.fn136_GetParentPathEx(doc.iHandbookId) as [Path],
					handbook.strName AS ParentFolderName,
					[dbo].[fnHasDocumentAttachment](doc.iEntityId) as HasAttachment
	FROM			m136_tblDocument doc
		INNER JOIN	m136_tblHandbook handbook 
			ON handbook.iHandbookId = doc.iHandbookId		
		INNER JOIN	@searchHits SearchHits on SearchHits.iEntityId=doc.iEntityId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocuments_Gastro]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SearchDocuments_Gastro]
	@PageIndex INT,
	@PageSize INT,
	@SearchString varchar(1024) = '',
	@LikeSearchWords varchar(900) = '',
	@SearchInContent BIT,
	@SecurityId INT,
	@RegisterId INT,
	@RegisterItemId INT = 0
AS
BEGIN
	DECLARE @Documents TABLE
	(
		[Rank] INT NOT NULL,
		DocumentId INT NOT NULL,
		HandbookId INT NOT NULL,
		Name VARCHAR(200) NOT NULL,
		DocumentTypeId INT NOT NULL,
		[Version] INT NOT NULL,
		LevelType INT NOT NULL,
		ApprovedDate DATETIME NULL,
		ApprovedBy VARCHAR(200) NOT NULL,
		Responsible VARCHAR(102) NOT NULL,
		DepartmentId INT NULL,
		Virtual INT NOT NULL,
		Sort INT NOT NULL,
		[Path] NVARCHAR(4000),
		ParentFolderName VARCHAR(100) NOT NULL,
		HasAttachment BIT NOT NULL
	)
	INSERT INTO @Documents
	EXEC [dbo].[m136_SearchMetataggedDocuments] @SearchString, @LikeSearchWords, @SearchInContent, @SecurityId, @RegisterId, @RegisterItemId
	SELECT [Rank],
		DocumentId,
		HandbookId,
		Name,
		DocumentTypeId,
		[Version],
		LevelType,
		ApprovedDate,
		ApprovedBy,
		Responsible,
		DepartmentId,
		Virtual,
		Sort,
		[Path],
		ParentFolderName,
		HasAttachment
	FROM (
		SELECT *,
			RowNumber = ROW_NUMBER() OVER (ORDER BY Sort, Name)
		FROM @Documents
	) AS [PagedList]
	WHERE (@PageSize=0 OR RowNumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1)) 
	SELECT COUNT(*) FROM @Documents
END
GO
/****** Object:  Table [dbo].[tblItem]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblItem](
	[iItemId] [int] NOT NULL,
	[iInformationTypeId] [int] NOT NULL,
	[iGroupId] [int] NOT NULL,
	[iAuthorId] [int] NOT NULL,
	[dtmRegistered] [smalldatetime] NOT NULL,
	[iHits] [int] NOT NULL,
	[iAvailabilityId] [int] NOT NULL,
 CONSTRAINT [PK__tblItem_iItemId] PRIMARY KEY CLUSTERED 
(
	[iItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fnArchiveGetImageName]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnArchiveGetImageName] (@iUserId int, @iItemId int, @strDefaultName varchar(102))  
RETURNS varchar(102) AS  
BEGIN 

declare @var varchar(102)
declare @tmpid int

select @tmpid = i.iGroupId, @var =  im.strPhotoNo from tblImage im, tblItem i where i.iInformationTypeId = 5 and i.iItemId > 0 and i.iItemId = im.iItemId and i.iItemId = @iItemId

if not @var is null
begin
  if (dbo.fnSecurityGetPermission (98, 99, @iUserId, @tmpid)  & 0x01) = 0
    set @var = 'No Access'
end

return isnull(@var, @strDefaultName)

END
GO
/****** Object:  UserDefinedFunction [dbo].[fnArchiveGetFileName]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnArchiveGetFileName] (@iUserId int, @iItemId int, @strDefaultName varchar(102))  
RETURNS varchar(102) AS  
BEGIN 

declare @var varchar(102)
declare @tmpid int

select @tmpid = i.iGroupId, @var =  f.strName from tblFile f, tblItem i where i.iInformationTypeId = 2 and i.iItemId > 0 and i.iItemId = f.iItemId and i.iItemId = @iItemId

if not @var is null
begin
  if (dbo.fnSecurityGetPermission (98, 99, @iUserId, @tmpid)  & 0x01) = 0
    set @var = 'No Access'
end

return isnull(@var, @strDefaultName)

END
GO
/****** Object:  StoredProcedure [Calendar].[GetActivitiesInYear]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetActivitiesInYear]
    @Year INT
AS
BEGIN
    SELECT
        a.ActivityId,
        a.Name,
        a.Description,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        e1.strFirstName + ' ' + e1.strLastName AS ResponsibleName,
        a.CreatedBy,
        e2.strFirstName + ' ' + e2.strLastName AS CreatorName,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
        [Calendar].[Activities] a
            LEFT JOIN tblEmployee e1 ON a.ResponsibleId = e1.iEmployeeId
            INNER JOIN tblEmployee e2 ON a.CreatedBy = e2.iEmployeeId
    WHERE
        Year(StartDate) = @Year
        OR Year(EndDate) = @Year
    ORDER BY a.StartDate, a.Name
END
GO
/****** Object:  StoredProcedure [Calendar].[GetActivitiesInMonthOfYear]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetActivitiesInMonthOfYear]
    @Year INT,
    @Month INT
AS
BEGIN
    SELECT
        a.ActivityId,
        a.Name,
        a.Description,
        a.StartDate,
        a.EndDate,
        a.ResponsibleId,
        e1.strFirstName + ' ' + e1.strLastName AS ResponsibleName,
        a.CreatedBy,
        e2.strFirstName + ' ' + e2.strLastName AS CreatorName,
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM [Calendar].[Activities] activity INNER JOIN [Calendar].[ActivityTasks] task ON activity.ActivityId = task.ActivityId
                WHERE activity.ActivityId = a.ActivityId AND task.IsCompleted = 0 ) THEN 0
            ELSE 1
        END AS IsCompleted
    FROM
        [Calendar].[Activities] a
            LEFT JOIN tblEmployee e1 ON a.ResponsibleId = e1.iEmployeeId
            INNER JOIN tblEmployee e2 ON a.CreatedBy = e2.iEmployeeId
    WHERE
        (Year(StartDate) = @Year AND Month(StartDate) = @Month)
        OR (Year(EndDate) = @Year ANd Month(EndDate) = @Month)
    ORDER BY a.StartDate, a.Name
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedMetataggedDocuments]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedMetataggedDocuments] 
	-- Add the parameters for the stored procedure here
	@SecurityId int = 0,
	@RegsterItemId int = 0,
	@MetatagValue VARCHAR(200) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT *
	FROM ( 
		SELECT
			dbo.m147_fnGetItemValue(dt.iAutoId) AS MetatagValue,
			d.iDocumentId, 
			d.iEntityId,
			d.strName, 
			d.iHandbookId, 
			h.strName AS strChapterName,
			d.iVersion,
			d.iSort
		FROM 
			m136_tblDocument d
			JOIN m136_tblHandbook h ON d.iHandbookId=h.iHandbookId
			LEFT OUTER JOIN m147_relRegisterItemItem dt 
				ON d.iDocumentId = dt.iItemId AND (dt.iRegisterItemId = @RegsterItemId AND dt.iModuleId=136) 				
		WHERE d.iLatestApproved = 1
			AND d.dtmPublish <= GETDATE()
			AND dt.iAutoId IS NOT NULL
			AND (dbo.fnSecurityGetPermission(136, 462, @SecurityId, d.iHandbookId)&1)=1
	) AS [Data]
	WHERE @MetatagValue IS NULL OR MetatagValue = @MetatagValue
	ORDER BY iSort, strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetPagedListOfApprovedMetataggedDocuments]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetPagedListOfApprovedMetataggedDocuments]
(
	@PageSize INT,
	@PageIndex INT,
	@SecurityId INT,
	@RegisterItemId INT
)
AS
BEGIN
	DECLARE @ApprovedMetataggedDocuments TABLE
	(
		MetatagValue VARCHAR(200) NOT NULL,
		DocumentId INT NOT NULL,
		EntityId INT NOT NULL,
		Name VARCHAR(200) NOT NULL,
		HandbookId INT NOT NULL,
		ChapterName VARCHAR(100) NOT NULL,
		[Version] INT NOT NULL,
		Sort INT NOT NULL
	)
	INSERT INTO @ApprovedMetataggedDocuments
		EXEC [dbo].[m136_GetListOfApprovedMetataggedDocuments] @SecurityId, @RegisterItemId
	SELECT MetatagValue,
		DocumentId,
		EntityId,
		Name,
		HandbookId,
		ChapterName,
		[Version],
		Sort
	FROM (		
		SELECT *,
			RowNumber = ROW_NUMBER() OVER (ORDER BY DocumentId)
		FROM @ApprovedMetataggedDocuments
	) AS [PagedList]
	WHERE (@PageSize=0 OR RowNumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	SELECT COUNT(DocumentId) FROM @ApprovedMetataggedDocuments
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetPagedDocumentsByRegisterItemIdAndMetatag]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetPagedDocumentsByRegisterItemIdAndMetatag]
(
	@PageIndex INT,
	@PageSize INT,
	@SecurityId INT,
	@RegisterItemId INT,
	@MetatagValue VARCHAR(200) = NULL
)
AS
BEGIN
	DECLARE @ApprovedMetataggedDocuments TABLE
	(
		MetatagValue VARCHAR(200) NOT NULL,
		DocumentId INT NOT NULL,
		EntityId INT NOT NULL,
		Name VARCHAR(200) NOT NULL,
		HandbookId INT NOT NULL,
		ChapterName VARCHAR(100) NOT NULL,
		[Version] INT NOT NULL,
		Sort INT NOT NULL
	)
	INSERT INTO @ApprovedMetataggedDocuments
		EXEC [dbo].[m136_GetListOfApprovedMetataggedDocuments] @SecurityId, @RegisterItemId, @MetatagValue
	SELECT MetatagValue,
		DocumentId,
		EntityId,
		Name,
		HandbookId,
		ChapterName,
		[Version],
		Sort
	FROM (		
		SELECT *,
			RowNumber = ROW_NUMBER() OVER (ORDER BY Sort, Name)
		FROM @ApprovedMetataggedDocuments
	) AS [PagedList]
	WHERE (@PageSize=0 OR RowNumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	SELECT COUNT(EntityId) FROM @ApprovedMetataggedDocuments
END
GO
/****** Object:  Table [dbo].[relEmployeePosition]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relEmployeePosition](
	[iEmployeeId] [int] NOT NULL,
	[iDepartmentId] [int] NOT NULL,
	[iPositionId] [int] NOT NULL,
	[iExecutiveLevel] [int] NULL,
 CONSTRAINT [PK__relEmployeePosition_iEmployeeId_iDepartmentId_iPositionId] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iDepartmentId] ASC,
	[iPositionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[m136_getLeaderForDepartmentId]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   FUNCTION [dbo].[m136_getLeaderForDepartmentId] (@iSecurityId int, @iDepartmentLeaderPositionId int)  
RETURNS int AS  
BEGIN 
declare @retVal int
set @retVal=0
if @iDepartmentLeaderPositionId > 0
	begin
		set @retVal = (SELECT top 1
			isnull(iDepartmentId, 0)
		FROM
			relEmployeePosition rel
		WHERE
			rel.iEmployeeId = @iSecurityId
			AND rel.iPositionId = @iDepartmentLeaderPositionId)
	end
else
	set @retVal = 0

return isnull(@retVal, 0)

END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_IsForcedHandbook]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[m136_IsForcedHandbook]
(
	@EmployeeId INT,
	@HandbookId INT
)
RETURNS BIT
AS
BEGIN
	DECLARE @isForced BIT
	SET @isForced = 0
	IF((dbo.fnSecurityGetPermission(136, 461, @EmployeeId, @HandbookId)&0x20) = 0x20)
	BEGIN
		SET @isForced = 1
	END
	RETURN @isForced
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_GetHandbookRecursive]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: Feb 05, 2015
-- Description:	Get all handbookId of sub folders.
-- =============================================
CREATE FUNCTION [dbo].[m136_GetHandbookRecursive]
(	
	@iHandbookId INT,
	@iSecurityId INT,
	@bCheckSecurity BIT
)
RETURNS TABLE
AS
RETURN 
(
    WITH Children AS
	(
			SELECT 
				iHandbookId 
			FROM 
				[dbo].[m136_tblHandbook] 
			WHERE
				iHandbookId = @iHandbookId 
				AND iDeleted = 0
		UNION ALL
			SELECT 
				h.iHandbookId 
			FROM 
				[dbo].[m136_tblHandbook] h
				INNER JOIN Children 
					ON	iParentHandbookId = Children.iHandbookId 
						AND h.iDeleted = 0
	)
	SELECT 
		iHandbookId 
	FROM 
		Children
	WHERE 
		(@bCheckSecurity = 0 OR [dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, iHandbookId) = 1)
)
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithContentLevelForcedFirstPage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithContentLevelForcedFirstPage] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x20) = 0x20)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x20) = 0x20
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithContentLevelForcedEmailAndFirstPage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithContentLevelForcedEmailAndFirstPage] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x60) = 0x60)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x60) = 0x60 
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithContentLevelForcedEmail]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithContentLevelForcedEmail] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x40) = 0x40)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x40) = 0x40
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithContentLevel]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithContentLevel] 
	-- Add the parameters for the stored procedure here
	@iParentHandbookId int = 0,
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x11) > 0)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x11) > 0
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)
		AND 
		(
			(@iParentHandbookId = 0 AND isnull(iParentHandbookId,0)=0) 
			OR 
			(@iParentHandbookId > 0 AND iParentHandbookId=@iParentHandbookId)
		)		
	ORDER BY iMin

END
GO
/****** Object:  Table [dbo].[m136_tblDocAccessLog]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblDocAccessLog](
	[iSecurityId] [int] NOT NULL,
	[iDocumentId] [int] NOT NULL,
	[dtmAccessed] [datetime] NOT NULL,
	[iAccessedCount] [int] NOT NULL,
 CONSTRAINT [PK_m136_tblDocAccessLog] PRIMARY KEY CLUSTERED 
(
	[iSecurityId] ASC,
	[iDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblCopyConfirms]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblCopyConfirms](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[iEntityId] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblConfirmRead]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblConfirmRead](
	[iConfirmId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iEntityId] [int] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtmConfirm] [datetime] NOT NULL,
	[strEmployeeName] [varchar](100) NOT NULL,
 CONSTRAINT [PK_m136_ConfirmRead] PRIMARY KEY CLUSTERED 
(
	[iConfirmId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_InsertReadingConfirmation]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_InsertReadingConfirmation]
	@EntityId INT,
	@EmployeeId INT
AS
BEGIN
	INSERT INTO m136_tblConfirmRead(iEntityId, iEmployeeId, dtmConfirm, strEmployeeName)
	VALUES(@EntityId, @EmployeeId , GETDATE(), [dbo].[fnOrgGetUserName](@EmployeeId,'No Name',0))
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetLatestConfirmInformation]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetLatestConfirmInformation]
	@SecurityId int,
	@EntityId int
AS
BEGIN
	SELECT ISNULL(strFirstName, '') + ISNULL(' ' + strLastName, '') AS FullName
	FROM  dbo.tblEmployee
	WHERE iEmployeeId = @SecurityId
	SELECT top 1 dtmConfirm 
	FROM m136_tblConfirmRead 
	WHERE iEmployeeId=@SecurityId 
		AND iEntityId=@EntityId 
	ORDER BY dtmConfirm DESC
END
GO
/****** Object:  Table [dbo].[m136_relHandbookModerator]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_relHandbookModerator](
	[iHandbookId] [int] NOT NULL,
	[iModeratorId] [int] NOT NULL,
	[iModeratorType] [int] NOT NULL,
 CONSTRAINT [pk_ModeratorRelation] PRIMARY KEY CLUSTERED 
(
	[iHandbookId] ASC,
	[iModeratorId] ASC,
	[iModeratorType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetLatestApprovedSubscriptionsV5]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetLatestApprovedSubscriptionsV5]
	@iSecurityId INT = 0,
	@iApprovedDocumentCount INT = 0,
	@TreatDepartmentFoldersAsFavorites INT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @Temp TABLE (
		Id UNIQUEIDENTIFIER,
		iEntityId UNIQUEIDENTIFIER,
		strName VARCHAR(200),
		iAccess INT,
		iHandbookId UNIQUEIDENTIFIER,
		dtmApproved DATETIME,
		ParentFolderName VARCHAR(200),
		[Version] INT,
		iDocumentTypeId INT,
		[Path] VARCHAR(200),
		strApprovedBy VARCHAR(200),
		Responsible VARCHAR(200),
		HasAttachment BIT,
		IsNew BIT
    );
    
    INSERT INTO @Temp VALUES('798FCA97-A5D6-4DA6-A722-02E764F3332C', 
    '798FCA97-A5D6-4DA6-A722-02E764F3332C',
    'Doc1',
    15,
    '8CC4A36B-3E6F-4B3C-B029-B09DF63E2B41',
    '2014-10-16 14:43:48.760',
    'Chapter local',
    0,
    15,
    'Root/Chapter local',
    'Mai Lam',
    'Mai Lam',
    0,
    0);
    
    SELECT * FROM @Temp;
END
GO
/****** Object:  UserDefinedTableType [dbo].[LinkDocumentRegisterItemValues]    Script Date: 10/20/2016 11:39:16 ******/
CREATE TYPE [dbo].[LinkDocumentRegisterItemValues] AS TABLE(
	[RegisterItemId] [int] NULL,
	[DocumentId] [int] NULL,
	[RegisterItemValueId] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[Items]    Script Date: 10/20/2016 11:39:16 ******/
CREATE TYPE [dbo].[Items] AS TABLE(
	[Id] [int] NOT NULL,
	[Value] [varchar](max) NULL
)
GO
/****** Object:  Table [dbo].[m136_FlowChart]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_FlowChart](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](300) NOT NULL,
	[Description] [varchar](800) NULL,
	[ContentType] [varchar](100) NOT NULL,
	[Extension] [varchar](10) NOT NULL,
	[ImageContent] [image] NOT NULL,
	[JsonContent] [nvarchar](max) NOT NULL,
	[IsTemplate] [bit] NULL,
	[Deleted] [bit] NULL,
	[CreatedBy] [bit] NULL,
	[DocumentId] [int] NULL,
	[DocumentVersion] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblScaleDir]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblScaleDir](
	[iScaleDirId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__B84A13E3038683F8] PRIMARY KEY CLUSTERED 
(
	[iScaleDirId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblRelationType]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblRelationType](
	[iRelationTypeId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__CFF95EE67EC1CEDB] PRIMARY KEY CLUSTERED 
(
	[iRelationTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblPlacement]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblPlacement](
	[iPlacementId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__5320DF9179FD19BE] PRIMARY KEY CLUSTERED 
(
	[iPlacementId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblSecGroup]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblSecGroup](
	[iSecGroupId] [int] NOT NULL,
	[strName] [varchar](50) NULL,
	[strDescription] [varchar](1000) NOT NULL,
 CONSTRAINT [PK__tblSecGroup_iSecGroupId] PRIMARY KEY CLUSTERED 
(
	[iSecGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SearchSecurityGroups]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_SearchSecurityGroups]
	@iUserID INT, 
	@strName VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;

    SET NOCOUNT ON;
    SELECT DISTINCT sg.iSecGroupId
		   ,sg.strName
		   ,sg.strDescription 
	FROM [dbo].[tblSecGroup] sg
	LEFT JOIN [dbo].[relEmployeeSecGroup] esg ON esg.iSecGroupId = sg.iSecGroupId
	WHERE (esg.iEmployeeId = @iUserId OR @iUserId IS NULL)
	AND (@strName IS NULL OR @strName = '' OR sg.strName LIKE '%' + @strName + '%');
END
GO
/****** Object:  Table [dbo].[m136_relVirtualRelation]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_relVirtualRelation](
	[iHandbookId] [int] NOT NULL,
	[iDocumentId] [int] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK_m136_relVirtualRelation] PRIMARY KEY CLUSTERED 
(
	[iHandbookId] ASC,
	[iDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY],
 CONSTRAINT [un_VirtualRelation] UNIQUE NONCLUSTERED 
(
	[iHandbookId] ASC,
	[iDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithoutContentLevel]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithoutContentLevel] 
	-- Add the parameters for the stored procedure here
	@iParentHandbookId int = 0,
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d where
				d.iHandbookId = h.iHandbookId
				and d.iLatestApproved = 1
				AND d.iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1 )
        + (SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d
				inner join m136_relVirtualRelation v
				on v.iHandbookId = h.iHandbookId
				and d.iDocumentId = v.iDocumentId
				and d.iLatestApproved = 1
				and iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1 
            )
        + (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x11) > 0)
				as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x11) > 0
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
		AND 
		(
			(@iParentHandbookId = 0 AND isnull(iParentHandbookId,0)=0) 
			OR 
			(@iParentHandbookId > 0 AND iParentHandbookId=@iParentHandbookId)
		)		
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_getAlterersApproversExpire]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_getAlterersApproversExpire]
	@iExpiresWithin int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iApprovedById iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strFullName,
	emp.strEmail
from
	m136_tblDocument doc
	left outer join tblEmployee emp on doc.iApprovedById=emp.iEmployeeId
where
	(
		(doc.iVersion = 
			(select max(iVersion) from m136_tblDocument kk where 
			kk.iDocumentId = doc.iDocumentId and 
			kk.iApproved in (1,4)
			)
		)
	)
	and doc.iApproved=1
	and doc.iDeleted=0
	and doc.dtmPublishUntil < dateadd(d, @iExpiresWithin, getdate())
union
select
	distinct doc.iAlterId iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strFullName,
	emp.strEmail
from
	m136_tblDocument doc
	left outer join tblEmployee emp on doc.iAlterId=emp.iEmployeeId
where
	(
		(doc.iVersion = 
			(select max(iVersion) from m136_tblDocument kk where 
			kk.iDocumentId = doc.iDocumentId and 
			kk.iApproved in (1,4)
			)
		)
	)
	and doc.iApproved=1
	and doc.iDeleted=0
	and doc.dtmPublishUntil < dateadd(d, @iExpiresWithin, getdate())
order by iEmployeeId
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnDocumentConfirmPercentage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    FUNCTION [dbo].[m136_fnDocumentConfirmPercentage] (
	@iDepartmentId int,
	@iEntityId int,
	@fromDate datetime = null,
	@toDate dateTime = null)  
RETURNS float AS  
BEGIN
declare @retVal float
declare @allEmps float
if @iDepartmentId > 0
begin
	set @allEmps =  (SELECT count(iEmployeeId)  FROM tblEmployee WHERE iEmployeeId>0 AND iDepartmentId=@iDepartmentId)
end
else
begin
	set @allEmps =  (SELECT count(iEmployeeId)  FROM tblEmployee WHERE iEmployeeId>0)
end

declare @confirmed float
set @confirmed  = (SELECT COUNT(distinct cr.iEmployeeId) FROM m136_tblConfirmRead cr
	left outer join m136_tblDocument doc on cr.iEntityId=doc.iEntityId
	left outer join tblEmployee emp on cr.iEmployeeId=emp.iEmployeeId
WHERE
	(doc.iEntityId=@iEntityId)
	AND ( emp.iDepartmentId=@iDepartmentId or @iDepartmentId=0)
	AND (cr.dtmConfirm>@fromDate OR @fromDate is null)
	AND (cr.dtmConfirm<@toDate OR @toDate is null)
)

if @allemps >0
	set @retVal = @confirmed/@allemps
else
	set @retVal = 0
return @retVal*100
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UserCanApproveDocument]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UserCanApproveDocument]
	@UserId INT,
	@DocumentId INT,
    @IsInternetDocumentMode INT,
    @IsInternetDocument BIT
AS
BEGIN
	DECLARE @Result BIT = 0;
	DECLARE @HandBookId INT;
    IF @IsInternetDocument IS NULL
    BEGIN
        SELECT
            @HandBookId = iHandBookId,
            @IsInternetDocument = iInternetDoc
        FROM
            dbo.m136_tblDocument
        WHERE
            iDocumentId = @DocumentId
            AND iLatestVersion = 1
    END
    ELSE
    BEGIN
        SELECT
		@HandBookId = iHandBookId
	FROM
		dbo.m136_tblDocument
	WHERE
		iDocumentId = @DocumentId
        AND iLatestVersion = 1
    END
	SELECT
		@Result = 1
	FROM
		dbo.tblEmployee AS e
	WHERE
		e.iEmployeeId = @UserId
		AND 
			(((@IsInternetDocumentMode = 0 OR @IsInternetDocument = 0) AND dbo.fnSecurityGetPermission(136, 462, e.iEmployeeId, @HandBookId) & 16 = 16)
			OR (@IsInternetDocumentMode = 1 AND @IsInternetDocument = 1 AND dbo.fnSecurityGetPermission(136, 460, e.iEmployeeId, 0) & 16 = 16))
	SELECT @Result
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetUserWithApprovePermissionOnDocument]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetUserWithApprovePermissionOnDocument]
	@DocumentId INT,
	@IsInternetDocumentMode BIT
AS
BEGIN
	DECLARE @HandBookId INT;
	DECLARE @IsInternetDocument BIT;
	SELECT
		@HandBookId = iHandBookId,
		@IsInternetDocument = iInternetDoc
	FROM
		dbo.m136_tblDocument
	WHERE
		iDocumentId = @DocumentId
        AND iLatestVersion = 1
	SELECT
		e.iEmployeeId,
		strFirstName,
		strLastName,
		strEmail
	FROM
		dbo.tblEmployee AS e
	WHERE
        (@IsInternetDocument = 0 AND dbo.fnSecurityGetPermission(136, 462, e.iEmployeeId, @HandBookId) & 16 = 16)
        OR (@IsInternetDocument = 1 AND 
            ((@IsInternetDocumentMode = 0 AND dbo.fnSecurityGetPermission(136, 462, e.iEmployeeId, @HandBookId) & 16 = 16)
            OR (@IsInternetDocumentMode = 1 AND dbo.fnSecurityGetPermission(136, 460, e.iEmployeeId, 0) & 16 = 16)))
END
GO
/****** Object:  Table [dbo].[m136_tblDocumentType]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblDocumentType](
	[iDocumentTypeId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](4000) NOT NULL,
	[iDeleted] [int] NOT NULL,
	[strIcon] [varchar](50) NOT NULL,
	[bIsProcess] [bit] NOT NULL,
	[bInactive] [bit] NULL,
	[ViewMode] [int] NULL,
	[Type] [int] NULL,
	[HideFieldNumbering] [bit] NULL,
	[HideFieldName] [bit] NULL,
	[iSort] [int] NULL,
 CONSTRAINT [PK__m136_tbl__0ECA5DE863D8CE75] PRIMARY KEY CLUSTERED 
(
	[iDocumentTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfSoonToExpireDocumentsCount]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Count Of Soon To Expire Documents
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfSoonToExpireDocumentsCount] 
	-- Add the parameters for the stored procedure here
	@iExpiresCount int = 0,
	@iExpiresLimit int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&16)=16
				
	select COUNT(*) from 
	( 
		select top (@iExpiresCount) 
					d.iDocumentId
		FROM 
			m136_tblDocument d
			join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
			join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
		where
			d.iLatestApproved = 1
			AND d.iApproved=1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			AND (datediff(d, getdate(), d.dtmPublishUntil) < @iExpiresLimit
					OR d.dtmPublishUntil<getdate() )
		order by
			d.dtmPublishUntil ASC
	) a
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfMyWorkDocumentsCount]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfMyWorkDocumentsCount] 
	-- Add the parameters for the stored procedure here
	@iMyLatestDocumentCount int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null)
insert into @HandbookPermissions
select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&3)=3
		
	select COUNT(*) from 
	(
select top (@iMyLatestDocumentCount) 
                d.iDocumentId
			FROM 
				m136_tblDocument d
                join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
                join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
                where
				(d.iApproved not in (1,4))
                AND not (d.iApproved = 0 and d.iDraft = 0)
				AND d.iCreatedById=@iSecurityId
				AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
				AND d.iLatestVersion = 1
			order by
				d.dtmCreated DESC
				) a
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsUnderWorkByOthersCount]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Count Of Documents Under Work By Others
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsUnderWorkByOthersCount] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iOtherVersionZeroDocumentCount int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
DECLARE	@return_value int

declare @HandbookPermissions table(iHandbookId int not null)

insert into @HandbookPermissions
select iHandbookId FROM m136_tblHandbook 
	WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&5)=5
		
select COUNT(*) from 
( 
	select top (@iOtherVersionZeroDocumentCount) 
                d.iDocumentId
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        where
		d.iApproved not in (1,4)
		AND d.iVersion = 0
		AND d.iDraft = 1
		AND d.iCreatedById<>@iSecurityId
		AND d.iLatestVersion = 1
		AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
	order by
		d.dtmCreated DESC				
) a

END
GO
/****** Object:  Table [dbo].[m136_tblFeedback]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblFeedback](
	[iFeedbackId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iEntityId] [int] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtmFeedback] [datetime] NOT NULL,
	[strFeedback] [varchar](4000) NOT NULL,
 CONSTRAINT [PK__m136_tbl__4A6AA8D70539C240] PRIMARY KEY CLUSTERED 
(
	[iFeedbackId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentFeedbacks]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Si.Manh.Nguyen
-- Create date: OCT 19. 2015
-- Description:	Get feedbacks of ducument 
-- =============================================

CREATE PROCEDURE [dbo].[m136_be_GetDocumentFeedbacks]
 @EntityId int
AS
BEGIN
	
	SELECT emp.iEmployeeId, emp.strFirstName, emp.strLastName, fe.dtmFeedback, fe.strFeedback 
	FROM dbo.m136_tblFeedback fe
	LEFT OUTER JOIN dbo.tblEmployee emp 
			ON fe.iEmployeeId=emp.iEmployeeId 
	WHERE fe.iEntityId= @EntityId 
	ORDER BY dtmFeedback DESC
END
GO
/****** Object:  Table [dbo].[m136_tblMetaInfoText]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblMetaInfoText](
	[iMetaInfoTextId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iEntityId] [int] NOT NULL,
	[value] [varchar](8000) NOT NULL,
 CONSTRAINT [PK__m136_tbl__C3BA05E00EC32C7A] PRIMARY KEY CLUSTERED 
(
	[iMetaInfoTextId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblMetaInfoTemplateRecords]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblMetaInfoTemplateRecords](
	[iMetaInfoTemplateRecordsId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](4000) NOT NULL,
	[iInfoTypeId] [int] NOT NULL,
	[DefaultIntValue] [int] NOT NULL,
	[DefaultTextValue] [varchar](7000) NOT NULL,
	[DefaultDateValue] [datetime] NOT NULL,
	[iFlag] [int] NOT NULL,
	[iDeleted] [int] NOT NULL,
	[iFieldProcessType] [int] NOT NULL,
 CONSTRAINT [PK__m136_tbl__5F5B06FC7D98A078] PRIMARY KEY CLUSTERED 
(
	[iMetaInfoTemplateRecordsId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetLatestDocumentById]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetLatestDocumentById]
(
	@SecurityId INT,
	@DocumentId INT
)
AS
BEGIN
	SELECT EntityId = iEntityId, 
		DocumentId = iDocumentId,
		[Version] = iVersion,
		DocumentTypeId = iDocumentTypeId,
		HandbookId = iHandbookId,
		Name = strName,
		[Description] = strDescription,
		CreatedbyId = iCreatedbyId,
		CreatedDate = dtmCreated,
		Author = strAuthor,
		ApprovedById = iApprovedById,
		ApprovedDate = dtmApproved,
		ApprovedBy = strApprovedBy
	FROM dbo.m136_tblDocument doc
	WHERE iDocumentId = @DocumentId
		AND iLatestApproved = 1
		AND (dbo.fnSecurityGetPermission(136, 462, @SecurityId, doc.iHandbookId)&1)=1
		AND iDeleted = 0
		AND doc.dtmPublish <= GETDATE()
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFileDocumentByDocumentId]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFileDocumentByDocumentId]
	@UserId INT,
	@DocumentId INT
AS
SET NOCOUNT ON
BEGIN
	SELECT	
        d.UrlOrFileName,
		d.UrlOrFileProperties,
		d.[File]
	FROM	
		m136_tblDocument d
	WHERE	
			d.iDocumentId = @DocumentId
		AND d.iLatestApproved = 1 
		AND [dbo].[fnHandbookHasReadContentsAccess](@UserId, d.iHandbookId) = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFileDocument]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFileDocument]
	@SecurityId INT = NULL,
	@EntityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	SELECT	
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File]
	FROM	
			m136_tblDocument d
	WHERE	
				d.iEntityId = @EntityId
			AND d.iLatestApproved = 1 
			AND [dbo].[fnHandbookHasReadContentsAccess](@SecurityId, d.iHandbookId) = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithoutContentLevelForcedFirstPage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithoutContentLevelForcedFirstPage] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d where
				d.iHandbookId = h.iHandbookId
				and d.iLatestApproved = 1
				AND d.iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1) 
        + (SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d
				inner join m136_relVirtualRelation v
				on v.iHandbookId = h.iHandbookId
				and d.iDocumentId = v.iDocumentId
				and d.iLatestApproved = 1
				and iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1 
            )
        + (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x20) = 0x20)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x20) = 0x20  
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithoutContentLevelForcedEmailAndFirstPage]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithoutContentLevelForcedEmailAndFirstPage] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d where
				d.iHandbookId = h.iHandbookId
				and d.iLatestApproved = 1
				AND d.iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1) 
        + (SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d
				inner join m136_relVirtualRelation v
				on v.iHandbookId = h.iHandbookId
				and d.iDocumentId = v.iDocumentId
				and d.iLatestApproved = 1
				and iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1  
            )
        + (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x60) = 0x60)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x60) = 0x60
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterSqlWithoutContentLevelForcedEmail]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Chapters With Content Level 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterSqlWithoutContentLevelForcedEmail] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iLevelType int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId, 
		h.strName, 
		h.iLevelType, 
		h.iDepartmentId,
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
		(SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d where
				d.iHandbookId = h.iHandbookId
				and d.iLatestApproved = 1
				AND d.iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1 ) 
        + (SELECT COUNT(d.iDocumentId) 
                from m136_tblDocument d
				inner join m136_relVirtualRelation v
				on v.iHandbookId = h.iHandbookId
				and d.iDocumentId = v.iDocumentId
				and d.iLatestApproved = 1
				and iApproved=1
				AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1 
            )
        + (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 
				AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x40) = 0x40)  as iChildCount
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0
		AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId)&0x40) = 0x40
		AND 
		(
			(@iLevelType > 0 AND h.iLevelType = @iLevelType) 
			OR
			(@iLevelType = 0) 	
		)	
	ORDER BY iMin

END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportFolderDocumentTypes]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportFolderDocumentTypes]
	@HandbookId AS INT,
	@SecurityId AS INT	
AS
BEGIN
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	DELETE FROM @AvailableChildren
	INSERT INTO @AvailableChildren(iHandbookId)
	SELECT 
		iHandbookId 
	FROM 
		[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
	DECLARE @docTypeTable TABLE(DocTypeCount INT,  DocType VARCHAR(100),DocTypeId INT) 
	INSERT INTO @docTypeTable (DocTypeCount ,DocType,DocTypeId) 
		(SELECT COUNT(d.idocumenttypeid) AS Count,
				dt.strName AS DocType, dt.iDocumentTypeId AS DocTypeId
			FROM m136_tblDocument d
			JOIN @AvailableChildren ac ON d.iHandbookId = ac.iHandbookId
			INNER JOIN m136_tblDocumentType dt ON dt.idocumenttypeid = d.idocumenttypeid
				WHERE  d.iLatestApproved = 1 and d.dtmPublish < GETDATE() 
		 GROUP BY d.idocumenttypeid, dt.strName, dt.iDocumentTypeId)
	SELECT DocTypeId, DocType, DocTypeCount FROM @docTypeTable		
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetSecurityGroups]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JUNE 29, 2015
-- Description:	Get security groups
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetSecurityGroups]
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT DISTINCT sg.iSecGroupId
		   ,sg.strName
		   ,sg.strDescription 
	FROM [dbo].[tblSecGroup] sg
	LEFT JOIN [dbo].[relEmployeeSecGroup] esg ON esg.iSecGroupId = sg.iSecGroupId
	WHERE esg.iEmployeeId = @UserId OR @UserId IS NULL;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetEmployeeRoles]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetEmployeeRoles]
	@iEmployeeId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT tsg.* FROM dbo.tblSecGroup tsg
    INNER JOIN dbo.relEmployeeSecGroup resg ON resg.iSecGroupId = tsg.iSecGroupId
    WHERE resg.iEmployeeId = @iEmployeeId;
END
GO
/****** Object:  Table [dbo].[m147_tblEtype]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblEtype](
	[eTypeId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
	[strDescription] [varchar](500) NOT NULL,
 CONSTRAINT [PK_m147_tblEtype] PRIMARY KEY CLUSTERED 
(
	[eTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m147_spGetRegisterItems]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spGetRegisterItems]
(
	@iSecurityId int,
	@iRegisterId int
)
AS
BEGIN
	SELECT a.*, b.strName AS strEtype 
	FROM m147_tblRegisterItem a 
	INNER JOIN m147_tblEtype b ON a.eTypeId = b.eTypeId
	WHERE a.iRegisterId = @iRegisterId 
	AND (dbo.fnSecurityGetPermission(147, 571, @iSecurityId, a.iRegisterId) & 1) = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m147_spGetRegisterItem]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spGetRegisterItem]
(
@iSecurityId int,
@iRegisterItemId int
)
AS
BEGIN
	SELECT * 
	FROM m147_tblRegisterItem 
	WHERE iRegisterItemId = @iRegisterItemId 
	AND (dbo.fnSecurityGetPermission(147, 571, @iSecurityId, iRegisterId) & 1) = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m147_GetRegisterItems]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_GetRegisterItems]
(
	@SecurityId INT,
	@RegisterId INT
)
AS
	SELECT RegisterItemId = a.iRegisterItemId, 
		Name = a.strName
	FROM m147_tblRegisterItem a 
	WHERE a.iRegisterId = @RegisterId 
		AND (dbo.fnSecurityGetPermission(147, 571, @SecurityId, a.iRegisterId) & 1) = 1
	ORDER BY Name
GO
/****** Object:  Table [dbo].[m147_tblRegisterItemValue]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblRegisterItemValue](
	[iRegisterItemValueId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iRegisterItemValueParentId] [int] NULL,
	[iRegisterItemId] [int] NULL,
	[RegisterValue] [varchar](200) NOT NULL,
 CONSTRAINT [PK_m147_tblRegisterItemValue] PRIMARY KEY CLUSTERED 
(
	[iRegisterItemValueId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetRegisterItemValues]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_GetRegisterItemValues]
(
	@SecurityId INT,
	@RegisterItemId INT
)
AS
BEGIN
	DECLARE @iAccess INT
	DECLARE @iRegisterId INT
	DECLARE @iRegItemId INT
	SELECT @iRegisterId = iRegisterId 
	FROM m147_tblRegisterItem 
	WHERE iRegisterItemId = @RegisterItemId
	SELECT @iAccess = dbo.fnSecurityGetPermission(147, 571, @SecurityId, @iRegisterId)
	SELECT a.*
	FROM m147_tblRegisterItemValue a 
	WHERE a.iRegisterItemId = @RegisterItemId
		  AND ((@iAccess & 1) = 1 or (@iAccess & 16) = 16) 
	ORDER BY a.RegisterValue
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfAllDocumentsApprovedWithinXDaysCount]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Gets Count Of All Documents Approved Within X Days] 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfAllDocumentsApprovedWithinXDaysCount] 
	-- Add the parameters for the stored procedure here
	@iApprovedWithinXDays int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null)

	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1

	select COUNT(*) from 
	( 
		select TOP 1000
            d.iDocumentId
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        where
			d.iDraft = 0
			AND d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
            AND datediff(d,isnull(d.dtmApproved, convert(datetime, '01.01.1970', 104)),getdate()) < @iApprovedWithinXDays 
		order by
			d.dtmApproved DESC
	) a
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplit_Gastro]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSplit_Gastro] 
    (   
    @DelimitedString    VARCHAR(8000),
    @Delimiter              VARCHAR(100) 
    )
RETURNS @tblArray TABLE
    (
    ElementID   INT IDENTITY(1,1),
    Element     VARCHAR(1000)
    )
AS
BEGIN
    -- Local Variable Declarations
    -- ---------------------------
    DECLARE @Index      SMALLINT,
                    @Start      SMALLINT,
                    @DelSize    SMALLINT
    SET @DelSize = LEN(@Delimiter)
    -- Loop through source string and add elements to destination table array
    -- ----------------------------------------------------------------------
    WHILE LEN(@DelimitedString) > 0
    BEGIN
        SET @Index = CHARINDEX(@Delimiter, @DelimitedString)
        IF @Index = 0
            BEGIN
                INSERT INTO
                    @tblArray 
                    (Element)
                VALUES
                    (LTRIM(RTRIM(@DelimitedString)))
                BREAK
            END
        ELSE
            BEGIN
                INSERT INTO
                    @tblArray 
                    (Element)
                VALUES
                    (LTRIM(RTRIM(SUBSTRING(@DelimitedString, 1,@Index - 1))))
                SET @Start = @Index + @DelSize
                SET @DelimitedString = SUBSTRING(@DelimitedString, @Start , LEN(@DelimitedString) - @Start + 1)
            END
    END
    RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportFolderOverview]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportFolderOverview]
	@HandbookId AS INT,
	@SecurityId AS INT	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @resultTable TABLE(iHandbookId INT, strName NVARCHAR(200), iLevelType INT, 
	   Approved INT, Expired INT, NewCount INT, NewAndUpdatedCount INT, Revised INT, AwaitingApproval INT, Archived INT,
	   Internet INT, Folders INT)
	INSERT INTO @resultTable (iHandbookId ,strName, iLevelType ) 
	(SELECT ihandbookid , strName, iLevelType FROM m136_tblHandbook WHERE iHandbookId = @HandbookId)
	DECLARE @Approved INT
	DECLARE @Expired INT
	DECLARE @NewCount INT
	DECLARE @NewAndUpdatedCount INT
	DECLARE @Revised INT
	DECLARE @AwaitingApproval INT
	DECLARE @Archived INT
	DECLARE @Folders INT	
	DECLARE @Internet INT
	DECLARE @DateFrom DATETIME
	DECLARE @DateTo DATETIME
	SET @DateFrom = DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()), 0)
	SET @DateTo = GETDATE()
	DECLARE curHandbookId CURSOR FOR
	SELECT iHandbookId FROM @resultTable
	OPEN curHandbookId
	FETCH NEXT FROM curHandbookId INTO @HandbookId
	WHILE @@FETCH_STATUS =0
	BEGIN
		DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
		DELETE FROM @AvailableChildren
		INSERT INTO @AvailableChildren(iHandbookId)
		SELECT 
			iHandbookId 
		FROM 
			[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
		SELECT @Folders = (SELECT COUNT(*) FROM @AvailableChildren)-1 
		SELECT @Approved = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.dtmPublish < @DateTo)
		SELECT @Expired = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.dtmPublishUntil < @DateTo)
		SELECT @AwaitingApproval = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 0 and d.iLatestVersion = 1 and d.iDraft = 0 
					and d.iApproved = 0 and d.dtmCreated < @DateTo)
		SELECT @Archived = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 0 and d.iLatestVersion = 1 and d.iDraft = 0 
					and d.iApproved = 4 and d.dtmApproved < @DateTo)
		SELECT @NewCount = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.iVersion = 0 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)
		SELECT @NewAndUpdatedCount = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)			
		SELECT @Revised = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.iVersion > 0 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)	
		SELECT @Internet = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					JOIN @AvailableChildren ac
						ON d.iHandbookId = ac.iHandbookId
					WHERE d.iLatestApproved = 1 and d.iInternetDoc = 1 and d.dtmPublish < @DateTo)
		UPDATE @resultTable 
		SET Approved = @Approved, Folders = @Folders , Expired = @Expired,
		AwaitingApproval = @AwaitingApproval, Revised = @Revised, Archived = @Archived,
		NewCount = @NewCount, NewAndUpdatedCount = @NewAndUpdatedCount, Internet = @Internet
		WHERE iHandbookId = @HandbookId;
	FETCH NEXT FROM curHandbookId INTO @HandbookId
	END
		CLOSE curHandbookId
		DEALLOCATE curHandbookId
	SELECT strName AS FolderName, iLevelType AS LevelType, Approved, 
	Expired, NewAndUpdatedCount, NewCount , Revised ,AwaitingApproval, 
	Archived, Internet , Folders 
	FROM @resultTable
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportFolderDocumentStatistics]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportFolderDocumentStatistics]
	@HandbookId AS INT,
	@SecurityId AS INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @resultTable TABLE(period DATETIME, Approved INT)
	DECLARE @DateFrom DATETIME 
	SET @DateFrom = (SELECT dtmCreated FROM m136_tblHandbook WHERE iHandbookID = @HandbookId) 
	SET @DateFrom = (SELECT DATEADD(dd, DATEDIFF(dd, 0, @DateFrom), 0))
	SET @DateFrom = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, @DateFrom), 0))
	DECLARE @monthintervall INT
	set @monthintervall = (SELECT DATEDIFF(MONTH, @DateFrom,GETDATE()))
	DECLARE @I INT
	SET @I = 0
	WHILE @I <= @monthintervall
	BEGIN
		INSERT INTO @resultTable(period)
		VALUES(@DateFrom)
		SET @DateFrom = DATEADD(MONTH,1,@DateFrom)
		SET @I = @I + 1
	END
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @AvailableChildren(iHandbookId)
	SELECT 
		iHandbookId 
	FROM 
		[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
	UPDATE rt SET rt.Approved = 
			(SELECT Count(DISTINCT iDocumentId) AS Approved  
			  FROM m136_tblDocument d 
			  JOIN @AvailableChildren ac ON d.iHandbookId = ac.iHandbookId 
			  WHERE d.iApproved = 1 AND d.dtmPublish < rt.period) 
			  FROM @resultTable rt
	SELECT period AS Date, Approved
	FROM @resultTable
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnIsDocumentValid]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- User Defined Function

create function [dbo].[m136_fnIsDocumentValid](@status int) 
returns int
as
begin
	declare @r int
	set @r = 0
	if (@status & 48) = 48 and (@status & 128) = 0
	begin
		set @r = 1
	end
	return @r
end
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnIsDocumentInvalidAndUnderRevision]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- User Defined Function

CREATE function [dbo].[m136_fnIsDocumentInvalidAndUnderRevision](@status int, @draft int, @approved int, @documentId int, @version int) 
returns int
as
begin
	declare @r int
	set @r = 0
--	if ((@status & 32) = 32  or (@status & 2) = 2) and (@status & 16) = 0 and (@status & 128) = 0 
--		and @draft = 0 and exists(select iEntityId from m136_tblDocument where iDocumentId = @documentId and iVersion > @version)
	if ((@status & 32) = 32  or (@status & 2) = 2) and (@status & 16) = 0 and (@status & 128) = 0 
		and (@status & 8) = 8
	begin
		set @r = 1
	end
	return @r
end
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnIsDocumentInvalid]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[m136_fnIsDocumentInvalid](@status int, @draft int, @approved int, @documentId int, @version int) 
returns int
as
begin
	declare @r int
	set @r = 0
	if ((@status & 32) = 32 or (@status & 2) = 2) and (@status & 16) = 0 and (@status & 128) = 0
		and (@status & 8) = 0 

	begin
		set @r = 1
	end
	return @r
end
GO
/****** Object:  UserDefinedTableType [dbo].[ReadingListDocumentItems]    Script Date: 10/20/2016 11:39:16 ******/
CREATE TYPE [dbo].[ReadingListDocumentItems] AS TABLE(
	[ReadingListId] [int] NULL,
	[DocumentId] [int] NULL
)
GO
/****** Object:  Table [dbo].[m151_DeviationResponsible]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationResponsible](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeId] [int] NULL,
	[DeviationId] [uniqueidentifier] NULL,
	[EscalateLevel] [int] NULL,
 CONSTRAINT [PK_m151_DeviationResponsible] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationLinks]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationLinks](
	[Id] [uniqueidentifier] NOT NULL,
	[Link] [nvarchar](500) NULL,
	[DisplayName] [nvarchar](500) NULL,
	[DeviationTypeId] [uniqueidentifier] NULL,
	[DeviationCategoryId] [uniqueidentifier] NULL,
	[DeviationCategoryTypeId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_m151_DeviationLinks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationHistoryEvents]    Script Date: 10/20/2016 11:39:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationHistoryEvents](
	[HistoryEventId] [int] NOT NULL,
	[HistoryEvent] [nvarchar](150) NOT NULL,
 CONSTRAINT [PK_m151_DeviationHistoryEvents] PRIMARY KEY CLUSTERED 
(
	[HistoryEventId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationHistory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationHistory](
	[Id] [uniqueidentifier] NOT NULL,
	[DeviationId] [uniqueidentifier] NULL,
	[LogDate] [datetime] NULL,
	[UserId] [int] NULL,
	[FullName] [nvarchar](250) NULL,
	[UserName] [nvarchar](50) NULL,
	[FileId] [uniqueidentifier] NULL,
	[HistoryEventId] [int] NULL,
	[StatusId] [int] NULL,
	[PriorityId] [int] NULL,
	[DeviationActionId] [uniqueidentifier] NULL,
	[DeviationTaskId] [uniqueidentifier] NULL,
	[HistoryEventInput] [nvarchar](max) NULL,
 CONSTRAINT [PK_m151_DeviationHistory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationFiles]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m151_DeviationFiles](
	[FileId] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[ContentType] [nvarchar](50) NULL,
	[Content] [varbinary](max) NULL,
	[DeviationId] [uniqueidentifier] NULL,
	[ContentSize] [int] NULL,
	[FileExtension] [nvarchar](50) NULL,
	[Date] [datetime] NULL,
	[Filename] [nvarchar](200) NULL,
 CONSTRAINT [PK_m151_DeviationFiles] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m151_DeviationCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationCategory](
	[Id] [uniqueidentifier] NOT NULL,
	[DeviationCategoryName] [nvarchar](150) NULL,
	[DeviationCategoryDescription] [text] NULL,
	[CategoryId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_m151_DeviationCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationActionStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationActionStatus](
	[StatusId] [int] NOT NULL,
	[StatusName] [nvarchar](100) NOT NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_DeviationActionStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationActionResult]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationActionResult](
	[ResultId] [int] NOT NULL,
	[ResultName] [nvarchar](100) NOT NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_DeviationActionResult] PRIMARY KEY CLUSTERED 
(
	[ResultId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationActionEvaluationPeriod]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationActionEvaluationPeriod](
	[EvaluationPeriodValue] [int] NOT NULL,
	[EvaluationPeriodText] [nvarchar](100) NOT NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_DeviationActionEvaluationPeriod] PRIMARY KEY CLUSTERED 
(
	[EvaluationPeriodValue] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationAction]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationAction](
	[DeviationActionId] [uniqueidentifier] NOT NULL,
	[DeviationActionTypeId] [int] NOT NULL,
	[DeviationId] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](500) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ResponsibleId] [int] NULL,
	[ResponsibleName] [nvarchar](250) NOT NULL,
	[ResponsibleEmail] [nvarchar](500) NOT NULL,
	[ExecutionDeadline] [datetime] NOT NULL,
	[DeviationActionStatusId] [int] NOT NULL,
	[EvaluationPeriod] [int] NOT NULL,
	[DeviationActionResultId] [int] NOT NULL,
	[RegistrationDate] [datetime] NULL,
	[ClosedDate] [datetime] NULL,
 CONSTRAINT [PK_m151_DeviationAction] PRIMARY KEY CLUSTERED 
(
	[DeviationActionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_Deviation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Deviation](
	[Id] [uniqueidentifier] NOT NULL,
	[DeviationId] [int] IDENTITY(1,1) NOT NULL,
	[CopyOf] [uniqueidentifier] NULL,
	[CopyOfId] [int] NULL,
	[Title] [nvarchar](500) NULL,
	[Description] [nvarchar](max) NULL,
	[ImmediateAction] [nvarchar](max) NULL,
	[RegisteredById] [int] NULL,
	[RegisteredByUserName] [nvarchar](50) NULL,
	[RegisteredByFirstName] [nvarchar](50) NULL,
	[RegisteredByLastName] [nvarchar](50) NULL,
	[RegisteredForId] [int] NULL,
	[RegisteredForUserName] [nvarchar](50) NULL,
	[RegisteredForFirstName] [nvarchar](250) NULL,
	[RegisteredForLastName] [nvarchar](50) NULL,
	[StatusId] [int] NULL,
	[DepartmentId] [int] NULL,
	[PriorityId] [int] NULL,
	[RegisteredDate] [datetime] NULL,
	[EstimatedSolvedDate] [datetime] NULL,
	[DeviationTypeId] [uniqueidentifier] NULL,
	[AreaId] [uniqueidentifier] NULL,
	[CategoryId] [uniqueidentifier] NULL,
	[DeviationCategoryId] [uniqueidentifier] NULL,
	[Cost] [float] NULL,
	[Escalated] [bit] NULL,
	[NotificationSent] [int] NULL,
	[RiscPersonellId] [uniqueidentifier] NULL,
	[RiscMaterialId] [uniqueidentifier] NULL,
	[RiscEnvironmentId] [uniqueidentifier] NULL,
	[ConsPersonellId] [uniqueidentifier] NULL,
	[ConsMaterialId] [uniqueidentifier] NULL,
	[ConsEnvironmentId] [uniqueidentifier] NULL,
	[Comment] [nvarchar](max) NULL,
	[Conclusion] [nvarchar](max) NULL,
	[RegisteredByName] [nvarchar](250) NULL,
	[RegisteredForName] [nvarchar](250) NULL,
	[IsSensitive] [bit] NULL,
 CONSTRAINT [PK_m151_Deviation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_CommonUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m151_CommonUser](
	[iEmployeeId] [int] NOT NULL,
	[stLoginName] [varchar](100) NULL,
 CONSTRAINT [PK_m151_CommonUser] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m151_Category]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Category](
	[Id] [uniqueidentifier] NOT NULL,
	[CategoryName] [nvarchar](150) NULL,
	[CategoryDescription] [text] NULL,
	[AreaId] [uniqueidentifier] NULL,
	[CatActive] [bit] NULL,
 CONSTRAINT [PK_m151_Category] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_Area]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Area](
	[Id] [uniqueidentifier] NOT NULL,
	[AutoId] [int] IDENTITY(1,1) NOT NULL,
	[AreaName] [nvarchar](150) NULL,
	[AreaDescription] [text] NULL,
	[SortOrder] [int] NULL,
 CONSTRAINT [PK_m151_Area] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m147_tblSynonym]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblSynonym](
	[iSynonymId] [int] NOT NULL,
	[iRegisterItemValueId] [int] NOT NULL,
	[strSynonym] [varchar](50) NOT NULL,
 CONSTRAINT [PK_m147_tblSynonym] PRIMARY KEY CLUSTERED 
(
	[iSynonymId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedTableType [Risk].[AnalysisDangerEvaluationTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Risk].[AnalysisDangerEvaluationTable] AS TABLE(
	[Id] [int] NOT NULL,
	[AnalysisDangerId] [int] NOT NULL,
	[AnalysisDangerAcceptanceCriteriasId] [int] NOT NULL,
	[ConsequenceId] [int] NOT NULL,
	[ReevaluatedConsequenceId] [int] NOT NULL,
	[Description] [nvarchar](1000) NULL,
	[Grounds] [nvarchar](250) NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[HandbookSortOrder]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[HandbookSortOrder] AS TABLE(
	[iHandbookId] [int] NOT NULL,
	[iSort] [int] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [Calendar].[ActivityDocumentItems]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Calendar].[ActivityDocumentItems] AS TABLE(
	[ActivityId] [int] NULL,
	[DocumentId] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [Calendar].[ActivityAccessItems]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Calendar].[ActivityAccessItems] AS TABLE(
	[ActivityId] [int] NULL,
	[AccessTypeId] [int] NULL,
	[AccessId] [int] NULL
)
GO
/****** Object:  StoredProcedure [dbo].[m136_ListChapters]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	List Chapters 
-- =============================================
CREATE PROCEDURE [dbo].[m136_ListChapters] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iParentId int = 0,
	@iAccess int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
		h.iHandbookId iId, 
		h.strName, 
		h.strDescription, 
		h.iLevel, 
		(SELECT COUNT(*) FROM m136_tblHandbook WHERE iDeleted = 0 AND iParentHandbookId = h.iHandbookId) iChildCount, 
		dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup, 
		dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) iAccessDocument,
		(select count(*) from m136_tblDocument where iHandbookId = h.iHandbookId and iDeleted = 0) iHasDocuments, 
		(select count(*) from m136_relVirtualRelation where iHandbookId = h.iHandbookId) iHasVDocuments,
		h.iLevelType, 
		h.iDepartmentId
	FROM m136_tblHandbook h 
	WHERE 
		h.iDeleted = 0 
		AND 
		(
			(@iParentId > 0 AND h.iParentHandbookId = @iParentId) 
			OR 
			(@iParentId = 0 AND h.iParentHandbookId IS NULL)
		)
		AND 
		(
			(@iAccess = 0)
			OR
			(@iAccess > 0 AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) & @iAccess) > 0) 
		)		
		
	ORDER BY h.iMin ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetOwnersWithExpiresDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetOwnersWithExpiresDocuments]
	@iExpiresWithin int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iCreatedById iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strFullName,
	emp.strEmail
from
	m136_tblDocument doc
	left outer join tblEmployee emp on doc.iCreatedById=emp.iEmployeeId
where
	doc.iLatestApproved = 1
	and doc.iApproved=1
	and doc.iDeleted=0
	and doc.dtmPublishUntil = dateadd(d, @iExpiresWithin, convert(date, getdate()))
order by iEmployeeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetOwnersAndApproversWithExpiredDocumentsToday]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetOwnersAndApproversWithExpiredDocumentsToday]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iCreatedById iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strFullName,
	emp.strEmail
from
	m136_tblDocument doc
	left outer join tblEmployee emp on doc.iCreatedById=emp.iEmployeeId
where
	doc.iLatestApproved = 1
	and doc.iApproved=1
	and doc.iDeleted=0
	and doc.dtmPublishUntil = convert(date, getdate())
union
select
	distinct doc.iApprovedById iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strFullName,
	emp.strEmail
from
	m136_tblDocument doc
	left outer join tblEmployee emp on doc.iApprovedById=emp.iEmployeeId
where
	doc.iLatestApproved = 1
	and doc.iApproved=1
	and doc.iDeleted=0
	and doc.dtmPublishUntil = convert(date, getdate())
	

order by iEmployeeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMyDepartmentChapters]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Subscriber Chapters For Frontpage 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetMyDepartmentChapters] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1 
   
   
	declare @tmp table(iHandbookId int not null PRIMARY KEY, iMin int, iMax int)
	declare @exclude table(iHandbookId int not null PRIMARY KEY)

	insert into @tmp(iHandbookId, iMin, iMax)
	select iHandbookId, iMin, iMax from m136_tblHandbook where ilevelType = 2 and iDepartmentId in (SELECT iDepartmentId FROM tblEmployee WHERE iEmployeeId =@iSecurityId)

	declare @iHandbookId int
	declare @iMin int
	declare @iMax int

	declare cur cursor fast_forward for
		select iHandbookId, iMin, iMax from @tmp order by iMin
	open cur
	fetch next from cur into @iHandbookId, @iMin, @iMax
	while @@fetch_status=0
	begin
		if exists(select * from @tmp where iMin > @iMin and iMax < @iMax)
		begin
			insert into @exclude(iHandbookId) select iHandbookId from @tmp where iMin > @iMin and iMax < @iMax
		end
	fetch next from cur into @iHandbookId, @iMin, @iMax
	end
	close cur
	deallocate cur

	SELECT h.iHandbookId, h.strName, h.iLevelType, h.iDepartmentId,
				dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup, (
                    (SELECT COUNT(d.iDocumentId) 
                            from m136_tblDocument d where
							d.iHandbookId = h.iHandbookId
							and d.iLatestApproved = 1
							AND d.iApproved=1
							AND h.iHandbookId in (select iHandbookId from @HandbookPermissions) )
                    + (SELECT COUNT(d.iDocumentId) 
                            from m136_tblDocument d
							inner join m136_relVirtualRelation v
							on v.iHandbookId = h.iHandbookId
							and d.iDocumentId = v.iDocumentId
							and d.iLatestApproved = 1
							and iApproved=1
							AND h.iHandbookId in (select iHandbookId from @HandbookPermissions)
                        ) +
                (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 AND 
				(dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId) & 0x11) > 0 ))  as iChildCount
				 FROM m136_tblHandbook h WHERE h.iDeleted = 0 AND 
				(dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) & 0x11) > 0
				and h.iHandbookId in (select iHandbookId from @tmp where iHandbookId not in (select iHandbookId from @exclude))
END
GO
/****** Object:  UserDefinedTableType [Deviation].[NotificationTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Deviation].[NotificationTable] AS TABLE(
	[UserId] [int] NULL,
	[Subject] [nvarchar](500) NULL,
	[Content] [nvarchar](max) NULL,
	[NotificateDate] [datetime] NULL
)
GO
/****** Object:  Table [Deviation].[Notification]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Notification](
	[NotificationId] [bigint] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[UserId] [int] NOT NULL,
	[Subject] [nvarchar](500) NULL,
	[Content] [nvarchar](max) NULL,
	[NotificateDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[IsRead] [bit] NULL,
 CONSTRAINT [PK_Deviation_Notification] PRIMARY KEY CLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m123_relSubscriberCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m123_relSubscriberCategory](
	[iCategoryId] [int] NOT NULL,
	[iSubscriberId] [int] NOT NULL,
	[iSubscriberTypeId] [int] NOT NULL,
	[dtmLastVisited] [datetime] NULL,
	[iSubscribe] [int] NULL,
	[iSort] [int] NULL,
 CONSTRAINT [PK__m123_rel__A5E1353D4A4E069C] PRIMARY KEY CLUSTERED 
(
	[iCategoryId] ASC,
	[iSubscriberId] ASC,
	[iSubscriberTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m123_relInfoCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m123_relInfoCategory](
	[iInfoId] [int] NOT NULL,
	[iCategoryId] [int] NOT NULL,
	[iSentByEmail] [int] NULL,
	[iApproved] [int] NULL,
	[iApprovedById] [int] NULL,
	[dtmApproved] [datetime] NULL,
	[iSort] [int] NULL,
	[iFeedbackStatus] [int] NULL,
	[dtmOnFrontpage] [datetime] NULL,
 CONSTRAINT [PK__m123_rel__F9E8057141B8C09B] PRIMARY KEY CLUSTERED 
(
	[iInfoId] ASC,
	[iCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m123_relInfo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_relInfo](
	[iInfoId] [int] NOT NULL,
	[iEntityId] [int] NOT NULL,
	[iScaleDirId] [int] NULL,
	[iPlacementId] [int] NULL,
	[iVJustifyId] [int] NULL,
	[iHJustifyId] [int] NULL,
	[iSize] [int] NULL,
	[strCaption] [varchar](500) NULL,
	[iSort] [int] NULL,
	[strURL] [varchar](100) NULL,
	[iRelationTypeId] [int] NOT NULL,
	[iWidth] [int] NULL,
	[iHeight] [int] NULL,
	[iCategoryId] [int] NOT NULL,
	[iNewWindow] [int] NULL,
 CONSTRAINT [PK__m123_rel__07C4F74A32767D0B] PRIMARY KEY CLUSTERED 
(
	[iInfoId] ASC,
	[iEntityId] ASC,
	[iRelationTypeId] ASC,
	[iCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_relCategoryModerator]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m123_relCategoryModerator](
	[iCategoryId] [int] NOT NULL,
	[iModeratorId] [int] NOT NULL,
 CONSTRAINT [PK__m123_rel__46143F2E2EA5EC27] PRIMARY KEY CLUSTERED 
(
	[iCategoryId] ASC,
	[iModeratorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [Deviation].[IdsTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Deviation].[IdsTable] AS TABLE(
	[Id] [int] NULL
)
GO
/****** Object:  Table [dbo].[m123_tblBrokenLinksCheck]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m123_tblBrokenLinksCheck](
	[iCheck] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[tid] [datetime] NOT NULL,
 CONSTRAINT [PK__m123_tbl__F9DCCA59220B0B18] PRIMARY KEY CLUSTERED 
(
	[iCheck] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [Calendar].[ActivityTaskItems]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Calendar].[ActivityTaskItems] AS TABLE(
	[ActivityId] [int] NULL,
	[Name] [nvarchar](250) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedBy] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [int] NULL,
	[IsCompleted] [bit] NULL
)
GO
/****** Object:  StoredProcedure [dbo].[m123_spGetLatestSubscribedItems]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_spGetLatestSubscribedItems]
	@sOther varchar(8000),
	@iSubscribe int,
	@iSecurityId int,
	@iCount int,
	@iCategoryType int
AS
DECLARE
	@strTmpTableName varchar(100),
	@strTmp varchar(2000),
	@iTmp int,
	@iLastId int,
	@strResult nvarchar(1000),
	@ciId int,
	@ciCategoryId int,
	@cstrTopic varchar(80),
	@cstrTitle varchar(300),
	@cstrIngress varchar(800),
	@cstrBody varchar(6300),
	@cstrPictureURL varchar(200),
	@ciPictureId int,
	@cdtmPublish datetime,
	@ciFlag int,
	@ciStatus int,
	@ciHJustify int,
	@ciScaleDir int,
	@ciSize int, 
	@cstrCaption varchar(120),
	@cstrCategoryName varchar(100)
SET NOCOUNT ON

-- GENERATE TEMPORARY TABLE NAME
SET @strTmpTableName = '##' + HOST_NAME() + RTRIM(@@spid) + convert(varchar(30), getdate(),14) + ''
exec ('CREATE TABLE [' + @strTmpTableName + 'cat](iCategoryId int not null PRIMARY KEY)')
exec ('CREATE TABLE [' + @strTmpTableName + '](iId int, iCategoryId int, strTopic varchar(80), strTitle varchar(300), strIngress varchar(800), dtmPublish datetime, iFlag int, iStatus int, strBody varchar(6300), strCategoryName varchar(100), strPictureURL varchar(200), iPictureId int, iHJustify int, iScaleDir int, iSize int, strCaption varchar(120))')
-- 4 - 4- 80- 300 - 800- 8- 4 - 4 - 6300 - 100 - 200 - 4 - 4 - 4 - 4 - 120 = 7940
-- GET VALID CATEGORIES
set @strResult = 'insert into [' + @strTmpTableName + 'cat](iCategoryId)
select c.iCategoryId
from m123_tblCategory c
join m123_relSubscriberCategory sc
on c.iCategoryId = sc.iCategoryId and sc.iSubscriberTypeId = 2 and (sc.iSubscribe & @iSubscribe) > 0 and sc.iSubscriberId = @iSecurityId
and (iPublishLocation & 0x01) > 0 and (iSubscribeLocation & 0x01) > 0 and iCategoryTypeId = @iCategoryType and
(dbo.fnSecurityGetPermission(123, 331, @iSecurityId, c.iCategoryId) & 0x01) > 0  
union
select iCategoryId from m123_tblCategory where iCategoryTypeId = @iCategoryType and iCategoryId in (' + @sOther + ') and
(dbo.fnSecurityGetPermission(123, 331, @iSecurityId, iCategoryId) & 0x01) > 0'

EXEC sp_executesql @strResult, N'@iSecurityId int, @iSubscribe int, @iCategoryType int', @iSecurityId = @iSecurityId, @iSubscribe = @iSubscribe, @iCategoryType = @iCategoryType


-- GET LATEST NEWS
SET @strResult = '
DECLARE curResult
CURSOR FAST_FORWARD READ_ONLY FOR
SELECT TOP ' + cast(@iCount * 4 as varchar(10)) + ' n.iInfoId iId, r.iCategoryId, n.strTopic, n.strTitle, n.strIngress, n.dtmPublish, n.iFlag, n.iStatus, n.strBody, c.strName, dbo.fnArchiveGetImageURL(' + cast(@iSecurityId as varchar(16)) + ', p.iEntityId, '''') strPictureURL, p.iEntityId iPictureId, p.iHJustifyId, p.iScaleDirId, p.iSize, p.strCaption
FROM m123_tblInfo n JOIN m123_relInfoCategory r ON n.iInfoId = r.iInfoId AND r.iCategoryId IN (SELECT iCategoryId FROM [' + @strTmpTableName + 'cat])
INNER JOIN m123_tblCategory c ON r.iCategoryId = c.iCategoryId 
LEFT OUTER JOIN m123_relInfo p ON r.iInfoId = p.iInfoId AND p.iPlacementId = 4 AND p.iEntityId = (SELECT TOP 1 iEntityId FROM m123_relInfo WHERE iInfoId = n.iInfoId AND iPlacementId = 4)
WHERE ((c.iModerated = 0) OR (c.iModerated = 1 AND r.iApproved = 1)) and n.dtmPublish <= getDate() and (n.dtmExpire >= getDate() or n.dtmExpire is null) and n.iDraft = 0 
ORDER BY n.dtmPublish DESC, n.iInfoId'

--select @strResult
exec(@strResult)
OPEN curResult

FETCH NEXT FROM curResult
INTO @ciId, @ciCategoryId, @cstrTopic, @cstrTitle, @cstrIngress, @cdtmPublish, @ciFlag, @ciStatus, @cstrBody, @cstrCategoryName, @cstrPictureURL, @ciPictureId, @ciHJustify, @ciScaleDir, @ciSize, @cstrCaption
SET @iTmp = 0
SET @iLastId = 0
WHILE (@@FETCH_STATUS = 0 AND @iTmp < @iCount)
BEGIN
	if @iLastId <> @ciId
	begin
		set @strResult = 'insert into [' + @strTmpTableName + '](iId, iCategoryId, strTopic, strTitle, strIngress, dtmPublish, iFlag, iStatus, strBody, strCategoryName, strPictureURL, iPictureId, iHJustify, iScaleDir, iSize, strCaption)
			VALUES(@ciId, @ciCategoryId, @cstrTopic, @cstrTitle, @cstrIngress, @cdtmPublish, @ciFlag, @ciStatus, @cstrBody, @cstrCategoryName, @cstrPictureURL, @ciPictureId, @ciHJustify, @ciScaleDir, @ciSize, @cstrCaption)'

		EXEC sp_executesql @strResult, N'@ciId int, @ciCategoryId int, @cstrTopic varchar(80), @cstrTitle varchar(300), @cstrIngress varchar(800), @cdtmPublish datetime, @ciFlag int, @ciStatus int, @cstrBody varchar(6300), @cstrCategoryName varchar(100), @cstrPictureURL varchar(200), @ciPictureId int, @ciHJustify int, @ciScaleDir int, @ciSize int, @cstrCaption varchar(120)', @ciId = @ciId, @ciCategoryId = @ciCategoryId, @cstrTopic = @cstrTopic, @cstrTitle = @cstrTitle, @cstrIngress = @cstrIngress, @cdtmPublish = @cdtmPublish, @ciFlag = @ciFlag, @ciStatus = @ciStatus, @cstrBody = @cstrBody, @cstrCategoryName = @cstrCategoryName, @cstrPictureURL = @cstrPictureURL, @ciPictureId = @ciPictureId, @ciHJustify = @ciHJustify, @ciScaleDir = @ciScaleDir, @ciSize = @ciSize, @cstrCaption = @cstrCaption

		set @iTmp = @iTmp + 1
	end
	FETCH NEXT FROM curResult 
	INTO @ciId, @ciCategoryId, @cstrTopic, @cstrTitle, @cstrIngress, @cdtmPublish, @ciFlag, @ciStatus, @cstrBody, @cstrCategoryName, @cstrPictureURL, @ciPictureId, @ciHJustify, @ciScaleDir, @ciSize, @cstrCaption
END	


CLOSE curResult
DEALLOCATE curResult


-- GET RESULT SET
exec ('select * from [' + @strTmpTableName + '] order by dtmPublish desc')

-- DROP TEMP TABLES
exec ('drop table [' + @strTmpTableName + 'cat]')
exec ('drop table [' + @strTmpTableName + ']')
GO
/****** Object:  Table [dbo].[tblFileType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblFileType](
	[iFileTypeId] [int] NOT NULL,
	[strName] [varchar](40) NOT NULL,
	[strExtension] [varchar](10) NOT NULL,
	[strIconName] [varchar](30) NOT NULL,
 CONSTRAINT [PK__tblFileType_iFileTypeId] PRIMARY KEY CLUSTERED 
(
	[iFileTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE     proc [dbo].[m136_ListDocuments]
(
	@iSecurityId int = 0,
	@iMine int = 0,
	@iHandbookId int = 0,
	@iApprovalStatus int = 0,
	@strSearchText varchar(200) = '',
	@iCreatorId int = 0,
	@iDocTypeId int = 0,
	@iDays int = -1,
	@useFullText int = 0,
	@iApproverId int = 0,
	@dtmFrom datetime = null,
	@dtmTo datetime = null
)
as
BEGIN
-- This is a placeholder implementation of the schema object to facilitate deferred creation of the actual implementation.
raiserror(N'This is a placeholder implementation of the schema object to facilitate deferred creation of the actual implementation.',16,-1)
END
GO
/****** Object:  Table [dbo].[m136_luHearingResponses]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_luHearingResponses](
	[Id] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_m136_luHearingResponses] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[m136_getRegionleaderForDepartmentId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   FUNCTION [dbo].[m136_getRegionleaderForDepartmentId] (@iSecurityId int)
RETURNS int AS  
BEGIN 
declare @retval int
set @retVal = 0
set @retVal = (SELECT top 1
	iDepartmentId
FROM
	mvare_tblIPApotekuser 
WHERE
	regionsleder = @iSecurityId)
return isnull(@retVal, 0)
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_getRegionleaderDepartmentIds]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    FUNCTION [dbo].[m136_getRegionleaderDepartmentIds] (@iSecurityId int)
returns @retTable table(iCategoryId int null)
as
BEGIN 
	insert into @retTable
	SELECT iDepartmentId FROM mvare_tblIPApotekuser WHERE regionsleder = @iSecurityId
	return
END
GO
/****** Object:  Table [dbo].[m136_FormulaImages]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_FormulaImages](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ImageContent] [image] NOT NULL,
	[DocumentId] [int] NULL,
	[DocumentVersion] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblLoginHash]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblLoginHash](
	[sLoginHash] [varchar](32) NOT NULL,
	[sAltHash] [varchar](32) NOT NULL,
	[guidRandomKey] [uniqueidentifier] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtLastAccessed] [datetime] NULL,
 CONSTRAINT [PK__tblLogin__25B524736BE40491] PRIMARY KEY CLUSTERED 
(
	[sLoginHash] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedTableType [Risk].[AnalysisDangerAcceptanceCriteriasTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Risk].[AnalysisDangerAcceptanceCriteriasTable] AS TABLE(
	[Id] [int] NOT NULL,
	[AnalysisDangerId] [int] NOT NULL,
	[AnalysisAcceptanceCriteriaId] [int] NOT NULL
)
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Subscriber Chapters For Frontpage 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetChapterDocuments] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iHandbookId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select 0 iVirtual, d.iDocumentId, d.iVersion, d.strName, d.strDescription, 0 iAccess,
							d.iSort, d.UrlOrFileName, d.UrlOrFileProperties, ISNULL(dt.Type, 0) as [Type], d.iEntityId
							from m136_tblDocument d 
                            join m136_tblDocumentType dt on d.iDocumentTypeId = dt.iDocumentTypeId
                            where
							d.iHandbookId = @iHandbookId
							and d.iDeleted = 0
							and d.iVersion = (select max(iVersion) from m136_tblDocument where 
								iDocumentId = d.iDocumentId
								and iDeleted = 0 
								and iApproved in (1,4)
								AND dtmPublish <= getDate() and iDraft = 0)
							AND d.iApproved=1
							AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId)&1)=1
							union
							select 1 iVirtual, d.iDocumentId, d.iVersion, d.strName, d.strDescription,
							dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) iAccess,
							v.iSort, d.UrlOrFileName, d.UrlOrFileProperties, ISNULL(dt.Type, 0) as [Type], d.iEntityId
							from m136_tblDocument d
                            join m136_tblDocumentType dt on d.iDocumentTypeId = dt.iDocumentTypeId
							inner join m136_relVirtualRelation v
							on v.iHandbookId = @iHandbookId
							and d.iDocumentId = v.iDocumentId
							and d.iVersion = (select max(iVersion) from m136_tblDocument where
								iDocumentId = d.iDocumentId 
								and iDeleted = 0
								and iApproved in (1,4)
								AND dtmPublish <= getDate()
								and iDraft = 0)
							and iApproved=1
							AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId)&1)=1
							order by iSort ASC, d.strName ASC
END
GO
/****** Object:  Table [dbo].[tblPosition]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPosition](
	[iPositionId] [int] NOT NULL,
	[strName] [varchar](50) NULL,
	[iWeight] [int] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK__tblPosition_iPositionId] PRIMARY KEY CLUSTERED 
(
	[iPositionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetEmployeePostions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 27, 2015
-- Description:	Get employee positions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetEmployeePostions]
	@iEmployeeId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT tp.* FROM dbo.tblPosition tp
		INNER JOIN dbo.relEmployeePosition rep ON rep.iPositionId = tp.iPositionId
		WHERE rep.iEmployeeId = @iEmployeeId;
END
GO
/****** Object:  Table [dbo].[tblPermissionSetType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblPermissionSetType](
	[iPermissionSetTypeId] [int] NOT NULL,
	[strName] [nvarchar](80) NOT NULL,
	[strDescription] [nvarchar](400) NOT NULL,
 CONSTRAINT [PK__tblPermissionSetType_iPermissionSetTypeId] PRIMARY KEY CLUSTERED 
(
	[iPermissionSetTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[Cost]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Cost](
	[CostId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[Nr] [nvarchar](20) NOT NULL,
	[Description] [nvarchar](200) NULL,
	[Pieces] [decimal](18, 0) NULL,
	[Price] [money] NULL,
	[Profit] [decimal](18, 0) NULL,
	[CostType] [int] NULL,
	[ObjectId] [int] NULL,
 CONSTRAINT [PK_Deviation_Cost] PRIMARY KEY CLUSTERED 
(
	[CostId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_relSentEmpApproval]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_relSentEmpApproval](
	[iEntityId] [int] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtmSentToApproval] [datetime] NOT NULL,
 CONSTRAINT [PK_m136_relSentEmpApproval] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC,
	[iEmployeeId] ASC,
	[dtmSentToApproval] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[m136_vSentForApproval]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[m136_vSentForApproval]
as
select r.iEntityId, r.dtmSentToApproval, s2.iEmployeeId, e.strFirstName + ' ' + e.strLastName as strSentToBeApprovedBy from (
SELECT s1. iEntityId, max(s1.dtmSentToApproval) as dtmSentToApproval
FROM         dbo.m136_relSentEmpApproval s1
group by s1.iEntityId
) r
join dbo.m136_relSentEmpApproval s2 on (s2.iEntityId = r.iEntityId and s2.dtmSentToApproval = r.dtmSentToApproval)
join tblEmployee e on s2.iEmployeeId = e.iEmployeeId
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocumentsForEmployeeApprovalFilterOnSentTo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[m136_ListDocumentsForEmployeeApprovalFilterOnSentTo] 
	@iSecurityId int
AS
BEGIN
	SET NOCOUNT ON;

	declare @tmp table(iDocumentId int, strName nvarchar(250), iEntityId int, iVersion int, iDraft int,
		iDeleted int, iDocumentTypeId int, iHandbookId int, iCreatedById int, dtmCreated datetime, 
		strAuthor nvarchar(250), iAlterId int, dtmAlter datetime, strAlterer nvarchar(250), iApprovedById int,
		dtmApproved datetime, strApprovedBy nvarchar(250), dtmPublish datetime, dtmPublishUntil datetime, 
		iApproved int, iSort int, ParentName nvarchar(250), strDocumentTypeName nvarchar(250), SentToUser nvarchar(250),
		iSentToThisUser int)

	declare @userFullName varchar(100);
	select @userFullName=strFirstName +' '+ strLastName from tblEmployee where iEmployeeId=@iSecurityId
	
	/* The select statement here should be "exec m136_ListDocumentsForEmployeeApproval @iSecurityId" but this is 
	   not supported in Sql Server 2000, so we have to do it the hardway. Remember if you change the logic in 
	   m136_ListDocumentsForEmployeeApproval, you must do the changes in the procedure as well */
	insert into @tmp(iDocumentId, strName, iEntityId, iVersion, iDraft, iDeleted, iDocumentTypeId, iHandbookId, 
		iCreatedById, dtmCreated, strAuthor, iAlterId, dtmAlter, strAlterer, iApprovedById,	dtmApproved, 
		strApprovedBy, dtmPublish, dtmPublishUntil, iApproved, iSort, ParentName, strDocumentTypeName, SentToUser,
			iSentToThisUser)
	Select 
	doc.iDocumentId
	,doc.strName
	,doc.iEntityId
	,doc.iVersion
	,doc.iDraft
	,doc.iDeleted
	,doc.iDocumentTypeId
	,doc.iHandbookId
	,doc.iCreatedById
	,doc.dtmCreated
	,doc.strAuthor
	,doc.iAlterId
	,doc.dtmAlter
	,doc.strAlterer
	,doc.iApprovedById
	,doc.dtmApproved
	,doc.strApprovedBy
	,doc.dtmPublish
	,doc.dtmPublishUntil
	,doc.iApproved
	,doc.iSort
	,book.strName Parentname
	,docType.strName strDocumentTypeName
	,case
		when isnull(sentApp.iEmployeeId, 0)=@iSecurityId then @userFullName else 'Redaktører' end SentToUser
	,case
		when isnull(sentApp.iEmployeeId, 0)=@iSecurityId then sentApp.iEmployeeId else 0 end iSentToThisUser
from
	m136_tblDocument doc
		left join m136_tblHandbook book on doc.iHandbookId = book.iHandbookId
		left join m136_tblDocumentType docType on doc.iDocumentTypeId = docType.iDocumentTypeID
	left join m136_relSentEmpApproval sentApp on sentApp.iEntityId=doc.iEntityId
where
	doc.iDeleted = 0
	and (isnull(sentApp.iEmployeeId, 0) in (@iSecurityId,0))
	and doc.iDraft = 0
	and doc.iApproved = 0
	--Sikkerhet:
	and (
		-- Read and approve
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, doc.iHandbookId) & 17) = 17
	)
	and
	(
		(doc.iVersion = 
			(select max(iVersion) from m136_tblDocument kk where 
			kk.iDocumentId = doc.iDocumentId
			)
		)
	)




	
	select distinct iDocumentId, strName, iEntityId, iVersion, iDraft, iDeleted, iDocumentTypeId, iHandbookId, 
		iCreatedById, dtmCreated, strAuthor, iAlterId, dtmAlter, strAlterer, iApprovedById,	dtmApproved, 
		strApprovedBy, dtmPublish, dtmPublishUntil, iApproved, iSort, ParentName, strDocumentTypeName, SentToUser,
			iSentToThisUser from (
	select * from @tmp where iEntityId not in (select iEntityId from m136_relSentEmpApproval)
	union
	select t.* from @tmp t join m136_relSentEmpApproval r on (t.iEntityId = r.iEntityId and r.iEmployeeId = @iSecurityId)
	) result order by dtmAlter, dtmPublish

END
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocumentsForEmployeeApproval]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_ListDocumentsForEmployeeApproval] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
declare @userFullName varchar(100);
select @userFullName=strFirstName +' '+ strLastName from tblEmployee where iEmployeeId=@iSecurityId

Select 
	doc.iDocumentId
	,doc.strName
	,doc.iEntityId
	,doc.iVersion
	,doc.iDraft
	,doc.iDeleted
	,doc.iDocumentTypeId
	,doc.iHandbookId
	,doc.iCreatedById
	,doc.dtmCreated
	,doc.strAuthor
	,doc.iAlterId
	,doc.dtmAlter
	,doc.strAlterer
	,doc.iApprovedById
	,doc.dtmApproved
	,doc.strApprovedBy
	,doc.dtmPublish
	,doc.dtmPublishUntil
	,doc.iApproved
	,doc.iSort
	,book.strName Parentname
	,docType.strName strDocumentTypeName
	,case
		when isnull(sentApp.iEmployeeId, 0)=@iSecurityId then @userFullName else 'Godkjennere' end SentToUser
	,case
		when isnull(sentApp.iEmployeeId, 0)=@iSecurityId then sentApp.iEmployeeId else 0 end iSentToThisUser
from
	m136_tblDocument doc
		left join m136_tblHandbook book on doc.iHandbookId = book.iHandbookId
		left join m136_tblDocumentType docType on doc.iDocumentTypeId = docType.iDocumentTypeID
	left join m136_relSentEmpApproval sentApp on sentApp.iEntityId=doc.iEntityId
where
	doc.iDeleted = 0
	and (isnull(sentApp.iEmployeeId, 0) in (@iSecurityId,0))
	and doc.iDraft = 0
	and doc.iApproved = 0
	--Sikkerhet:
	and (
		-- Read and approve
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, doc.iHandbookId) & 17) = 17
	)
	and
	(
		(doc.iVersion = 
			(select max(iVersion) from m136_tblDocument kk where 
			kk.iDocumentId = doc.iDocumentId
			)
		)
	)
END
GO
/****** Object:  Table [dbo].[m136_relKeywords]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_relKeywords](
	[iDocumentId] [int] NOT NULL,
	[iKeyWordId] [int] NOT NULL,
 CONSTRAINT [pk_relKeywords] PRIMARY KEY CLUSTERED 
(
	[iDocumentId] ASC,
	[iKeyWordId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[BaseAction]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[BaseAction](
	[BaseActionId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[DeviationId] [int] NOT NULL,
	[DueDate] [datetime] NULL,
	[ResponsiblePersonId] [int] NULL,
	[State] [int] NOT NULL,
	[ActionType] [int] NOT NULL,
	[StartDate] [datetime] NULL,
	[Whatdone] [nvarchar](max) NULL,
	[FollowUpDate] [datetime] NULL,
	[Cost] [decimal](18, 0) NULL,
	[Item] [int] NULL,
	[CostType] [int] NULL,
	[SequenceId] [nvarchar](25) NULL,
	[RegisteredDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[UpdatedDate] [datetime] NULL,
 CONSTRAINT [PK_Deviation_BaseAction] PRIMARY KEY CLUSTERED 
(
	[BaseActionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Risk].[luConsequences]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luConsequences](
	[Id] [tinyint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_Risk_luConsequences_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Log]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Log](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Date] [datetime] NOT NULL,
	[Thread] [nvarchar](max) NOT NULL,
	[Level] [nvarchar](max) NOT NULL,
	[Logger] [nvarchar](max) NOT NULL,
	[Message] [nvarchar](max) NOT NULL,
	[CustomerReferenceId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Log] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[DocumentTypeInfoTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[DocumentTypeInfoTable] AS TABLE(
	[iEntityId] [int] NOT NULL,
	[iDocumentTypeId] [int] NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iSort] [int] NOT NULL,
	[iDeleted] [int] NOT NULL,
	[iShowOnPDA] [int] NOT NULL,
	[iMandatory] [int] NOT NULL,
	[iMaximized] [int] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[Documents]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[Documents] AS TABLE(
	[iHandbookId] [int] NOT NULL,
	[iDocumentId] [int] NOT NULL,
	[iSort] [int] NULL,
	[iVirtual] [int] NULL
)
GO
/****** Object:  Table [Deviation].[DeviationLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[DeviationLog](
	[DeviationLogId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[LogDate] [datetime] NULL,
	[LogByPersonId] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[ActionType] [int] NULL,
	[Editable] [bit] NULL,
 CONSTRAINT [PK_Deviation_Log] PRIMARY KEY CLUSTERED 
(
	[DeviationLogId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationLogs]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationLogs]
	@DeviationId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  dl.DeviationLogId, 
		dl.DeviationId, 
		dl.LogDate, 
		dl.LogByPersonId, 
		(te.strFirstName + ' ' + te.strLastName) AS LogByPerson,
		dl.[Description], 
		dl.ActionType,
		dl.Editable
	FROM Deviation.DeviationLog dl 
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = dl.LogByPersonId
	WHERE dl.DeviationId = @DeviationId
	ORDER BY dl.LogDate DESC;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationLog]
	@LogId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  dl.DeviationLogId, 
		dl.DeviationId, 
		dl.LogDate, 
		dl.LogByPersonId, 
		(te.strFirstName + ' ' + te.strLastName) AS LogByPerson,
		dl.[Description], 
		dl.ActionType,
		dl.Editable
	FROM Deviation.DeviationLog dl 
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = dl.LogByPersonId
	WHERE dl.DeviationLogId = @LogId
END
GO
/****** Object:  Table [Deviation].[DeviationDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[DeviationDocument](
	[DeviationDocumentId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[DocumentEntityId] [int] NOT NULL,
	[IsDeleted] [bit] NULL,
	[IsRemovable] [bit] NULL,
 CONSTRAINT [PK_Deviation_DeviationDocument] PRIMARY KEY CLUSTERED 
(
	[DeviationDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [Deviation].[DeviationCustomFieldTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Deviation].[DeviationCustomFieldTable] AS TABLE(
	[DeviationCustomFieldId] [int] NULL,
	[DeviationId] [int] NULL,
	[CategoryId] [int] NULL,
	[CategoryCustomFieldId] [int] NULL,
	[OptionId] [int] NULL,
	[Text] [nvarchar](max) NULL
)
GO
/****** Object:  Table [Deviation].[DeviationCustomField]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[DeviationCustomField](
	[DeviationCustomFieldId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[CategoryId] [int] NOT NULL,
	[CategoryCustomFieldId] [int] NOT NULL,
	[Text] [nvarchar](max) NULL,
	[OptionId] [int] NULL,
 CONSTRAINT [PK_Deviation_TextAttribute] PRIMARY KEY CLUSTERED 
(
	[DeviationCustomFieldId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [Deviation].[DeviationAttachment]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Deviation].[DeviationAttachment] AS TABLE(
	[DeviationAttachmentId] [int] NOT NULL,
	[DeviationId] [int] NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Size] [int] NOT NULL,
	[ContentType] [varchar](400) NOT NULL,
	[Extension] [varchar](10) NOT NULL,
	[Content] [image] NULL,
	[IsDeleted] [bit] NULL,
	[Removable] [bit] NULL
)
GO
/****** Object:  Table [Deviation].[DeviationAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [Deviation].[DeviationAttachment](
	[DeviationAttachmentId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Size] [int] NOT NULL,
	[ContentType] [varchar](400) NOT NULL,
	[Extension] [varchar](10) NOT NULL,
	[Content] [image] NULL,
	[IsDeleted] [bit] NULL,
	[Removable] [bit] NULL,
 CONSTRAINT [PK_Deviation_DeviationAttachment] PRIMARY KEY CLUSTERED 
(
	[DeviationAttachmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblBlob]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblBlob](
	[iItemId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iInformationTypeId] [int] NOT NULL,
	[strName] [varchar](300) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
	[iSize] [int] NOT NULL,
	[iWidth] [int] NOT NULL,
	[iHeight] [int] NOT NULL,
	[strFileName] [varchar](200) NOT NULL,
	[strContentType] [varchar](100) NOT NULL,
	[strExtension] [varchar](10) NOT NULL,
	[imgContent] [image] NULL,
	[bInUse] [bit] NOT NULL,
	[dtmRegistered] [datetime] NOT NULL,
	[JsonImageContent] [nvarchar](max) NULL,
 CONSTRAINT [PK_m136_tblBlob] PRIMARY KEY CLUSTERED 
(
	[iItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_ssp_SearchDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_ssp_SearchDocuments]
	@iSecurityId int,
	@strSearchString varchar(100),
	@iDepartmentId int = 0
AS
	DECLARE
		@strExecuteDiz nvarchar(4000)
	SET @strSearchString = replace(@strSearchString,'''','''''')
	SET nocount ON
	SET @strExecuteDiz =  'SELECT '+
				'DISTINCT doc.iDocumentId, doc.strName, doc.strDescription description, HBook.strName as strHandbookName, HBook.iHandbookId, HBook.iLevelType, HBook.iDepartmentId '+
				'FROM '+
				'm136_tblDocument doc '+
				'inner join m136_tblHandbook HBook on HBook.iHandbookId=doc.iHandbookId '+
				'left join m136_tblMetaInfoRichText RichTextInfo on RichTextInfo.iEntityId=doc.iEntityId '+
				'left join m136_tblMetaInfoText TextInfo on TextInfo.iEntityId=doc.iEntityId '+
				'WHERE '+
				'doc.iDeleted=0 '+
				'AND iDraft=0 '+
				'AND iApproved=1 '+
				'AND (dbo.fnSecurityGetPermission(136, 462, '+ cast(@iSecurityId as varchar) +', HBook.iHandbookId) & 0x01)>0 '+
				'AND iVersion=( '+
				'SELECT '+
				'MAX(iVersion) '+
				'FROM '+
				'm136_tblDocument left outer join m136_tblHandbook on m136_tblHandbook.iHandbookId=m136_tblDocument.iHandbookId '+
				'WHERE '+
				'm136_tblDocument.iDocumentId=doc.iDocumentId '+
				'AND m136_tblDocument.iDeleted=0 '+
				'AND m136_tblDocument.iDraft=0 '+
				'AND m136_tblDocument.iApproved=1 '+
				'AND (dbo.fnSecurityGetPermission(136, 462, '+ cast(@iSecurityId as varchar) +', m136_tblHandbook.iHandbookId) & 0x01)>0 '+
				') '+
				'AND (	RichTextInfo.value LIKE ''%' + @strSearchString + '%'' '+
				'OR TextInfo.value LIKE ''%' + @strSearchString + '%'' '+
				'OR Doc.strName LIKE ''%' + @strSearchString + '%'' '+
				') '
	if @iDepartmentId>0
		SET @strExecuteDiz = @strExecuteDiz + 'AND HBook.iDepartmentId='+cast(@iDepartmentId as varchar)
	SET @strExecuteDiz = @strExecuteDiz + ' FOR xml auto'
execute (@strExecuteDiz)
GO
/****** Object:  Table [dbo].[ReadingList]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReadingList](
	[ReadingListId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](4000) NULL,
	[IsInactive] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ReadingListId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[ProgressReport]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[ProgressReport](
	[ProgressReportId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Comment] [nvarchar](max) NOT NULL,
	[Timestamp] [datetime] NOT NULL,
	[ReportedByPersonId] [int] NOT NULL,
	[DeviationId] [int] NOT NULL,
 CONSTRAINT [PK_Deviation_ProgressReport] PRIMARY KEY CLUSTERED 
(
	[ProgressReportId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ssp_MapEntityIdToPermission]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_MapEntityIdToPermission]
	@iUserId integer,
	@iApplicationId int,
	@iPermissionSetId int,
	@strEntityIds varchar(8000)
AS

DECLARE
	@strTmpTableName varchar(100),
	@strTmpCreateTable varchar (2000),

	@iIdPos integer,
	@iTmpPos integer,
	@iIdLen integer,
	@strId varchar(20),

	@iAccess integer,
	@iTmpAccess integer,

	@strSQL nvarchar(2000),
	@strResult nvarchar(1000)


SET NOCOUNT ON

-- GENERATE TEMPORARY TABLE NAME
SET @strTmpTableName = '[##' + HOST_NAME() + RTRIM(@@spid) + convert(varchar(30), getdate(),14) + ']'

SET @strTmpCreateTable = 'CREATE TABLE ' + @strTmpTableName + '(iIndex int NOT NULL IDENTITY(1,1)  PRIMARY KEY (iIndex, iEntityId), iEntityId int NOT NULL, iAccess int NOT NULL DEFAULT 0)'
--print @strTmpCreateTable

-- CREATE THE TABLE
EXECUTE (@strTmpCreateTable)

-- MAKE CURSOR STATEMENT
SET @strResult = '
DECLARE curResult
CURSOR FAST_FORWARD READ_ONLY FOR
SELECT a.iBit FROM tblACL a, relEmployeeSecGroup r 
WHERE r.iSecGroupId = a.iSecurityId 
AND r.iEmployeeId = @iUserId
AND a.iApplicationId = @iApplicationId
AND a.iPermissionSetId = @iPermissionSetId
AND a.iEntityId = @iEntityId'
--print @strResult

-- SPLIT ARGUMENT STRINGS AND INSERT INTO TABLE

set @strSQL = 'INSERT INTO ' + @strTmpTableName + '(iEntityId, iAccess) VALUES(@iEntityId, @iAccess)'

set @strEntityIds =  @strEntityIds + ','
set @iIdLen = len(@strEntityIds)
set @iIdPos = 1

while (@iIdPos < @iIdLen)
BEGIN
	-- GET NEXT ID
	set @iTmpPos = charindex(',', @strEntityIds, @iIdPos)
	set @strId = substring(@strEntityIds, @iIdPos, @iTmpPos - @iIdPos)
	set @iIdPos = @iTmpPos + 1

	-- open cursor for permission bits
	-- CREATE CURSOR
	EXEC sp_executesql @strResult, N'@iUserId int, @iApplicationId int, @iPermissionSetId int, @iEntityId int', @iUserId = @iUserId, @iApplicationId = @iApplicationId, @iPermissionSetId = @iPermissionSetId, @iEntityId = @strId
	OPEN curResult

	-- GET FIRST STACK ITEM
	FETCH NEXT FROM curResult
	INTO 	@iTmpAccess

	SET @iAccess = 0
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
		SET @iAccess = @iAccess | @iTmpAccess
		FETCH NEXT FROM curResult 
		INTO 	@iTmpAccess
	END	
--print @iAccess

	exec sp_executesql @strSQL, N'@iEntityId int, @iAccess int', @iEntityId = @strId, @iAccess = @iAccess

	-- clean up
	CLOSE curResult
	DEALLOCATE curResult

--print cast(@iIdPos as varchar) + '-' + cast(@iTmpPos as varchar) + ': ' + @strId
END

-- get result
exec('SELECT iEntityId iId, iAccess FROM ' + @strTmpTableName)
GO
/****** Object:  StoredProcedure [dbo].[ssp_MapEntityIdToName]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_MapEntityIdToName]
	@iUserId integer,
	@strEntityIds varchar(8000),
	@iFirstNameLast int
AS

DECLARE
	@strTmpTableName varchar(100),
	@strTmpCreateTable varchar (2000),

	@strResult varchar(500),
	@strResult2 varchar(500),

	@iIdPos integer,
	@iTmpPos integer,
	@iIdLen integer,
	@strId varchar(20),
	@strSQL nvarchar(2000),

	@iEntityId integer,
	@strName varchar(150)

SET NOCOUNT ON

-- GENERATE TEMPORARY TABLE NAME
SET @strTmpTableName = '[##' + HOST_NAME() + RTRIM(@@spid) + convert(varchar(30), getdate(),14) + ']'

SET @strTmpCreateTable = 'CREATE TABLE ' + @strTmpTableName + '(iIndex int NOT NULL IDENTITY(1,1)  PRIMARY KEY (iIndex, iEntityId), iEntityId int NOT NULL, strName varchar(150) NOT NULL DEFAULT '''')'
--print @strTmpCreateTable

-- CREATE THE TABLE
EXECUTE (@strTmpCreateTable)

-- MAKE CURSOR STATEMENT
SET @strResult = '
DECLARE curResult
CURSOR SCROLL DYNAMIC FOR
SELECT '
if @iFirstNameLast = 0
	SET @strResult = @strResult + 'iEmployeeId iEntityId, strFirstName + '' '' + strLastName strName'
else
	SET @strResult = @strResult + 'iEmployeeId iEntityId, strLastName + '', '' + strFirstName strName'
SET @strResult = @strResult + ' FROM tblEmployee WHERE iEmployeeId IN ('
SET @strResult2 = ') AND iEmployeeId > 0'

-- CREATE CURSOR
EXEC (@strResult + @strEntityIds + @strResult2)

-- SPLIT ARGUMENT STRINGS AND INSERT INTO TABLE

set @strSQL = 'INSERT INTO ' + @strTmpTableName + '(iEntityId) VALUES(@iEntityId)'

set @strEntityIds =  @strEntityIds + ','
set @iIdLen = len(@strEntityIds)
set @iIdPos = 1
while (@iIdPos < @iIdLen)
BEGIN
	-- GET NEXT ID
	set @iTmpPos = charindex(',', @strEntityIds, @iIdPos)
	set @strId = substring(@strEntityIds, @iIdPos, @iTmpPos - @iIdPos)
	set @iIdPos = @iTmpPos + 1
	exec sp_executesql @strSQL, N'@iEntityId int', @iEntityId = @strId
--print cast(@iIdPos as varchar) + '-' + cast(@iTmpPos as varchar) + ': ' + @strId
END
-- OPEN CURSOR
OPEN curResult


set @strSQL = 'UPDATE ' + @strTmpTableName + ' SET strName = @strName WHERE iEntityId = @iEntityId'

-- GET FIRST STACK ITEM
FETCH FIRST FROM curResult
INTO 	@iEntityId,
	@strName

WHILE (@@FETCH_STATUS = 0)
BEGIN
	EXEC sp_executesql @strSQL, N'@strName varchar(150), @iEntityId int', @strName = @strName, @iEntityId = @iEntityId 

	FETCH NEXT FROM curResult 
	INTO 	@iEntityId,
		@strName
END	

-- clean up
CLOSE curResult
DEALLOCATE curResult

exec('SELECT iEntityId, strName FROM ' + @strTmpTableName)
GO
/****** Object:  StoredProcedure [dbo].[ssp_GetEntityPermission]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_GetEntityPermission] 
	@iUserId integer,
	@iModuleId integer,
	@iPermissionSetId integer,
	@iEntityId integer,
	@iAccess integer OUTPUT
AS

DECLARE
	@strCursor nvarchar(2000),
	@iBit integer
	
SET NOCOUNT ON

SET @iAccess = 0

-- MAKE CURSOR STATEMENT
SET @strCursor = '
DECLARE curPerm
CURSOR SCROLL DYNAMIC FOR
SELECT DISTINCT a.iBit
FROM tblACL a, relEmployeeSecGroup r, tblItem i 
WHERE a.iEntityId = i.iGroupId AND i.iItemId = ' + cast(@iEntityId as nvarchar) + ' AND a.iSecurityId = r.iSecGroupId AND a.iApplicationId = ' + cast(@iModuleId as nvarchar) + ' AND a.iPermissionSetId = ' + cast(@iPermissionSetId as nvarchar) + ' AND r.iEmployeeId = ' + cast(@iUserId as nvarchar)
-- CREATE CURSOR
EXEC (@strCursor)
OPEN curPerm

-- GET FIRST STACK ITEM
FETCH FIRST FROM curPerm
INTO 	@iBit

WHILE (@@FETCH_STATUS = 0)
BEGIN
	SET @iAccess = @iAccess | @iBit
	FETCH NEXT FROM curPerm
	INTO 	@iBit
END	

-- clean up
CLOSE curperm
DEALLOCATE curPerm
GO
/****** Object:  Table [dbo].[sysdiagrams]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[sysdiagrams](
	[name] [sysname] NOT NULL,
	[principal_id] [int] NOT NULL,
	[diagram_id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[version] [int] NULL,
	[definition] [varbinary](max) NULL,
 CONSTRAINT [PK__sysdiagr__C2B05B610CBA4EEA] PRIMARY KEY CLUSTERED 
(
	[diagram_id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [UK_principal_name] UNIQUE NONCLUSTERED 
(
	[principal_id] ASC,
	[name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [Deviation].[Statuses]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Statuses](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
	[Description] [nvarchar](max) NULL,
 CONSTRAINT [PK_Deviation_Statuses] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[StateNotification]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[StateNotification](
	[StateNotificationId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[EmailAddress] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_Deviation_StateNotification] PRIMARY KEY CLUSTERED 
(
	[StateNotificationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[CategoryResponsible]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[CategoryResponsible](
	[CategoryResponsibleId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CategoryId] [int] NOT NULL,
	[ResponsibleObjectId] [int] NOT NULL,
	[TypeId] [int] NOT NULL,
 CONSTRAINT [PK_Deviation_CategoryResponsible] PRIMARY KEY CLUSTERED 
(
	[CategoryResponsibleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[CategoryDefinitions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[CategoryDefinitions](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CategoryId] [int] NOT NULL,
	[DefinitionType] [tinyint] NOT NULL,
	[DefinitionValue] [tinyint] NOT NULL,
	[Definition] [nvarchar](254) NULL,
 CONSTRAINT [PK_Deviation_CategoryDefinitions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[CategoryCustomFieldOptions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[CategoryCustomFieldOptions](
	[OptionId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CategoryId] [int] NOT NULL,
	[CategoryCustomFieldId] [int] NOT NULL,
	[Name] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Deleted] [bit] NOT NULL,
 CONSTRAINT [PK_Deviation_CategoryOptions] PRIMARY KEY CLUSTERED 
(
	[OptionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[CategoryCustomField]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[CategoryCustomField](
	[CategoryCustomFieldId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CategoryId] [int] NOT NULL,
	[Name] [nvarchar](500) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[MessageText] [nvarchar](max) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedByUserIdentityId] [int] NULL,
	[Type] [int] NOT NULL,
	[URL] [nvarchar](max) NULL,
	[VisibleOnRegistration] [bit] NOT NULL,
	[IsMandatory] [bit] NOT NULL,
	[Deleted] [bit] NOT NULL,
 CONSTRAINT [PK_Deviation_CategoryAttributes] PRIMARY KEY CLUSTERED 
(
	[CategoryCustomFieldId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[CategoryAlerts]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[CategoryAlerts](
	[CategoryAlertId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[CategoryID] [int] NULL,
	[Email] [nvarchar](100) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[UserId] [int] NULL,
 CONSTRAINT [PK_Deviation_CategoryAlert] PRIMARY KEY CLUSTERED 
(
	[CategoryAlertId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[Item]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[Item] AS TABLE(
	[Id] [int] NOT NULL,
	[Value] [int] NULL
)
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteRoleMembers]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 24, 2015
-- Description:	Delete employee security groups
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteRoleMembers]
	@iRoleId INT,
	@MemberIds AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DELETE dbo.relEmployeeSecGroup WHERE iEmployeeId IN (SELECT Id FROM @MemberIds)
	AND (iSecGroupId = @iRoleId);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteDepartmentResponsibles]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 16, 2015
-- Description:	Delete department responsibles
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteDepartmentResponsibles]
	@Ids AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;

    DELETE dbo.DepartmentResponsibles WHERE Id IN (SELECT Id FROM @Ids);
END
GO
/****** Object:  StoredProcedure [Calendar].[IsUserCreatorOrResponsibleOfActivities]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[IsUserCreatorOrResponsibleOfActivities] 
    @UserId INT,
    @ActivityIds AS [dbo].[Item] READONLY
AS
BEGIN
    IF EXISTS(SELECT 1 FROM [Calendar].[Activities] WHERE CreatedBy <> @UserId AND ResponsibleId <> @UserId AND ActivityId IN (SELECT Id FROM @ActivityIds))
    BEGIN
        SELECT 0
    END
    ELSE
    BEGIN
        SELECT 1
    END
END
GO
/****** Object:  StoredProcedure [Calendar].[IsUserCreatorOfActivities]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[IsUserCreatorOfActivities] 
    @UserId INT,
    @ActivityIds AS [dbo].[Item] READONLY
AS
BEGIN
    IF EXISTS(SELECT 1 FROM [Calendar].[Activities] WHERE CreatedBy <> @UserId AND ActivityId IN (SELECT Id FROM @ActivityIds))
    BEGIN
        SELECT 0
    END
    ELSE
    BEGIN
        SELECT 1
    END
END
GO
/****** Object:  Table [Deviation].[ActionAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [Deviation].[ActionAttachment](
	[ActionAttachmentId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DeviationId] [int] NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ActionType] [int] NOT NULL,
	[BaseActionId] [int] NOT NULL,
	[Size] [int] NOT NULL,
	[ContentType] [varchar](400) NOT NULL,
	[Extension] [varchar](10) NOT NULL,
	[Content] [image] NULL,
	[IsDeleted] [bit] NULL,
	[Removable] [bit] NULL,
 CONSTRAINT [PK_Deviation_ActionAttachment] PRIMARY KEY CLUSTERED 
(
	[ActionAttachmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedTableType [dbo].[ACLDatatable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[ACLDatatable] AS TABLE(
	[iEntityId] [int] NOT NULL,
	[iApplicationId] [int] NOT NULL,
	[iSecurityId] [int] NOT NULL,
	[iPermissionSetId] [int] NOT NULL,
	[iGroupingId] [int] NOT NULL,
	[iBit] [int] NOT NULL,
	[bRecursive] [bit] NOT NULL
)
GO
/****** Object:  Table [Risk].[Areas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[Areas](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Icon] [image] NULL,
	[iDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Risk_Areas_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetSqlDropConstraintKey]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn136_GetSqlDropConstraintKey]
(
	@TableName varchar(100),
	@ConstraintKeyName varchar(100)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	DECLARE @sql NVARCHAR(MAX) = NULL
	SELECT TOP 1 @sql = N'ALTER TABLE dbo.' + @TableName + ' DROP CONSTRAINT ['+CONSTRAINT_NAME+N']'
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
	WHERE CONSTRAINT_NAME like @ConstraintKeyName + '%'
	  AND TABLE_NAME = @TableName
	return @sql
END
GO
/****** Object:  UserDefinedTableType [Deviation].[CustomFieldOptionTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [Deviation].[CustomFieldOptionTable] AS TABLE(
	[OptionId] [int] NULL,
	[CategoryId] [int] NULL,
	[CategoryCustomFieldId] [int] NULL,
	[Name] [nvarchar](500) NULL,
	[Description] [nvarchar](max) NULL
)
GO
/****** Object:  Table [dbo].[luResponsibleTypes]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[luResponsibleTypes](
	[Id] [tinyint] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_luResponsibleTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[luReaderTypes]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[luReaderTypes](
	[Id] [smallint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[Deviation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Deviation](
	[DeviationId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Consequence] [tinyint] NULL,
	[CategoryId] [int] NOT NULL,
	[ContactPersonId] [int] NULL,
	[DueDate] [datetime] NULL,
	[ImmediateAction] [nvarchar](max) NULL,
	[ImmediateConsequences] [nvarchar](max) NULL,
	[ProposedActions] [nvarchar](max) NULL,
	[RegisteredByUser] [int] NULL,
	[ReportTypeId] [int] NULL,
	[State] [int] NOT NULL,
	[Priority] [int] NULL,
	[Type] [int] NOT NULL,
	[OwnerId] [int] NULL,
	[PreviousOwner] [int] NULL,
	[ForwardedTo] [int] NULL,
	[EventDate] [datetime] NULL,
	[RegisterDate] [datetime] NULL,
	[LocationId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[RegisteredByDepartment] [int] NULL,
	[HandledByDepartment] [int] NULL,
	[SequenceId] [nvarchar](25) NULL,
	[AssignedDeparementDate] [datetime] NULL,
	[ServiceAreaID] [int] NULL,
	[StatusId] [int] NULL,
	[UpdatedDate] [datetime] NULL,
 CONSTRAINT [PK_Deviation] PRIMARY KEY CLUSTERED 
(
	[DeviationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[Category]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Category](
	[CategoryId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[ParentCategoryId] [int] NULL,
	[TopCategoryId] [int] NOT NULL,
	[Depth] [int] NOT NULL,
	[Name] [nvarchar](500) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Cost] [decimal](18, 0) NULL,
	[CategoryType] [int] NOT NULL,
	[DueDatePeriod] [int] NULL,
	[Priority] [int] NULL,
	[KPI] [int] NULL,
	[KPIPeriod] [int] NULL,
	[IncludePatientInfo] [bit] NULL,
	[IncludeForwaringOption] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[SecGroupId] [int] NULL,
	[AnonymousSecGroupId] [int] NULL,
	[AnonymousIsDefault] [bit] NULL,
	[DefaultPriority] [int] NULL,
	[IncludeServiceArea] [bit] NULL,
	[ServiceAreaID] [int] NULL,
	[Icon] [image] NULL,
	[AccessType] [int] NULL,
 CONSTRAINT [PK_Deviation_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Deviation].[GetMyDeviationTasks]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetMyDeviationTasks]
	@iUserId int = 0,
	@iState int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 
	    ba.BaseActionId as Id,
		ba.Title, 
		ba.[Description], 
		ba.[State], 
		ba.ActionType, 
		ba.RegisteredDate, 
		ba.DueDate, 
		ba.DeviationId,
		ba.UpdatedDate,
		ba.SequenceId,
		d.OwnerId,
		(te.strFirstName + ' ' + te.strLastName) AS [Owner],
		te.strEmail AS OwnerEmail,
		d.CategoryId,
		c.CategoryType AS [Type],
		c.Name AS CategoryName,
		row_number() OVER (ORDER BY d.RegisterDate DESC) AS rownumber
	INTO #Filters 
	FROM Deviation.BaseAction ba 
	INNER JOIN Deviation.Deviation d ON d.DeviationId = ba.DeviationId
	LEFT JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee te ON ba.ResponsiblePersonId = te.iEmployeeId
	WHERE ba.ResponsiblePersonId = @iUserId
	AND ((ba.[State] = @iState OR @iState IS NULL) AND d.[State] <> 16 AND ba.[State] <> 8)
	AND ba.IsDeleted = 0;
	SELECT f.* FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;                                 
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationTasks]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationTasks]
	@Id INT,
	@ActionTypes AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	SELECT 
		ba.BaseActionId AS Id, 
		ba.Title, 
		ba.[Description], 
		ba.DeviationId, 
		ba.DueDate, 
		ba.ResponsiblePersonId, 
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS [Owner],
		te.strEmail AS OwnerEmail,
		ba.[State], 
		ba.ActionType, 
		ba.StartDate, 
		ba.Whatdone, 
		ba.FollowUpDate, 
		ba.Cost, 
		ba.Item, 
		ba.CostType, 
		ba.SequenceId, 
		ba.RegisteredDate,
		ba.IsDeleted,
		ba.UpdatedDate,
		d.Title AS DeviationTitle,
		c.Name AS CategoryName,
		c.CategoryType,
		d.RegisteredByUser AS DeviationCreator,
		d.OwnerId AS DeviationOwner	
	FROM Deviation.BaseAction ba 
	LEFT JOIN dbo.tblEmployee te ON ba.ResponsiblePersonId = te.iEmployeeId
	JOIN  Deviation.Deviation d ON d.DeviationId = ba.DeviationId
	JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	WHERE ba.DeviationId = @Id
	AND ba.IsDeleted = 0
	AND ba.ActionType IN (SELECT Id FROM @ActionTypes);
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationTask]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationTask] 
	@Id INT
AS
SET NOCOUNT ON
BEGIN
	SELECT 
		ba.BaseActionId AS Id, 
		ba.Title, 
		ba.[Description], 
		ba.DeviationId, 
		ba.DueDate, 
		ba.ResponsiblePersonId, 
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS [Owner],
		te.strEmail AS OwnerEmail,
		ba.[State], 
		ba.ActionType, 
		ba.StartDate, 
		ba.Whatdone, 
		ba.FollowUpDate, 
		ba.Cost, 
		ba.Item, 
		ba.CostType, 
		ba.SequenceId, 
		ba.RegisteredDate,
		c.Name AS CategoryName,
		ba.IsDeleted,
		ba.UpdatedDate,
		d.Title AS DeviationTitle,
		c.Name AS CategoryName,
		c.CategoryType,
		d.RegisteredByUser AS DeviationCreator,
		d.OwnerId AS DeviationOwner			
	FROM Deviation.BaseAction ba 
	LEFT JOIN dbo.tblEmployee te ON ba.ResponsiblePersonId = te.iEmployeeId
	JOIN  Deviation.Deviation d ON d.DeviationId = ba.DeviationId
	JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	WHERE ba.BaseActionId = @Id AND ba.IsDeleted = 0;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetBaseActionByFilter]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetBaseActionByFilter]
	@PageIndex INT,
    @PageSize INT,
    @CaseNumber NVARCHAR(50),
    @Text NVARCHAR(500),
    @State INT,
    @OwnerId INT,
    @CategoryId INT,
    @Type INT,
    @IsLoadMore BIT,
    @FromDate DATETIME,
    @ToDate DATETIME,
	@SearchType INT,
	@DateFilter INT
AS
BEGIN
	SELECT
		rownumber = ROW_NUMBER() OVER (ORDER BY ba.BaseActionId DESC), 
		ba.BaseActionId AS Id, 
		ba.Title, 
		ba.[Description], 
		ba.DeviationId, 
		ba.DueDate, 
		ba.ResponsiblePersonId, 
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS [Owner],
		ba.[State], 
		ba.ActionType, 
		ba.StartDate, 
		ba.Whatdone, 
		ba.FollowUpDate, 
		ba.Cost, 
		ba.Item, 
		ba.CostType, 
		ba.SequenceId, 
		ba.RegisteredDate,
		ba.IsDeleted,
		ba.UpdatedDate,
		d.Title AS DeviationTitle,
		c.Name AS CategoryName
	INTO #Filters
	FROM Deviation.BaseAction ba 
	LEFT JOIN dbo.tblEmployee te ON ba.ResponsiblePersonId = te.iEmployeeId
	LEFT JOIN Deviation.Deviation d ON d.DeviationId = ba.DeviationId
	LEFT JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	WHERE
		(@Text IS NULL OR ba.Title like '%' + @Text + '%')
	AND
		(@Type IS NULL OR c.CategoryType = @Type)
	AND
		(@CaseNumber IS NULL OR @CaseNumber = '' OR ba.SequenceId = @CaseNumber)
	AND
		(@State IS NULL OR ba.[State] = @State)
	AND
		(@OwnerId IS NULL OR ba.ResponsiblePersonId = @OwnerId)
	AND
		(@CategoryId IS NULL OR @CategoryId = 0 OR d.CategoryId = @CategoryId)
	AND
		(@FromDate IS NULL 
		    OR (CASE 
			        WHEN @DateFilter = 2 THEN CONVERT(DATE, ba.RegisteredDate)
			        WHEN @DateFilter = 3 THEN CONVERT(DATE, ba.UpdatedDate)
			        ELSE CONVERT(DATE, ba.DueDate)
		        END) >= @FromDate)
	AND
		(@ToDate IS NULL 
		    OR (CASE 
			        WHEN @DateFilter = 2 THEN CONVERT(DATE, ba.RegisteredDate)
			        WHEN @DateFilter = 3 THEN CONVERT(DATE, ba.UpdatedDate)
			        ELSE CONVERT(DATE, ba.DueDate)
		        END) <= @ToDate)
	AND
		(@SearchType IS NULL OR ba.ActionType = @SearchType)
	AND
		ba.IsDeleted = 0
	AND
		d.IsDeleted = 0
	AND 
		c.IsDeleted = 0;
	SELECT f.* 
	FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	IF(@IsLoadMore = 0)
	BEGIN
		SELECT COUNT(*) AS Total
		FROM #Filters;
	END
	ELSE
	BEGIN
		SELECT 0 AS Total;
	END
	DROP TABLE #Filters;
END
GO
/****** Object:  Table [Deviation].[Location]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[Location](
	[LocationId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[LocationName] [nvarchar](150) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK_Deviation_Location] PRIMARY KEY CLUSTERED 
(
	[LocationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[RelatedInfoTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[RelatedInfoTable] AS TABLE(
	[iItemId] [int] NOT NULL,
	[iPlacementId] [int] NULL,
	[iProcessRelationTypeId] [int] NULL,
	[iSort] [int] NULL
)
GO
/****** Object:  Table [Risk].[luConsequenceTypes]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luConsequenceTypes](
	[Id] [tinyint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_Risk_luConsequenceTypes_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[ReadingListReaderItems]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[ReadingListReaderItems] AS TABLE(
	[ReadingListId] [int] NULL,
	[ReaderTypeId] [smallint] NULL,
	[ReaderId] [int] NULL
)
GO
/****** Object:  Table [Risk].[luProbability]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luProbability](
	[Id] [tinyint] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_Risk_luProbability] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Deviation].[luDefinitionTypes]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[luDefinitionTypes](
	[Id] [int] NOT NULL,
	[Name] [nvarchar](200) NULL,
 CONSTRAINT [PK_Deviation_luDefinitionTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblInformationType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblInformationType](
	[iInformationTypeId] [int] NOT NULL,
	[strName] [varchar](20) NOT NULL,
	[strDescription] [varchar](150) NOT NULL,
	[strURL] [varchar](200) NOT NULL,
	[strParameters] [varchar](200) NOT NULL,
 CONSTRAINT [PK__tblInformationType_iInformationTypeId] PRIMARY KEY CLUSTERED 
(
	[iInformationTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblEventlog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblEventlog](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[DocumentId] [int] NOT NULL,
	[Version] [int] NOT NULL,
	[EmployeeId] [int] NOT NULL,
	[LoginName] [varchar](100) NOT NULL,
	[FirstName] [varchar](50) NOT NULL,
	[LastName] [varchar](50) NOT NULL,
	[EventTime] [datetime] NOT NULL,
	[EventType] [int] NOT NULL,
	[Description] [varchar](max) NOT NULL,
 CONSTRAINT [PK_tblEventlog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fn_diagramobjects]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_diagramobjects]() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
GO
/****** Object:  UserDefinedTableType [dbo].[FieldContent]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[FieldContent] AS TABLE(
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iInfoTypeId] [int] NOT NULL,
	[RichText] [ntext] NULL,
	[Text] [varchar](800) NULL,
	[Number] [int] NULL,
	[Date] [datetime] NULL
)
GO
/****** Object:  Table [dbo].[m136_AppSessions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_AppSessions](
	[PhoneId] [varchar](200) NOT NULL,
	[SessionTime] [datetime] NOT NULL,
	[AppId] [int] NOT NULL,
	[UserId] [int] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_Apps]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_Apps](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AppName] [varchar](100) NOT NULL,
	[DefaultAppUserId] [int] NULL,
 CONSTRAINT [PK_m136_Apps] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetUserApprovedOnLatestDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetUserApprovedOnLatestDocument]
	@DocumentId INT
AS
BEGIN
	SELECT
		e.iEmployeeId,
		strFirstName,
		strLastName,
		strEmail
	FROM
		dbo.tblEmployee AS e
	WHERE
		e.iEmployeeId = (
			SELECT
				iApprovedById 
			FROM 
				m136_tblDocument
			WHERE iDocumentId = @DocumentId AND iLatestApproved = 1)	
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetFileDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetFileDocument]
	@SecurityId INT = NULL,
	@EntityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	SELECT	
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File]
	FROM	
			m136_tblDocument d
	WHERE	
				d.iEntityId = @EntityId
			AND [dbo].[fnHandbookHasReadContentsAccess](@SecurityId, d.iHandbookId) = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteMultipleDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteMultipleDocuments]
	@UserId AS INT,
	@DocumentIds AS [dbo].[Item] READONLY
AS
BEGIN
	DECLARE @FullName NVARCHAR(100);
	SELECT
		@FullName = strFirstName + ' ' + strLastName
	FROM
		tblEmployee
	WHERE
		iEmployeeId = @UserId
	UPDATE
		m136_tblDocument
	SET
		iDeleted = 1,
		iAlterId = @UserId,
		strAlterer = @FullName
	WHERE
		iDocumentId IN (SELECT Id FROM @DocumentIds)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateNewDocumentVersionWithDocumetTypeId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateNewDocumentVersionWithDocumetTypeId]
    @iCreatedById    INT,
    @iEntityId       INT,
    @iDocumentId     INT,
    @iDocumentTypeId INT
AS
BEGIN
	DECLARE @NewEntityId INT, @iExistEntityId INT;
	DECLARE @MaxEntityId INT, @MaxVersion INT;
	SELECT @MaxEntityId = MAX(mtd.iEntityId) FROM dbo.m136_tblDocument mtd;
	SELECT @MaxVersion = MAX(mtd.iVersion) FROM dbo.m136_tblDocument mtd WHERE mtd.iDocumentId = @iDocumentId;
	SET @NewEntityId = ISNULL(@MaxEntityId, 0) + 1;
	DECLARE @CurrentDate DATETIME = GETDATE();
	UPDATE dbo.m136_tblDocument
	SET
	    dbo.m136_tblDocument.iLatestVersion = 0
	WHERE iDocumentId = @iDocumentId;
	SET IDENTITY_INSERT dbo.m136_tblDocument ON;
	INSERT INTO	dbo.m136_tblDocument( [iEntityId],[iDocumentId],[iVersion],[iDocumentTypeId],[iHandbookId],[strName],[strDescription],[iCreatedbyId],[dtmCreated],[strAuthor]
								  ,[iAlterId],[dtmAlter],[strAlterer],[iApprovedById],[dtmApproved],[strApprovedBy],[dtmPublish],[dtmPublishUntil],[iStatus],[iSort]
								  ,[iDeleted],[iApproved],[iDraft],[iLevelType],[strHash],[iReadCount],[iCompareToVersion],[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,[iLatestVersion],[iInternetDoc],[strNameReversed],[strDescriptionReversed]
								  )
	SELECT						   @NewEntityId,[iDocumentId],(ISNULL(@MaxVersion, 0) + 1),@iDocumentTypeId,[iHandbookId],[strName],[strDescription],@iCreatedById,@CurrentDate,[strAuthor]
								  ,@iCreatedById,@CurrentDate,[dbo].fnOrgGetUserName(@iCreatedById, '', 0),0,null,'',[dtmPublish],[dtmPublishUntil],0,[iSort]
								  ,[iDeleted],0,1,[iLevelType],[strHash],0,[iCompareToVersion],[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,1,[iInternetDoc],[strNameReversed],[strDescriptionReversed]
	FROM		dbo.m136_tblDocument d
	WHERE		iEntityId = @iEntityId; 								  
	SET IDENTITY_INSERT dbo.m136_tblDocument OFF;
	RETURN @NewEntityId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateNewDocumentVersion]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateNewDocumentVersion]
    @iCreatedById    INT,
    @iEntityId       INT,
    @iDocumentId     INT
AS
BEGIN
	DECLARE @NewEntityId INT, @iExistEntityId INT;
	DECLARE @MaxEntityId INT, @MaxVersion INT;
	SELECT @MaxEntityId = MAX(mtd.iEntityId) FROM dbo.m136_tblDocument mtd;
	SELECT @MaxVersion = MAX(mtd.iVersion) FROM dbo.m136_tblDocument mtd WHERE mtd.iDocumentId = @iDocumentId;
	SET @NewEntityId = ISNULL(@MaxEntityId, 0) + 1;
	DECLARE @CurrentDate DATETIME = GETDATE();
	UPDATE dbo.m136_tblDocument
	SET
	    dbo.m136_tblDocument.iLatestVersion = 0
	WHERE iDocumentId = @iDocumentId;
	SET IDENTITY_INSERT dbo.m136_tblDocument ON;
	INSERT INTO	dbo.m136_tblDocument( [iEntityId],[iDocumentId],[iVersion],[iDocumentTypeId],[iHandbookId],[strName],[strDescription],[iCreatedbyId],[dtmCreated],[strAuthor]
								  ,[iAlterId],[dtmAlter],[strAlterer],[iApprovedById],[dtmApproved],[strApprovedBy],[dtmPublish],[dtmPublishUntil],[iStatus],[iSort]
								  ,[iDeleted],[iApproved],[iDraft],[iLevelType],[strHash],[iReadCount],[iCompareToVersion],[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,[iLatestVersion],[iInternetDoc],[strNameReversed],[strDescriptionReversed]
								  )
	SELECT						   @NewEntityId,[iDocumentId],(ISNULL(@MaxVersion, 0) + 1),[iDocumentTypeId],[iHandbookId],[strName],[strDescription],@iCreatedById,@CurrentDate,[strAuthor]
								  ,@iCreatedById,@CurrentDate,[dbo].fnOrgGetUserName(@iCreatedById, '', 0),0,null,'',[dtmPublish],[dtmPublishUntil],0,[iSort]
								  ,[iDeleted],0,1,[iLevelType],[strHash],0,[iCompareToVersion],[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,1,[iInternetDoc],[strNameReversed],[strDescriptionReversed]
	FROM		dbo.m136_tblDocument d
	WHERE		iEntityId = @iEntityId; 								  
	SET IDENTITY_INSERT dbo.m136_tblDocument OFF;
	SELECT @NewEntityId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateDocument] 
	@HandbookId			INT,
	@TemplateId			INT,
	@DocumentType		INT,
	@CreatorId			INT,
	@AllowOffline		BIT,
	@Title				NVARCHAR(MAX),
	@Publish			DATETIME,
	@PublishUntil		DATETIME
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxDocumentId INT = 0, @iMaxEntityId INT = 0, @Sort INT, @LevelType INT;
	SELECT @LevelType = iLevelType FROM dbo.m136_tblHandbook WHERE iHandbookId = @HandbookId
	SELECT @iMaxDocumentId = MAX(iDocumentId) FROM dbo.m136_tblDocument;
	DECLARE @iNewDocumentId INT = ISNULL(@iMaxDocumentId, 0) + 1;
	SELECT @iMaxEntityId = MAX(iEntityId) FROM dbo.m136_tblDocument;
	DECLARE @iNewEntityId INT = ISNULL(@iMaxEntityId, 0) + 1;
	SELECT @Sort = ISNULL(MAX(iSort) + 1, 0) FROM (SELECT 0 iSort
			FROM dbo.m136_tblDocument d
			WHERE d.iHandbookId = @HandbookId AND d.iDeleted = 0
			AND d.iLatestVersion = 1
		UNION all
			SELECT 1 iSort
			FROM dbo.m136_tblDocument d
			WHERE d.iLatestVersion = 1) Temp
	SET IDENTITY_INSERT dbo.m136_tblDocument ON;
	INSERT INTO dbo.m136_tblDocument(
		iEntityId,
		iDocumentId,
		iVersion,
		iDocumentTypeId,
		iHandbookId,
		strName,
		strDescription,
		iCreatedbyId,
		dtmCreated,
		strAuthor,
		iAlterId,
		dtmAlter,
		strAlterer,
		iApprovedById,
		strApprovedBy,
		iStatus,
		iSort,
		iDeleted,
		iApproved,
		iDraft,
		iLevelType,
		strHash,
		iReadCount,
		iLatestVersion,
		iLatestApproved,
		dtmPublish,
		dtmPublishUntil) 
    VALUES(
		@iNewEntityId,
		@iNewDocumentId,
		0,
		@TemplateId,
		@HandbookId,
		@Title,
		'',
		@CreatorId,
		GETDATE(),
		[dbo].[fnOrgGetUserName] (@CreatorId, 'System', 0),
		@CreatorId,
		GETDATE(),
		[dbo].[fnOrgGetUserName] (@CreatorId, 'System', 0),
		0,
		'',
		0,
		@Sort,
		0,
		0,
		1,
		@LevelType,
		'',
		0,
		1,
		0,
		@Publish,
		@PublishUntil);
	SET IDENTITY_INSERT dbo.m136_tblDocument OFF;
	SELECT @iNewDocumentId;
END
GO
/****** Object:  Table [dbo].[m123_tblInfo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblInfo](
	[iInfoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strTopic] [varchar](300) NULL,
	[strTitle] [varchar](300) NOT NULL,
	[strIngress] [varchar](800) NULL,
	[strBody] [text] NULL,
	[dtmCreated] [datetime] NULL,
	[dtmChanged] [datetime] NULL,
	[dtmPublish] [datetime] NULL,
	[dtmExpire] [datetime] NULL,
	[iFlag] [int] NULL,
	[iAuthorId] [int] NULL,
	[iReadCount] [int] NULL,
	[iAlterId] [int] NULL,
	[iLockedById] [int] NULL,
	[dtmLocked] [datetime] NULL,
	[iDraft] [int] NULL,
	[iStatus] [int] NULL,
 CONSTRAINT [PK__m123_tbl__2AAAA5F16CA31EA0] PRIMARY KEY CLUSTERED 
(
	[iInfoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m123_be_GetNewsOfCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_GetNewsOfCategory]
    @CategoryId INT
AS
BEGIN
    SELECT
        i.iInfoId,
        i.iAuthorId,
        e.strFirstName + ' ' + e.strLastName AS strAuthorName,
        i.strTitle,
        i.dtmPublish,
        i.dtmExpire,
        i.iReadCount,
        i.iDraft
    FROM
        m123_tblInfo i
            INNER JOIN m123_relInfoCategory ic
                ON i.iInfoId = ic.iInfoId
            LEFT JOIN tblEmployee e
				ON i.iAuthorId = e.iEmployeeId
    WHERE
        ic.iCategoryId = @CategoryId
END
GO
/****** Object:  Table [dbo].[m123_tblHJustify]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblHJustify](
	[iHJustifyId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__C9AAB68C67DE6983] PRIMARY KEY CLUSTERED 
(
	[iHJustifyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblCategoryType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblCategoryType](
	[iCategoryTypeId] [int] NOT NULL,
	[strType] [varchar](100) NULL,
	[iActivated] [int] NULL,
 CONSTRAINT [PK__m123_tbl__0D1C33796225902D] PRIMARY KEY CLUSTERED 
(
	[iCategoryTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblCategory](
	[iCategoryId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iTemplateTypeId] [int] NULL,
	[strName] [varchar](100) NULL,
	[strDescription] [varchar](1000) NULL,
	[iSubscribeLocation] [int] NULL,
	[iParentCategoryId] [int] NULL,
	[iGroupingCategoryId] [int] NULL,
	[iModerated] [int] NULL,
	[iMainNews] [int] NULL,
	[iChildCount] [int] NULL,
	[iSort] [int] NULL,
	[iListNews] [int] NULL,
	[iViewState] [int] NULL,
	[iLockedById] [int] NULL,
	[dtmLocked] [datetime] NULL,
	[iPublishLocation] [int] NOT NULL,
	[iOwnerId] [int] NOT NULL,
	[iCategoryTypeId] [int] NULL,
	[strDisplayParams] [varchar](1000) NULL,
	[iAccess] [tinyint] NULL,
	[iShownIn] [tinyint] NULL,
 CONSTRAINT [PK__m123_tbl__342A080C5006DFF2] PRIMARY KEY CLUSTERED 
(
	[iCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblVJustify]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblVJustify](
	[iVJustifyId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__894D6A9226CFC035] PRIMARY KEY CLUSTERED 
(
	[iVJustifyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblTemplateType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblTemplateType](
	[iTemplateTypeId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
	[strDescription] [varchar](1000) NULL,
	[strGroupIconURL] [varchar](100) NULL,
	[iCategoryTypeId] [int] NOT NULL,
	[strGroupTemplateURL] [varchar](100) NULL,
	[strPageTemplateURL] [varchar](100) NULL,
	[strPageIconURL] [varchar](100) NULL,
	[strAdminURL] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__14DCED5E15A53433] PRIMARY KEY CLUSTERED 
(
	[iTemplateTypeId] ASC,
	[iCategoryTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblSubscriberType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblSubscriberType](
	[iSubscriberTypeId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m123_tbl__1593140E10E07F16] PRIMARY KEY CLUSTERED 
(
	[iSubscriberTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblSubscriber]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblSubscriber](
	[iSubscriberId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strFirstName] [varchar](50) NULL,
	[strLastName] [varchar](50) NULL,
	[strEmail] [varchar](100) NOT NULL,
	[strCompany] [nvarchar](80) NULL,
	[strPassword] [varchar](20) NULL,
	[iValidated] [int] NULL,
 CONSTRAINT [PK__m123_tbl__EDEAE258084B3915] PRIMARY KEY CLUSTERED 
(
	[iSubscriberId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m123_tblNewsInCalendar]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m123_tblNewsInCalendar](
	[iNewsId] [int] NOT NULL,
	[iCalendarCategoryId] [int] NOT NULL,
	[dtmStart] [datetime] NULL,
	[dtmStartTime] [datetime] NULL,
	[dtmEnd] [datetime] NULL,
	[dtmEndTime] [datetime] NULL,
 CONSTRAINT [PK_m123_tblNewsInCalendar] PRIMARY KEY CLUSTERED 
(
	[iNewsId] ASC,
	[iCalendarCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblMetaInfoRichText]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblMetaInfoRichText](
	[iMetaInfoRichTextId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iEntityId] [int] NOT NULL,
	[value] [ntext] NOT NULL,
 CONSTRAINT [PK__m136_tblMetaInfo__099F5001] PRIMARY KEY CLUSTERED 
(
	[iMetaInfoRichTextId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblMetaInfoNumber]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblMetaInfoNumber](
	[iMetaInfoNumberId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iEntityId] [int] NOT NULL,
	[value] [int] NOT NULL,
 CONSTRAINT [PK__m136_tbl__ED6CB4DE0AF29B96] PRIMARY KEY CLUSTERED 
(
	[iMetaInfoNumberId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblMetaInfoDate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblMetaInfoDate](
	[iMetaInfoDateId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iEntityId] [int] NOT NULL,
	[value] [datetime] NULL,
 CONSTRAINT [PK__m136_tbl__1BEF573908162EEB] PRIMARY KEY CLUSTERED 
(
	[iMetaInfoDateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m136_tblInfoType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblInfoType](
	[iInfoTypeId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](4000) NOT NULL,
 CONSTRAINT [PK__m136_tbl__03FDA9D96C6E1476] PRIMARY KEY CLUSTERED 
(
	[iInfoTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblHJustify]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblHJustify](
	[iHJustifyId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
 CONSTRAINT [PK__m136_tbl__C9AAB68C66B53B20] PRIMARY KEY CLUSTERED 
(
	[iHJustifyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblSiteTextModule]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblSiteTextModule](
	[iModuleId] [int] NOT NULL,
	[strName] [varchar](80) NOT NULL,
	[strDescription] [varchar](400) NOT NULL,
 CONSTRAINT [PK__tblSiteT__A1EC40757D0E9093] PRIMARY KEY CLUSTERED 
(
	[iModuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblSiteTextGrouping]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblSiteTextGrouping](
	[iSiteTextGrouping] [int] NOT NULL,
	[iModuleId] [int] NOT NULL,
	[strPrefix] [varchar](10) NOT NULL,
	[strDescription] [varchar](400) NOT NULL,
 CONSTRAINT [PK__tblSiteT__0F530688793DFFAF] PRIMARY KEY CLUSTERED 
(
	[iSiteTextGrouping] ASC,
	[iModuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblSiteText]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblSiteText](
	[iModuleId] [int] NOT NULL,
	[iSiteLanguage] [int] NOT NULL,
	[iSiteTextGrouping] [int] NOT NULL,
	[strKey] [varchar](30) NOT NULL,
	[strValue] [varchar](400) NOT NULL,
 CONSTRAINT [PK__tblSiteT__079B2944756D6ECB] PRIMARY KEY CLUSTERED 
(
	[iModuleId] ASC,
	[iSiteLanguage] ASC,
	[iSiteTextGrouping] ASC,
	[strKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblSiteLanguage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblSiteLanguage](
	[iSiteLanguage] [int] NOT NULL,
	[iModuleId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
	[strLangCode] [varchar](3) NOT NULL,
 CONSTRAINT [PK__tblSiteL__120DD053719CDDE7] PRIMARY KEY CLUSTERED 
(
	[iSiteLanguage] ASC,
	[iModuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m147_tblRegister]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblRegister](
	[iRegisterId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strName] [varchar](300) NOT NULL,
	[bObsolete] [bit] NOT NULL,
	[bKladd] [bit] NOT NULL,
 CONSTRAINT [PK_m147_tblRegister] PRIMARY KEY CLUSTERED 
(
	[iRegisterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m147_spGetRegister]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spGetRegister]
(
	@iSecurityId INT,
	@iRegisterId INT = 0
)
AS
BEGIN
	IF @iRegisterId = 0
		BEGIN
			SELECT * 
			FROM m147_tblRegister 
			WHERE (dbo.fnSecurityGetPermission(147, 571, @iSecurityId, iRegisterId) & 1) = 1
		END
	ELSE
		BEGIN
			SELECT * 
			FROM m147_tblRegister a 
			WHERE a.iRegisterId = @iRegisterId
				  AND (dbo.fnSecurityGetPermission(147, 571, @iSecurityId, @iRegisterId) & 1) = 1
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m147_GetMetaRegistersByUserId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_GetMetaRegistersByUserId]
    @UserId INT
AS
BEGIN
    SELECT
        iRegisterId,
        strName
    FROM
        m147_tblRegister
    WHERE
        (dbo.fnSecurityGetPermission(147, 571, @UserId, iRegisterId) & 0x02) = 0x02
        AND bObsolete = 0
        AND bKladd = 0
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetRegisterItemValuesForDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_GetRegisterItemValuesForDocument]
    @UserId INT,
	@DocumentId INT
AS
BEGIN
    SELECT
        rri.iAutoId AS iRegisterItemItemId, rri.iItemId AS DocumentId, r.iRegisterId, r.strName AS strRegisterName,
        ri.iRegisterItemId, ri.strName AS strRegisterItemName, riv.iRegisterItemValueId,
        riv.RegisterValue
    FROM
        m147_tblRegister r
            INNER JOIN m147_tblRegisterItem ri ON r.iRegisterId = ri.iRegisterId
            INNER JOIN m147_relRegisterItemItem rri ON rri.iRegisterItemId = ri.iRegisterItemId
            INNER JOIN m147_tblRegisterItemValue riv ON rri.iRegisterItemValueId = riv.iRegisterItemValueId
                AND riv.iRegisterItemId = ri.iRegisterItemId
    WHERE
        rri.iItemId = @DocumentId
        AND dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) & 0x01 = 0x01
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetActiveRegisters]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_GetActiveRegisters]
(
	@iSecurityId INT
)
AS
BEGIN
	SELECT * 
	FROM m147_tblRegister 
	WHERE (dbo.fnSecurityGetPermission(147, 571, @iSecurityId, iRegisterId) & 1) = 1
		   AND bObsolete = 0 AND bKladd = 0
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMetadataGroupsRecursive]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: Feb 03, 2015
-- Description:	Create stored procedure for getting metadata-group recursive.
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetMetadataGroupsRecursive]
(	
	@iSecurityId INT,
	@iHandbookId INT
) AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @AvailableHandbooks TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @AvailableHandbooks	
		SELECT iHandbookId FROM [dbo].[m136_GetHandbookRecursive](@iHandbookId, @iSecurityId, 1);
	SELECT DISTINCT 
		rel.iRegisterItemId,
		regitem.strName AS strTagName,
		reg.strName AS strRegisterName
	FROM m147_relRegisterItemItem rel
		LEFT OUTER JOIN m147_tblRegisterItem regitem ON rel.iRegisterItemId = regitem.iRegisterItemId
		LEFT OUTER JOIN m147_tblRegister reg ON regitem.iRegisterId = reg.iRegisterId
	WHERE
		rel.iModuleId = 136
		AND rel.iRegisterItemId > 0
		AND iItemId IN 
			(SELECT iDocumentId FROM m136_tbldocument d WHERE iHandbookId IN 
				(SELECT iHandbookId FROM @AvailableHandbooks))
	ORDER BY
		strRegisterName ASC,
		strTagName ASC
END
GO
/****** Object:  Table [dbo].[m147_tblInheritType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_tblInheritType](
	[iInheritTypeId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
	[strDescription] [varchar](500) NOT NULL,
 CONSTRAINT [PK_m147_tblInheritType] PRIMARY KEY CLUSTERED 
(
	[iInheritTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetAttachmentsInFolder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetAttachmentsInFolder]
    @UserId INT,
	@FolderId INT,
    @IsRecursive BIT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
    DECLARE @SearchFolderIds TABLE(Id INT);
    DECLARE @DocumentEntityIds TABLE(Id INT);
    INSERT INTO @SearchFolderIds
    SELECT iHandbookId
    FROM dbo.m136_GetHandbookRecursive(@FolderId, @UserId, 1);
    INSERT INTO @SearchFolderIds(Id) VALUES(@FolderId);
    INSERT INTO @DocumentEntityIds (Id)
    SELECT d.iEntityId
    FROM m136_tblDocument d
        LEFT JOIN m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
    WHERE d.iHandbookId IN (SELECT Id FROM @SearchFolderIds)
        AND d.iLatestApproved = 1
    INSERT INTO @DocumentEntityIds (Id)    
    SELECT d.iEntityId
    FROM m136_relVirtualRelation v
        INNER JOIN m136_tblDocument d ON d.iDocumentId = v.iDocumentId
        INNER JOIN m136_tblHandbook h ON d.iHandbookId = h.iHandbookId
    WHERE v.iHandbookId IN (SELECT Id FROM @SearchFolderIds)
        AND d.iLatestApproved = 1
    SELECT (SELECT iDocumentId FROM m136_tblDocument WHERE iEntityId = r.iEntityId) AS iDocumentId,
        r.iItemId,
		b.strName,
		r.iPlacementId,
		r.iProcessrelationTypeId,
		b.strExtension,
		b.strDescription,
		r.iSort 
	FROM m136_relInfo r 
		JOIN m136_tblBlob b ON r.iItemId = b.iItemId
	WHERE r.iEntityId IN (SELECT Id FROM @DocumentEntityIds)
		  AND r.iRelationTypeId = 20
	ORDER BY r.iSort, b.strName;
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_FullTextSearch]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_FullTextSearch]
	-- Add the parameters for the stored procedure here
	@iSecurityId int,
	@strSearchString varchar(100),
	@iDepartmentId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
SET NOCOUNT ON
--select iEntityId FROM m136_tblMetaInfoRichText where
--contains(value, @strSearchString)
SELECT 
	DISTINCT doc.iDocumentId,
	doc.strName,
	doc.strDescription description,
	HBook.strName as strHandbookName,
	HBook.iHandbookId,
	HBook.iLevelType,
	HBook.iDepartmentId 
FROM 
	m136_tblDocument doc 
	inner join m136_tblHandbook HBook on HBook.iHandbookId=doc.iHandbookId 
	left join m136_tblMetaInfoRichText RichTextInfo on RichTextInfo.iEntityId=doc.iEntityId 
	left join m136_tblMetaInfoText TextInfo on TextInfo.iEntityId=doc.iEntityId 
WHERE 
	doc.iDeleted=0 
	AND iDraft=0 
	AND iApproved=1 
	AND (dbo.fnSecurityGetPermission(136, 462,  @iSecurityId, HBook.iHandbookId) & 0x01)>0 
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument left outer join m136_tblHandbook on m136_tblHandbook.iHandbookId=m136_tblDocument.iHandbookId 
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4) 
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, m136_tblHandbook.iHandbookId) & 0x01)>0
			AND (
				(m136_tblHandbook.iLevelType=1 AND @iDepartmentId=-1)
				or (m136_tblHandbook.iDepartmentId=@iDepartmentId AND @iDepartmentId>0)
				or @iDepartmentId=0
			)
			AND (
				--contains(RichTextInfo.value, @strSearchString)
				--OR contains(TextInfo.value,  @strSearchString)
				Doc.strName LIKE @strSearchString
				OR Doc.strDescription LIKE @strSearchString
				) 
		)

for xml auto
END
GO
/****** Object:  Table [dbo].[m136_tblSubscribe]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblSubscribe](
	[iEmployeeId] [int] NOT NULL,
	[iHandbookId] [int] NOT NULL,
	[iEmail] [int] NOT NULL,
	[iFrontpage] [int] NOT NULL,
	[iPDA] [int] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [pk_subscribe] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iHandbookId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnGetFavoriteFolders]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[m136_fnGetFavoriteFolders]
(
	@EmployeeId INT, 
	@TreatDepartmentFoldersAsFavorites BIT,
	@DepartmentId INT
)
RETURNS TABLE
AS
RETURN
(
	SELECT
		h.iHandbookId,
		CASE
			WHEN [dbo].[m136_IsForcedHandbook](@EmployeeId, h.iHandbookId) = 1 THEN 1
			ELSE 0
		END AS isForced,
		CASE
			WHEN @DepartmentId = h.iDepartmentId THEN 1
			ELSE 0
		END AS isDepartment,
		sd.iSort
	FROM
		m136_tblHandbook h
		LEFT JOIN m136_tblSubscribe sd 
			ON sd.iHandbookId = h.iHandbookId AND sd.iEmployeeId = @EmployeeId
	WHERE
		h.iDeleted = 0 
		AND ((sd.iEmployeeId = @EmployeeId AND sd.iFrontpage = 1)
			OR	([dbo].[m136_IsForcedHandbook](@EmployeeId, h.iHandbookId) = 1)
			OR	( @TreatDepartmentFoldersAsFavorites = 1 AND h.iDepartmentId = @DepartmentId))
);
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnGetAllFavoritesFoldersWithContentsAccessRecursively]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[m136_fnGetAllFavoritesFoldersWithContentsAccessRecursively]
(
	@iSecurityId INT = 0,
	@TreatDepartmentFoldersAsFavorites BIT,
	@iUserDepId INT = 0
)
RETURNS TABLE
AS
RETURN
(
	WITH RecursiveFavoriteHandbooksWithReadContents AS
	(
		SELECT
			iHandbookId
		FROM 
			[dbo].[m136_fnGetFavoriteFolders](@iSecurityId, @TreatDepartmentFoldersAsFavorites, @iUserDepId)
		WHERE
			[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, iHandbookId) = 1
		UNION ALL
		-- recursive to get all the child handbook
		SELECT 
			h.iHandbookId 
		FROM 
			[dbo].[m136_tblHandbook] h
			INNER JOIN RecursiveFavoriteHandbooksWithReadContents 
				ON	iParentHandbookId = RecursiveFavoriteHandbooksWithReadContents.iHandbookId 
					AND h.iDeleted = 0
		WHERE
			[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, h.iHandbookId) = 1
	)
	SELECT DISTINCT iHandbookId FROM RecursiveFavoriteHandbooksWithReadContents
);
GO
/****** Object:  StoredProcedure [dbo].[m136_be_VerifyDeleteFolderPermissions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.NGUYEN.MANH
-- Create date: OCT 27, 2015
-- Description:	Count number Folder and document recursive
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_VerifyDeleteFolderPermissions]
	@HandbookId INT = 0,
	@SecurityId INT = 0,
	@DeleteFolderPermission INT,
	@DeleteDocumentPermission INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @returnPermission BIT = 1;
	
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	
		INSERT INTO @AvailableChildren(iHandbookId)
		SELECT 
			iHandbookId 
		FROM 
			[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
	   
	   DECLARE @CountFolderRecursive AS INT
	   DECLARE @CountFolder AS INT
	   DECLARE @CountDocument AS INT
	   
	   SELECT @CountFolderRecursive = Count(iHandbookId)
	   FROM @AvailableChildren
	   
	   SELECT 
			@CountFolder = Count(iHandbookId)
		FROM 
			[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1)
		where dbo.[fnSecurityGetPermission]( 136, 461, @SecurityId, iHandbookId) & @DeleteFolderPermission  = @DeleteFolderPermission
		
		SELECT 
			@CountDocument = Count(iHandbookId)
		FROM 
			[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1)
		where dbo.[fnSecurityGetPermission]( 136, 462, @SecurityId, iHandbookId) & @DeleteDocumentPermission  = @DeleteDocumentPermission
		
		
		DECLARE @NumberSubFolder AS INT
		DECLARE @NumberDocument AS INT
		
		SELECT  @NumberDocument = COUNT(*)
		FROM (	
				SELECT DISTINCT 
					d.iDocumentId AS Id
				FROM 
					m136_tblDocument d
						JOIN m136_tblHandbook h 
							ON d.iHandbookId = h.iHandbookId
						JOIN @AvailableChildren ac
							ON d.iHandbookId = ac.iHandbookId
				WHERE
					d.iLatestVersion = 1
			UNION       
				SELECT 
					d.iDocumentId AS Id
				FROM 
					m136_relVirtualRelation virt 
						JOIN m136_tblDocument d
							ON virt.iDocumentId = d.iDocumentId
						JOIN m136_tblHandbook h 
							ON d.iHandbookId = h.iHandbookId
						JOIN @AvailableChildren ac
							ON virt.iHandbookId = ac.iHandbookId
				WHERE
					d.iLatestVersion = 1) AS Document
					
		SELECT 
			@NumberSubFolder = COUNT(iHandbookId)
		FROM 
			[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1)
		WHERE iHandbookId != @HandbookId
		
		IF @CountFolderRecursive = 0 OR @CountFolder != @CountFolderRecursive
			SET @returnPermission = 0;
			
		IF @NumberDocument <> 0 AND (@CountFolderRecursive = 0 OR @CountDocument != @CountFolderRecursive)
			SET @returnPermission = 0;
		
		SELECT @returnPermission
		
		SELECT @NumberDocument
		
		SELECT @NumberSubFolder
		
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ReportMostReadDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ReportMostReadDocuments]
	@HandbookId AS INT = NULL,
	@IncludeSubFolders AS BIT = 0,
	@DocumentType AS INT = NULL,
	@NumberReturn AS INT,
	@SecurityId AS INT,
	@IsTotal As	BIT = 0
AS
BEGIN
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY, strName VARCHAR(100));
	IF @HandbookId IS NOT NULL
	BEGIN
		IF @IncludeSubFolders = 1
		BEGIN
			INSERT INTO @AvailableChildren(iHandbookId)
			SELECT 
				iHandbookId 
			FROM 
				[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
		END
		ELSE
			INSERT INTO @AvailableChildren(iHandbookId) VALUES(@HandbookId);
	END
	ELSE
	BEGIN
		IF @IncludeSubFolders = 1
		BEGIN
			INSERT INTO @AvailableChildren(iHandbookId)
			SELECT 
				iHandbookId 
			FROM dbo.m136_tblHandbook
			WHERE iDeleted = 0
				  AND [dbo].[fnHandbookHasReadContentsAccess](@SecurityId, iHandbookId) = 1;
		END
		ELSE
			INSERT INTO @AvailableChildren(iHandbookId)
			SELECT 
				iHandbookId 
			FROM dbo.m136_tblHandbook
			WHERE iDeleted = 0
				  AND [dbo].[fnHandbookHasReadContentsAccess](@SecurityId, iHandbookId) = 1
				  AND iParentHandbookId IS NULL;
	END
	UPDATE ac 
	SET ac.strName = h.strName
	FROM @AvailableChildren	ac
	JOIN dbo.m136_tblHandbook h ON ac.iHandbookId = h.iHandbookId
	DECLARE @resultTable TABLE(DokId INT,Mappe NVARCHAR(200),Dokument NVARCHAR(200), Versjon INT, DocumentType INT, MostReadTotal INT, MostReadVersion INT)
	INSERT INTO @resultTable
	SELECT  d.iDocumentId AS DokId,
			h.strName AS Mappe,
			d.strName AS Dokument,
			d.iVersion AS Versjon,
			dt.Type AS DocumentType,
			0 AS MostReadTotal,
			d.iReadCount AS MostReadVersion
		FROM m136_tblDocument d
			JOIN @AvailableChildren h ON h.iHandbookId = d.iHandbookId 
			INNER JOIN m136_tblDocumentType dt ON dt.idocumenttypeid = d.idocumenttypeid
		WHERE  d.iLatestApproved = 1 
			   AND (@DocumentType IS NULL OR d.iDocumentTypeId = @DocumentType)
	UPDATE result
	SET MostReadTotal = d.iReadCount
	FROM @resultTable result 
	JOIN (SELECT SUM(iReadCount) AS iReadCount, iDocumentId FROM dbo.m136_tblDocument GROUP BY iDocumentId) d ON result.DokId = d.iDocumentId
	IF @IsTotal = 1
	BEGIN
		SELECT TOP(@NumberReturn) r.*
		FROM @resultTable r
		ORDER BY r.MostReadTotal DESC, r.MostReadVersion DESC
	END
	ELSE
	BEGIN
		SELECT TOP(@NumberReturn) r.*
		FROM @resultTable r
		ORDER BY r.MostReadVersion DESC, r.MostReadTotal DESC
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ReportDocumentsPerFolder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ReportDocumentsPerFolder]
@iParentHandbookId INT = 0,
@iSecurityId INT = 0
AS
BEGIN
	DECLARE @iHandbookId INT
	DECLARE @strName NVARCHAR(200)
	DECLARE @folderType INT
	DECLARE @iSort INT
	DECLARE @HandbookIdTable TABLE(iHandbookId INT)
	-- Do we have a specified root or do we assume we will list everything?
	IF ISNULL(@iParentHandbookId,0) = 0
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_tblHandbook WHERE iDeleted = 0 
		END
	ELSE
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_GetHandbookRecursive (@iParentHandbookId, @iSecurityId, 0)
		END 
	/* Declare some temporary tables */
	DECLARE @allApprovedDocuments TABLE(iEntityId INT, iHandbookId INT, iDocumentId INT, strName nvarchar(200), iVersion INT)
	/* Find all approved documents and latest version */
	INSERT INTO @allApprovedDocuments
	SELECT doc.iEntityId, doc.iHandbookId, doc.iDocumentId, doc.strName, doc.iVersion 
	FROM m136_tblDocument doc 
	WHERE doc.iLatestApproved = 1
		  AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, doc.iHandbookId) & 0x15) > 0
		  AND doc.iHandbookId IN (SELECT iHandbookId FROM @HandbookIdTable)
		  AND doc.iDeleted = 0
	ORDER BY doc.iDocumentId 
		/* Create temporary table to hold the end result */
	DECLARE @resultTable TABLE(iHandbookId INT, strName NVARCHAR(200), iLevel INT, TotalDocuments INT, Priority INT, Folders INT, folderType INT, iParentHandbookId INT, iSort INT)
	/* Populate result table with most data including number of valid and invalid documents */
	INSERT INTO @resultTable(iHandbookId, strName, iLevel, TotalDocuments, Priority, Folders, folderType, iParentHandbookId, iSort)
	SELECT s.iHandbookId, h.strName, h.iLevel, COUNT(s.iDocumentId), 0, 0, h.iLevelType, h.iParentHandbookId, h.iSort 
	FROM @allApprovedDocuments s join
	m136_tblHandbook h ON s.iHandbookId = h.iHandbookId 
	WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, s.iHandbookId) & 0x15) > 0
	GROUP BY s.iHandbookId, h.strName, h.iLevel, h.iLevelType, h.iParentHandbookId, h.iSort
	/* Populate table with all handbooks missing from the result set based on documents */
	INSERT INTO @resultTable (iHandbookId, strName, iLevel, TotalDocuments, Priority, Folders, folderType, iParentHandbookId, iSort)
	SELECT iHandbookId, strName, iLevel, 0, 0, 0, iLevelType, iParentHandbookId, iSort
	FROM m136_tblHandbook 
	WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0 
		  AND iHandbookId NOT IN (SELECT iHandbookId FROM @resultTable)
	      AND iHandbookId IN (SELECT iHandbookId FROM @HandbookIdTable)
	/* Set priority - This is only a helper column for reports. We will insert an extra row for all items with 
	level one. This extra row will have priority 1 and the original row will get priority 2
	The row with priority 1 will contain a summary of all folders, valid documents, invalid documents etc recursively */
	UPDATE @resultTable SET Priority = CASE iLevel WHEN 1 THEN 2 ELSE iLevel END
	/* Helper table since we will add more rows to the @resultTable, this helper table is to avoid 
	problems with a cursor on the table we will be modifying */
	DECLARE @tmpResultTable TABLE(iHandbookId INT, strName NVARCHAR(200), folderType INT, iSort INT)
	/* Populate temp table with all handbooks */
	INSERT INTO @tmpResultTable(iHandbookId, strName, iSort) 
	SELECT iHandbookId, strName, iSort FROM @resultTable
	/* Update resultable with countings of folders */
	DECLARE cur CURSOR FOR
		SELECT iHandbookId FROM @tmpResultTable
	OPEN cur 
	FETCH NEXT FROM cur INTO @iHandbookId
	WHILE @@fetch_status=0
	BEGIN
		UPDATE @resultTable SET Folders = (SELECT COUNT(*) FROM m136_tblHandbook 
											WHERE iParentHandbookId = @iHandbookId AND iDeleted = 0 AND
											(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0)
		WHERE iHandbookId = @iHandbookId AND Priority > 1
	FETCH NEXT FROM cur INTO @iHandbookId
	END
	CLOSE cur 
	DEALLOCATE cur
	/* Remove all entries in this helper table and repopulate it with handbooks for level 1 only */
	DELETE FROM @tmpResultTable
	INSERT INTO @tmpResultTable(iHandbookId, strName, folderType, iSort) 
	SELECT iHandbookId, strName, folderType, iSort FROM @resultTable WHERE iParentHandbookId IS NULL
	-- Create summary columns - Update Priorty 1 records with recursive numbers
	DECLARE cur CURSOR FOR
		SELECT iHandbookId, strName, folderType, iSort FROM @tmpResultTable
	OPEN cur
	FETCH NEXT FROM cur INTO @iHandbookId, @strName, @folderType, @iSort
	WHILE @@fetch_status=0
	BEGIN
		INSERT INTO @resultTable(iHandbookId, strName, iLevel,TotalDocuments, Priority, folderType, iSort)
			VALUES(@iHandbookId, @strName, 1, 0, 1, @folderType, @iSort);
		WITH Children AS
		(
				SELECT 
					iHandbookId 
				FROM 
					@resultTable 
				WHERE
					iHandbookId = @iHandbookId 
			UNION ALL
				SELECT 
					h.iHandbookId 
				FROM 
					@resultTable h
					INNER JOIN Children 
						ON	iParentHandbookId = Children.iHandbookId 
		)
		SELECT 
			iHandbookId 
		INTO #Folders
		FROM 
			Children
		UPDATE @resultTable SET
			TotalDocuments = (SELECT SUM(TotalDocuments) FROM @resultTable WHERE iHandbookId in (select iHandbookId FROM #Folders)),
			Folders = (SELECT COUNT(*) FROM dbo.m136_tblHandbook 
						WHERE iHandbookId IN (select iHandbookId FROM #Folders)
					   ) - 1
		WHERE iHandbookId = @iHandbookId and Priority = 1
		DROP TABLE #Folders;
	FETCH NEXT FROM cur INTO @iHandbookId, @strName, @folderType , @iSort
	END
	CLOSE cur
	DEALLOCATE cur
	-- Return the result
	SELECT * FROM @resultTable ORDER BY iSort, strName
END
GO
/****** Object:  StoredProcedure [Risk].[RemoveAnalysisMembers]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[RemoveAnalysisMembers]
	@AnalysisId INT,
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;
    DELETE Risk.AnalysisMembers 
    WHERE 
    AnalysisId = @AnalysisId
    AND EmployeeId IN (SELECT Id FROM @Items);
END
GO
/****** Object:  Table [dbo].[m147_relRegisterItemCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m147_relRegisterItemCategory](
	[iAutoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iRegisterItemId] [int] NOT NULL,
	[iModuleId] [int] NOT NULL,
	[iCategoryId] [int] NOT NULL,
	[ValueDate] [datetime] NULL,
	[ValueTall] [bigint] NULL,
	[ValueText] [varchar](200) NULL,
	[iRegisterItemValueId] [int] NULL,
	[DefaultDateValue] [datetime] NULL,
	[DefaultTallValue] [bigint] NULL,
	[DefaultTextValue] [varchar](200) NULL,
	[DefaultRegisterValueId] [int] NULL,
	[iInheritTypeId] [int] NOT NULL,
 CONSTRAINT [PK_m147_relRegisterItemCategory] PRIMARY KEY CLUSTERED 
(
	[iAutoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m147_spDeleteRegister]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spDeleteRegister]
(
	@iSecurityId INT,
	@iRegisterId INT
)
AS
BEGIN
	DECLARE @iAccess INT
	SELECT @iAccess = dbo.fnSecurityGetPermission(147, 571, @iSecurityId, @iRegisterId)
	IF (@iAccess & 8) = 8 or (@iAccess & 16) = 16
		BEGIN
			DELETE FROM m147_tblSynonym 
				   WHERE iRegisterItemValueId in (SELECT DISTINCT iRegisterItemValueId 
												  FROM m147_tblRegisterItemValue 
												  WHERE iRegisterItemId in (SELECT DISTINCT iRegisterItemId 
																			FROM m147_tblRegisterItem 
																			WHERE iRegisterId = @iRegisterId))
			DELETE FROM m147_relRegisterItemCategory 
				   WHERE iRegisterItemId in (SELECT DISTINCT iRegisterItemId 
											 FROM m147_tblRegisterItem 
											 WHERE iRegisterId = @iRegisterId)
			DELETE FROM m147_relRegisterItemItem 
				   WHERE iRegisterItemId in (SELECT DISTINCT iRegisterItemId 
											 FROM m147_tblRegisterItem 
											 WHERE iRegisterId = @iRegisterId)
			DELETE FROM m147_tblRegisterItemValue 
				   WHERE iRegisterItemId in (SELECT DISTINCT iRegisterItemId 
											 FROM m147_tblRegisterItem 
											 WHERE iRegisterId = @iRegisterId)
			DELETE FROM m147_tblRegisterItem 
				   WHERE iRegisterId = @iRegisterId
			DELETE FROM m147_tblRegister 
				   WHERE iRegisterId = @iRegisterId
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_DeleteRegisters]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_DeleteRegisters]
(
	@SecurityId INT,
	@RegisterIds  AS [dbo].[Item] READONLY
)
AS
BEGIN
	DECLARE @Id INT;
	DECLARE RegisterSet CURSOR FOR 
		SELECT Id
		FROM @RegisterIds;
	OPEN RegisterSet; 
	FETCH NEXT FROM RegisterSet INTO @Id;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		EXEC [dbo].[m147_spDeleteRegister] @SecurityId, @Id
		FETCH NEXT FROM RegisterSet INTO @Id;
	END
	CLOSE RegisterSet;
	DEALLOCATE RegisterSet;
END
GO
/****** Object:  StoredProcedure [dbo].[m147_spDeleteRegisterItem]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spDeleteRegisterItem]
(
	@iSecurityId INT,
	@iRegisterItemId INT
)
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION 
		DECLARE @iAccess INT
		DECLARE @iRegisterId INT
		SELECT @iRegisterId = iRegisterId 
		FROM m147_tblRegisterItem 
		WHERE iRegisterItemId = @iRegisterItemId
		SELECT @iAccess = dbo.fnSecurityGetPermission(147, 571, @iSecurityId, @iRegisterId)
		IF (@iAccess & 8) = 8 or (@iAccess & 16) = 16
			BEGIN
				DELETE FROM m147_relRegisterItemCategory 
					   WHERE iRegisterItemId = @iRegisterItemId
				DELETE FROM m147_relRegisterItemItem 
					   WHERE iRegisterItemId = @iRegisterItemId
				DELETE FROM m147_tblSynonym 
					   WHERE iRegisterItemValueId IN (SELECT DISTINCT iRegisterItemValueId 
													  FROM m147_tblRegisterItemValue 
													  WHERE iRegisterItemId = @iRegisterItemId)
				DELETE FROM m147_tblRegisterItemValue 
					   WHERE iRegisterItemId = @iRegisterItemId
				DELETE FROM m147_tblRegisterItem 
					   WHERE iRegisterItemId = @iRegisterItemId
			END
	COMMIT
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_DeleteRegisterItems]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_DeleteRegisterItems]
(
	@SecurityId INT,
	@RegisterItemIds  AS [dbo].[Item] READONLY
)
AS
BEGIN
	DECLARE @Id INT;
	DECLARE RegisterItemSet CURSOR FOR 
		SELECT Id
		FROM @RegisterItemIds;
	OPEN RegisterItemSet; 
	FETCH NEXT FROM RegisterItemSet INTO @Id;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		EXEC [dbo].[m147_spDeleteRegisterItem] @SecurityId, @Id
		FETCH NEXT FROM RegisterItemSet INTO @Id;
	END
	CLOSE RegisterItemSet;
	DEALLOCATE RegisterItemSet;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_VerifyUsersHavePermissionsForSpecifiedDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 07, 2015
-- Description:	Verify documents with specified permission
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_VerifyUsersHavePermissionsForSpecifiedDocuments]
 @DocumentIds AS [dbo].[Item] READONLY,
 @Permission INT,
 @UserId INT
AS
BEGIN
 SET NOCOUNT ON;
 DECLARE @CountDocumetPermission INT, @CountDoucment INT
 SELECT @CountDocumetPermission = count(iHandbookId)
 FROM dbo.m136_tblDocument doc
 JOIN @DocumentIds doc1 ON doc.iDocumentId = doc1.Id
 WHERE doc.iLatestVersion = 1
	   AND dbo.fnSecurityGetPermission (136, 462, @UserId, doc.iHandbookId) &  @Permission = @Permission
 SELECT @CountDoucment = COUNT(Id)
 FROM @DocumentIds
 IF @CountDocumetPermission = @CountDoucment
	 BEGIN
		SELECT 1;
	 END
 ELSE
 	 BEGIN
		SELECT 0;
	 END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_VerifyUserHavePermissionsOnDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 07, 2015
-- Description:	Verify documents with specified permission
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_VerifyUserHavePermissionsOnDocuments]
 @DocumentIds AS [dbo].[Item] READONLY,
 @Permission INT,
 @UserId INT
AS
BEGIN
 SET NOCOUNT ON;
 
 DECLARE @CountDocumentPermissions INT, @CountDocuments INT
 
 SELECT @CountDocumentPermissions = COUNT(iHandbookId)
 FROM dbo.m136_tblDocument doc
 JOIN @DocumentIds doc1 ON doc.iDocumentId = doc1.Id
 WHERE doc.iLatestVersion = 1
	   AND dbo.fnSecurityGetPermission (136, 462, @UserId, doc.iHandbookId) &  @Permission = @Permission
 
 SELECT @CountDocuments = COUNT(Id)
 FROM @DocumentIds
 
 IF @CountDocumentPermissions = @CountDocuments
	 BEGIN
		SELECT 1;
	 END
 ELSE
 	 BEGIN
		SELECT 0;
	 END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateEmployeeRoles]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateEmployeeRoles]
	@iEmployeeId INT,
	@EmployeeSecGroups AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tEmployeeId INT, @tSecGroupId INT;
	DECLARE EmployeeSecGroups CURSOR FOR 
		SELECT Id
			, Value
		FROM @EmployeeSecGroups;
		
	OPEN EmployeeSecGroups; 
	FETCH NEXT FROM EmployeeSecGroups INTO @tEmployeeId, @tSecGroupId;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM [dbo].[relEmployeeSecGroup] resg 
			WHERE resg.iEmployeeId = @tEmployeeId 
				AND resg.iSecGroupId = @tSecGroupId)
		BEGIN
			INSERT INTO [dbo].[relEmployeeSecGroup]
			(
			    iEmployeeId,
			    iSecGroupId
			)
			VALUES
			(
			    @tEmployeeId,
			    @tSecGroupId
			)
		END
		FETCH NEXT FROM EmployeeSecGroups INTO @tEmployeeId, @tSecGroupId;
	END
	CLOSE EmployeeSecGroups;
	DEALLOCATE EmployeeSecGroups;
		
	DELETE [dbo].[relEmployeeSecGroup] WHERE iEmployeeId = @iEmployeeId
	AND iSecGroupId NOT IN (SELECT Value FROM @EmployeeSecGroups);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDepartmentResponsibles]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 17, 2015
-- Description:	Update department leaders
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDepartmentResponsibles] 
	@iDepartmentId INT,
	@iResponsibleType INT,
	@DepartmentResponsibles AS [dbo].[Item] READONLY 
AS
BEGIN
	SET NOCOUNT ON;
    DECLARE @tDepartmentId INT, @tEmployeeId INT, @tResponsibleTypeId INT;
	DECLARE DepartmentResponsibles CURSOR FOR 
		SELECT Id,
			@iDepartmentId,
			@iResponsibleType
		FROM @DepartmentResponsibles;
	OPEN DepartmentResponsibles; 
	FETCH NEXT FROM DepartmentResponsibles INTO @tEmployeeId, @tDepartmentId, @tResponsibleTypeId;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM [dbo].[DepartmentResponsibles] 
			WHERE DepartmentId = @tDepartmentId
				AND EmployeeId = @tEmployeeId
				AND ResponsibleTypeId = @tResponsibleTypeId)
		BEGIN
			DECLARE @MaxId INT;
			SELECT @MaxId = MAX(dr.Id) FROM dbo.DepartmentResponsibles dr;
			SET @MaxId = ISNULL(@MaxId, 0);
			INSERT INTO dbo.DepartmentResponsibles
			(
				Id,
				DepartmentId,
				EmployeeId,
				ResponsibleTypeId
			)
			VALUES
			(
				(@MaxId + 1),
				@tDepartmentId,
				@tEmployeeId,
				@tResponsibleTypeId 
			)
		END
		FETCH NEXT FROM DepartmentResponsibles INTO @tEmployeeId, @tDepartmentId, @tResponsibleTypeId;
	END
	CLOSE DepartmentResponsibles;
	DEALLOCATE DepartmentResponsibles;
	DELETE dbo.DepartmentResponsibles WHERE DepartmentId = @iDepartmentId
	AND ResponsibleTypeId = @iResponsibleType
	AND EmployeeId NOT IN (SELECT Id FROM @DepartmentResponsibles);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetUsersHavePermissionsForSpecifiedDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: NOV 19, 2015
-- Description:	Get all user who have permission write on all document which is selected
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetUsersHavePermissionsForSpecifiedDocuments]
 @DocumentIds AS [dbo].[Item] READONLY,
 @Permission INT
AS
BEGIN
 SET NOCOUNT ON;
	DECLARE @Folders TABLE
	(
		Id int PRIMARY KEY
	)
 INSERT INTO @Folders 
 SELECT DISTINCT iHandbookId
 FROM dbo.m136_tblDocument doc
 JOIN @DocumentIds doc1 ON doc.iDocumentId = doc1.Id
 WHERE doc.iLatestVersion = 1
 DECLARE @iFolderId INT;
 DECLARE @Employee TABLE
	(
		iEmployeeId int PRIMARY KEY
	)
 DECLARE @Employee1 TABLE
	(
		iEmployeeId int PRIMARY KEY
	)
 DECLARE Folders CURSOR FOR 
  SELECT Id
  FROM @Folders;
 OPEN Folders; 
 FETCH NEXT FROM Folders INTO @iFolderId;
	 INSERT INTO @Employee
	 SELECT te.iEmployeeId
	 FROM dbo.tblEmployee te 
	 WHERE dbo.fnSecurityGetPermission (136, 462, te.iEmployeeId, @iFolderId) &  @Permission = @Permission
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO @Employee1
		SELECT e.iEmployeeId
		FROM @Employee e
		WHERE dbo.fnSecurityGetPermission (136, 462, e.iEmployeeId, @iFolderId) &  @Permission = @Permission;
		DELETE @Employee
		INSERT INTO	@Employee
		SELECT 	iEmployeeId
		FROM @Employee1	
		DELETE @Employee1
		FETCH NEXT FROM Folders INTO @iFolderId;
	 END
 CLOSE Folders;
 DEALLOCATE Folders;
 SELECT te.iEmployeeId, te.strFirstName, te.strLastName, te.strEmail, te.strLoginName, te.iDepartmentId
 FROM dbo.tblEmployee te
 JOIN @Employee e ON e.iEmployeeId = te.iEmployeeId
END
GO
/****** Object:  Table [dbo].[relEmployeeDepartment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relEmployeeDepartment](
	[iEmployeeId] [int] NOT NULL,
	[iDepartmentId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iDepartmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteEmployees]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteEmployees]
	@Employees AS [dbo].[Item] READONLY
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            SET NOCOUNT ON;
            DELETE relEmployeePosition WHERE iEmployeeId IN (SELECT Id FROM @Employees);
            DELETE relEmployeeSecGroup WHERE iEmployeeId IN (SELECT Id FROM @Employees);
            DELETE relEmployeeDepartment WHERE iEmployeeId IN (SELECT Id FROM @Employees);
            DELETE tblEmployee WHERE tblEmployee.iEmployeeId IN (SELECT Id FROM @Employees);
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  Table [dbo].[tblBlob]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblBlob](
	[iAutoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iItemId] [int] NOT NULL,
	[iType] [int] NOT NULL,
	[iSize] [int] NOT NULL,
	[iHeight] [int] NOT NULL,
	[iWidth] [int] NOT NULL,
	[strFileName] [varchar](1000) NOT NULL,
	[strContentType] [varchar](400) NOT NULL,
	[strExtension] [varchar](10) NOT NULL,
	[imgContent] [image] NULL,
 CONSTRAINT [PK__tblBlob_iItemId_iType] PRIMARY KEY CLUSTERED 
(
	[iItemId] ASC,
	[iType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [IX_tblBlob] UNIQUE NONCLUSTERED 
(
	[iAutoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetRelatedAttachments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_GetRelatedAttachments]
	@iEntityId int,
	@iSecurityId int,
	@RelationTypes int
AS
BEGIN
	IF @RelationTypes = 2
		BEGIN
			SELECT r.iItemId, dbo.fnArchiveGetFileName(@iSecurityId, r.iItemId, '') strName
				  ,r.iPlacementId,r.iProcessrelationTypeId,isnull(b.strExtension,'ukjent') AS strExtension
				FROM m136_relInfo r 
				LEFT JOIN tblBlob b ON r.iItemId=b.iItemId 
				WHERE iEntityId = @iEntityId AND r.iRelationTypeId = 2 
		END
	ELSE IF @RelationTypes = 20
		BEGIN
			SELECT r.iItemId,b.strName
				FROM m136_relInfo r JOIN m136_tblBlob b ON r.iItemId = b.iItemId
				WHERE r.iEntityId = @iEntityId AND r.iRelationTypeId = 20 
		END
	ELSE IF @RelationTypes = 50
		BEGIN
			SELECT r.iItemId,dbo.fnArchiveGetImageName(@iSecurityId, r.iItemId, '') AS strName
					,ISNULL(r.iPlacementId,0) AS iPlacementId,r.iProcessrelationTypeId
					,ISNULL(r.iScaleDirId,0) AS iScaleDirId
					,ISNULL(r.iVJustifyId,0) AS iVJustifyId ,ISNULL(r.iHJustifyId,0) AS iHJustifyId
					,ISNULL(r.iSize,0) AS iSize, ISNULL(r.strCaption,'') AS strCaption
					,ISNULL(r.iSort,0) AS iSort, ISNULL(r.strURL,'') AS strURL,ISNULL(r.iWidth,0) AS iWidth
					,ISNULL(r.iHeight,0) AS iHeight, ISNULL(r.iNewWindow,0) AS iNewWindow
					,ISNULL(r.iThumbWidth,0) AS iThumbWidth, ISNULL(r.iThumbHeight,0) AS iThumbHeight, r.iRelationTypeId
				FROM m136_relInfo r 
				JOIN m136_tblBlob b on r.iItemId = b.iItemId 
				WHERE r.iEntityId = @iEntityId AND r.iRelationTypeId = 50 
		END
	ELSE IF @RelationTypes = 5
		BEGIN
			SELECT r.iItemId, r.iScaleDirId, r.iPlacementId, r.iVJustifyId, 
					r.iHJustifyId, r.iSize, r.strCaption, r.iSort, r.strURL, 
					r.iWidth, r.iHeight, r.iNewWindow,
					dbo.fnArchiveGetImageName(@iSecurityId, r.iItemId, '') strName,
					r.iThumbWidth, r.iThumbHeight, r.iRelationTypeId
				FROM m136_relInfo r 
				WHERE iEntityId = @iEntityId AND r.iRelationTypeId = 5 
		END				
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFileOrImageContents]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFileOrImageContents]
	@ItemId INT,
	@Thumbnail BIT
AS
BEGIN
	SELECT
		CASE i.iInformationTypeId
			WHEN 5 THEN 0
			ELSE 1
		END as isFile,
		CASE i.iInformationTypeId
			WHEN 5 THEN 
					CASE @Thumbnail
						WHEN 1 THEN im.strThumbURL
						ELSE im.strPictureURL
					END
			ELSE f.strFileName
		END AS strFileName,
		b.strContentType,
		b.imgContent
	FROM 
		tblItem i 
	LEFT OUTER JOIN tblFile f 
		ON f.iItemId = i.iItemId
	LEFT OUTER JOIN tblImage im 
		ON im.iItemId = i.iItemId 
	INNER JOIN tblBlob b 
		ON b.iItemId = i.iItemId 
		AND (
				(i.iInformationTypeId = 2 AND b.iType = 20)
				OR
				(@Thumbnail = 1 AND b.iType = 51)
				OR
				(@Thumbnail = 0 AND b.iType = 50)
			)
	WHERE 
		i.iItemId = @ItemId
END
GO
/****** Object:  Table [dbo].[tblApplication]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblApplication](
	[iApplicationId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
	[iMajorVersion] [int] NOT NULL,
	[iMinorVersion] [int] NOT NULL,
	[iBuildVersion] [int] NOT NULL,
	[iActive] [int] NOT NULL,
	[iHasAdmin] [int] NOT NULL,
	[strAdminIconURL] [varchar](50) NOT NULL,
	[strAdminEntryPage] [varchar](200) NOT NULL,
 CONSTRAINT [PK__tblApplication_iApplicationId] PRIMARY KEY CLUSTERED 
(
	[iApplicationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tblAdminMenu]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblAdminMenu](
	[iEntityId] [int] NOT NULL,
	[iParentEntityId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
	[strURL] [varchar](300) NOT NULL,
	[strIcon] [varchar](300) NOT NULL,
	[strIcon2] [varchar](300) NOT NULL,
	[strBgImage] [varchar](300) NOT NULL,
	[strTarget] [varchar](50) NOT NULL,
	[iActive] [int] NOT NULL,
	[iChildCount] [int] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK__tblAdminMenu_iEntityId] PRIMARY KEY CLUSTERED 
(
	[iEntityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblDocumentLock]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblDocumentLock](
	[iLockId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iEntityId] [int] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtmLocked] [datetime] NOT NULL,
 CONSTRAINT [PK_m136_tblDocumentLock] PRIMARY KEY CLUSTERED 
(
	[iLockId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_ValidateDocumentExistence]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_ValidateDocumentExistence]
(
	@SecurityId INT,
	@DocumentIds VARCHAR(8000)
)
AS
BEGIN
	DECLARE @TblDocumentId TABLE    
	(
		Id  INT
	)
	INSERT INTO @TblDocumentId
	SELECT ELEMENT FROM [dbo].[fnSplit_Gastro](@DocumentIds,',')
	SELECT DocumentId =	s.iDocumentId, 
		[Version] = s.iVersion, 
		ApprovedDate = s.dtmApproved, 
		IsDeleted = s.iDeleted
	FROM @TblDocumentId t 
	INNER JOIN 
	(
		SELECT iDocumentId, iLatestVersion, iLatestApproved, iVersion, dtmApproved, iDeleted 
		FROM dbo.m136_tblDocument 
		WHERE iLatestApproved = 1
		AND (dbo.fnSecurityGetPermission(136, 462, @SecurityId, iHandbookId)&1)=1
		AND iDeleted = 0
		AND dtmPublish <= GETDATE()
	) s 
	ON s.iDocumentId = t.Id
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetChildCount]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: SEP 28. 2015
-- Description:	Get number of documents and folders of a folder
-- =============================================
CREATE FUNCTION [dbo].[fn136_GetChildCount] 
(
	@iSecurityId INT,
	@iHandbookId INT,
	@bShowDocumentsInTree BIT
)
RETURNS INT
AS
BEGIN
	
	DECLARE @ReturnVal INT

	IF (@bShowDocumentsInTree = 0)
	BEGIN
		SELECT @ReturnVal = COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId = @iHandbookId AND iDeleted = 0 
			AND (dbo.fnSecurityGetPermission(136, 461, 1, iHandbookId) & 0x11) > 0;
    END
    ELSE
    BEGIN
		SET @ReturnVal = 
		      (SELECT COUNT(d.iDocumentId) 
					FROM m136_tblDocument d WHERE d.iHandbookId = @iHandbookId
						AND d.iLatestApproved = 1
						AND d.iApproved = 1
						AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 1) = 1 )
			+ (SELECT COUNT(d.iDocumentId) 
					FROM m136_tblDocument d INNER JOIN m136_relVirtualRelation v ON v.iHandbookId = @iHandbookId
						AND d.iDocumentId = v.iDocumentId
						AND d.iLatestApproved = 1
						AND iApproved = 1
						AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 1) = 1 
				)
			+ (SELECT COUNT(iHandbookId) 
					FROM m136_tblHandbook WHERE iParentHandbookId = @iHandbookId 
						AND iDeleted = 0 
						AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId) & 0x11) > 0);
    END
	
	RETURN @ReturnVal;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_be_GetChildCount]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 05. 2015
-- Description:	Get number of documents and folders of a folder
-- =============================================
CREATE FUNCTION [dbo].[fn136_be_GetChildCount] 
(
	@iSecurityId INT,
	@iHandbookId INT,
	@bShowDocumentsInTree BIT
)
RETURNS INT
AS
BEGIN
	
	DECLARE @ReturnVal INT = 0;

	IF (@bShowDocumentsInTree = 0)
	BEGIN
		SELECT @ReturnVal = COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId = @iHandbookId 
			AND iDeleted = 0 
			AND (dbo.fnSecurityGetPermission(136, 461, 1, iHandbookId) & 0x11) > 0;
    END
    ELSE
    BEGIN
		SET @ReturnVal = 
		      (SELECT COUNT(d.iDocumentId) 
					FROM m136_tblDocument d WHERE d.iHandbookId = @iHandbookId
						AND d.iLatestVersion = 1
						AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 1) = 1 )
			+ (SELECT COUNT(d.iDocumentId) 
					FROM m136_tblDocument d INNER JOIN m136_relVirtualRelation v ON v.iHandbookId = @iHandbookId
						AND d.iDocumentId = v.iDocumentId
						AND d.iLatestVersion = 1
						AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 1) = 1 
				)
			+ (SELECT COUNT(iHandbookId) 
					FROM m136_tblHandbook WHERE iParentHandbookId = @iHandbookId 
						AND iDeleted = 0 
						AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId) & 0x11) > 0);
    END
	
	RETURN @ReturnVal;
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnExpireStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[m136_fnExpireStatus] (@dtmPublishUntil datetime, @today datetime, @daylimit int)
RETURNS int AS  
BEGIN 
declare @returnThis int
select @returnThis =
	case 
		when datediff(d, @today, @dtmPublishUntil) <= 0 then 0
		when datediff(d, @today, @dtmPublishUntil) > 0 AND datediff(d, @today, @dtmPublishUntil)<=@daylimit then 1
		when datediff(d, @today, @dtmPublishUntil) > @daylimit then 2
	end
return @returnThis
END
GO
/****** Object:  Table [dbo].[m136_ExportJob]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_ExportJob](
	[Id] [uniqueidentifier] NOT NULL,
	[ChapterId] [int] NULL,
	[UserIdentityId] [int] NOT NULL,
	[CreatedDate] [datetime] NULL,
	[FilePath] [varchar](1000) NULL,
	[PrintTypeJob] [int] NULL,
	[PrintSubFolder] [bit] NULL,
	[ProcessStatus] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[Method] [varchar](200) NULL,
	[TemplateName] [varchar](1000) NULL,
 CONSTRAINT [PK_PrintJob] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetExportJobs]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetExportJobs] 
	@ProcessStatus INT
AS
BEGIN
	SELECT E.strFirstName + ' ' + E.strLastName AS Fullname, PJ.FilePath AS URL, E.strEmail AS Email, PJ.Method, PJ.TemplateName, PJ.ChapterId, 
		PJ.PrintSubFolder, PJ.Id, PJ.CreatedDate, PJ.UserIdentityId, HB.strName AS ChapterName
	FROM [dbo].[m136_ExportJob] PJ
		INNER JOIN dbo.tblEmployee E ON E.iEmployeeId = PJ.UserIdentityId
		INNER JOIN dbo.m136_tblHandbook HB ON HB.iHandbookId = PJ.ChapterId
		WHERE PJ.ProcessStatus = @ProcessStatus
END
GO
/****** Object:  StoredProcedure [dbo].[m136_DropForeignKeyTable]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_DropForeignKeyTable]
@TableName NVARCHAR(MAX),
@ForeignKeyName NVARCHAR(MAX)
AS
BEGIN
	DECLARE @FullForeignKey NVARCHAR(MAX)
	DECLARE meta_cursor CURSOR FOR
	SELECT CONSTRAINT_NAME 
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
	WHERE CONSTRAINT_NAME LIKE @ForeignKeyName + '%'
		  AND TABLE_NAME = @TableName
	DECLARE @sql NVARCHAR(MAX)
	OPEN meta_cursor;
	FETCH NEXT FROM meta_cursor 
	INTO @FullForeignKey;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @FullForeignKey IS NOT NULL
		BEGIN
			SET @sql = N'ALTER TABLE dbo.' + @TableName + ' DROP CONSTRAINT ['+@FullForeignKey+N']'
			EXEC(@sql)
		END
		FETCH NEXT FROM meta_cursor 
		INTO @FullForeignKey;
	END 
	CLOSE meta_cursor;
	DEALLOCATE meta_cursor;
END
GO
/****** Object:  Table [Deviation].[ServiceAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Deviation].[ServiceAreas](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Name] [nvarchar](150) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK_Deviation_ServiceAreas] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[SearchTermTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[SearchTermTable] AS TABLE(
	[Term] [varchar](900) NULL
)
GO
/****** Object:  StoredProcedure [dbo].[SearchAllTables]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[SearchAllTables]
(
    @SearchStr nvarchar(100)
)
AS
BEGIN

-- Copyright © 2002 Narayana Vyas Kondreddi. All rights reserved.
-- Purpose: To search all columns of all tables for a given search string
-- Written by: Narayana Vyas Kondreddi
-- Site: http://vyaskn.tripod.com
-- Tested on: SQL Server 7.0 and SQL Server 2000
-- Date modified: 28th July 2002 22:50 GMT

DECLARE @Results TABLE(ColumnName nvarchar(370), ColumnValue nvarchar(3630))

SET NOCOUNT ON

DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
SET  @TableName = ''
SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')

WHILE @TableName IS NOT NULL
BEGIN
    SET @ColumnName = ''
    SET @TableName = 
    (
        SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))
        FROM    INFORMATION_SCHEMA.TABLES
        WHERE       TABLE_TYPE = 'BASE TABLE'
            AND QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName
            AND OBJECTPROPERTY(
                    OBJECT_ID(
                        QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
                         ), 'IsMSShipped'
                           ) = 0
    )

    WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)
    BEGIN
        SET @ColumnName =
        (
            SELECT MIN(QUOTENAME(COLUMN_NAME))
            FROM    INFORMATION_SCHEMA.COLUMNS
            WHERE       TABLE_SCHEMA    = PARSENAME(@TableName, 2)
                AND TABLE_NAME  = PARSENAME(@TableName, 1)
                AND DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar')
                AND QUOTENAME(COLUMN_NAME) > @ColumnName
        )

        IF @ColumnName IS NOT NULL
        BEGIN
            INSERT INTO @Results
            EXEC
            (
                'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) 
                FROM ' + @TableName + ' (NOLOCK) ' +
                ' WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2
            )
        END
    END 
END

SELECT ColumnName, ColumnValue FROM @Results
END
GO
/****** Object:  Table [Risk].[SchemaChanges]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [Risk].[SchemaChanges](
	[MajorReleaseNumber] [varchar](5) NULL,
	[MinorReleaseNumber] [varchar](5) NULL,
	[BuildReleaseNumber] [varchar](5) NULL,
	[RevisionReleaseNumber] [varchar](5) NULL,
	[ScriptName] [varchar](50) NULL,
	[Description] [nvarchar](500) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [Deviation].[SchemaChanges]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [Deviation].[SchemaChanges](
	[MajorReleaseNumber] [varchar](5) NULL,
	[MinorReleaseNumber] [varchar](5) NULL,
	[BuildReleaseNumber] [varchar](5) NULL,
	[RevisionReleaseNumber] [varchar](5) NULL,
	[ScriptName] [varchar](50) NULL,
	[Description] [nvarchar](500) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SchemaChanges]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SchemaChanges](
	[MajorReleaseNumber] [varchar](5) NULL,
	[MinorReleaseNumber] [varchar](5) NULL,
	[BuildReleaseNumber] [varchar](5) NULL,
	[RevisionReleaseNumber] [varchar](5) NULL,
	[ScriptName] [varchar](50) NULL,
	[Description] [nvarchar](500) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMetatagsByRegisterItemId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetMetatagsByRegisterItemId]
(
	@SecurityId INT,
	@RegisterItemId INT
)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT MetatagValue
	FROM 
	(
		SELECT DISTINCT dbo.m147_fnGetItemValue(relItemItem.iAutoId) as MetatagValue
		FROM 
			m136_tblDocument doc
			LEFT OUTER JOIN m147_relRegisterItemItem relItemItem 
				ON doc.iDocumentId = relItemItem.iItemId AND (relItemItem.iRegisterItemId = @RegisterItemId AND relItemItem.iModuleId=136) 							
		WHERE doc.iLatestApproved = 1
			AND doc.dtmPublish <= GETDATE()
			AND relItemItem.iAutoId IS NOT NULL
			AND (dbo.fnSecurityGetPermission(136, 462, @SecurityId, doc.iHandbookId)&1)=1
	)AS [Data]
	ORDER BY MetatagValue
END
GO
/****** Object:  Table [dbo].[MessageTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MessageTemplate](
	[TemplateId] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[ModuleId] [int] NULL,
 CONSTRAINT [MessageTemplate_Framework_PK] PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[MenuSortOrder]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[MenuSortOrder] AS TABLE(
	[Id] [int] NOT NULL,
	[SortOrder] [int] NOT NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[MenuPermission]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[MenuPermission] AS TABLE(
	[Id] [int] NULL,
	[Type] [int] NULL
)
GO
/****** Object:  StoredProcedure [dbo].[MakeSureObjectExists]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MakeSureObjectExists]	
    @ObjectName sysname
    , @ObjectType varchar(5) = 'P' -- P: procedure, V: view
		-- FN: scalar-valued function, IF: inline table-valued function, TF: multi-statement table-valued function
    , @Permission varchar(255) = null
    , @RoleOrUser varchar(255) = null
AS
BEGIN	
	SET NOCOUNT ON;
	DECLARE @ObjectTypeStr varchar(50), @ObjectBody NVarChar(200), @Sql NVarChar(max);
	IF (@ObjectType = 'P')
		SELECT @ObjectTypeStr = 'PROCEDURE', @ObjectBody = 'AS SET NOCOUNT ON;';
	ELSE IF (@ObjectType = 'FN')
		SELECT @ObjectTypeStr = 'FUNCTION', @ObjectBody = '() RETURNS Int AS BEGIN RETURN 1 END;';
	ELSE IF (@ObjectType = 'IF')
		SELECT @ObjectTypeStr = 'FUNCTION', @ObjectBody = '() RETURNS TABLE AS RETURN (SELECT 0 AS [id]);';
	ELSE IF (@ObjectType = 'TF')
		SELECT @ObjectTypeStr = 'FUNCTION', @ObjectBody = '() RETURNS @Result TABLE([id] Int) AS BEGIN RETURN END;';
	ELSE IF (@ObjectType = 'V')
		SELECT @ObjectTypeStr = 'VIEW', @ObjectBody = 'AS SELECT 1 AS [ABC]';
	SELECT @Sql = 'IF (OBJECT_ID(N''' + @ObjectName + ''', ''' + @ObjectType + ''') IS NULL) '
		+ 'EXEC(''' + 'CREATE ' + @ObjectTypeStr + ' ' + @ObjectName + ' ' + @ObjectBody + ''')';
	PRINT @Sql;
	EXEC (@Sql);
	IF (@Permission IS NOT NULL AND @RoleOrUser IS NOT NULL)
	BEGIN
		SELECT @Sql = 'GRANT ' + @Permission + ' ON ' + @ObjectName + ' TO ' + @RoleOrUser;
		EXEC (@Sql);
		PRINT @Sql;
	END;
END
GO
/****** Object:  Table [dbo].[m151_Status]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Status](
	[Id] [int] NOT NULL,
	[StatusName] [nvarchar](150) NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_Status] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sortering av postene' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'm151_Status', @level2type=N'COLUMN',@level2name=N'Sort'
GO
/****** Object:  Table [dbo].[m151_Responsible]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Responsible](
	[Id] [uniqueidentifier] NOT NULL,
	[EmployeeId] [int] NULL,
	[PositionId] [int] NULL,
	[AreaId] [uniqueidentifier] NULL,
	[CategoryId] [uniqueidentifier] NULL,
	[DeviationCategoryId] [uniqueidentifier] NULL,
	[DeviationTypeId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_m151_Responsible] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_ReportList]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_ReportList](
	[ReportIdent] [bigint] IDENTITY(1,1) NOT NULL,
	[ReportPath] [nvarchar](100) NULL,
	[ReportName] [nvarchar](150) NULL,
	[ReportLocation] [nvarchar](50) NULL,
	[ReportSort] [int] NULL,
 CONSTRAINT [PK_m151_ReportList] PRIMARY KEY CLUSTERED 
(
	[ReportIdent] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_Process]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Process](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProcessName] [nvarchar](150) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_Priority]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_Priority](
	[Id] [int] NOT NULL,
	[PriorityName] [nvarchar](150) NULL,
	[Imgpath] [nvarchar](50) NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_Priority] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_OptionsRisk]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_OptionsRisk](
	[OptionValue] [uniqueidentifier] NOT NULL,
	[OptionText] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_m151_OptionsRisk] PRIMARY KEY CLUSTERED 
(
	[OptionValue] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_OptionsConsecvense]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_OptionsConsecvense](
	[OptionValue] [uniqueidentifier] NOT NULL,
	[OptionText] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_m151_OptionsConsecvense] PRIMARY KEY CLUSTERED 
(
	[OptionValue] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationType](
	[Id] [uniqueidentifier] NOT NULL,
	[DeviationTypeName] [nvarchar](150) NULL,
	[DeviationTypeDesc] [text] NULL,
	[DeviationCategoryId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_m151_DeviationType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationTaskStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationTaskStatus](
	[StatusId] [int] NOT NULL,
	[StatusName] [nvarchar](100) NOT NULL,
	[Sort] [int] NULL,
 CONSTRAINT [PK_m151_DeviationTaskStatus] PRIMARY KEY CLUSTERED 
(
	[StatusId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[m151_DeviationTask]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m151_DeviationTask](
	[DeviationTaskId] [uniqueidentifier] NOT NULL,
	[DeviationId] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](300) NOT NULL,
	[Description] [nvarchar](max) NOT NULL,
	[ResponsibleId] [int] NULL,
	[ResponsibleName] [nvarchar](250) NOT NULL,
	[ResponsibleEmail] [nvarchar](500) NOT NULL,
	[ExecutionDeadline] [datetime] NOT NULL,
	[TaskStatusId] [int] NOT NULL,
 CONSTRAINT [PK_m151_DeviationTask] PRIMARY KEY CLUSTERED 
(
	[DeviationTaskId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMetadataOfChapter]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetMetadataOfChapter]
	@UserId INT,
	@HandbookId INT
AS
BEGIN
	SELECT
        DISTINCT(ric.iRegisterItemId),
		r.iRegisterId,
		r.strName AS strRegisterName,
		ri.strName AS strName,
		dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) AS iAccess
	FROM
		m147_relRegisterItemCategory ric
			INNER JOIN m147_tblRegisterItem ri ON ric.iRegisterItemId = ri.iRegisterItemId
			INNER JOIN m147_tblRegister r ON ri.iRegisterId = r.iRegisterId
	WHERE
		iModuleId = 136
		AND iCategoryId = @HandbookId
		AND ric.iInheritTypeId IN (1, 2, 3, 5)
		AND dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) & 0x01 = 0x01
	ORDER BY
		iRegisterId, iRegisterItemId
END
GO
/****** Object:  Table [dbo].[m136_relDocumentTypeInfo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_relDocumentTypeInfo](
	[iDocumentTypeInfoId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iDocumentTypeId] [int] NOT NULL,
	[iMetaInfoTemplateRecordsId] [int] NOT NULL,
	[iSort] [int] NOT NULL,
	[iDeleted] [int] NOT NULL,
	[iShowOnPDA] [int] NOT NULL,
	[iMandatory] [int] NOT NULL,
	[iMaximized] [int] NOT NULL,
 CONSTRAINT [PK__m136_rel__91CCF74B0169315C] PRIMARY KEY CLUSTERED 
(
	[iDocumentTypeInfoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentData]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentData]
(
	@SecurityId INT,
	@DocumentId INT
)
AS
BEGIN
	DECLARE @EntityId INT,
		@DocumentTypeId INT
	DECLARE @Document TABLE
	(
		EntityId INT NOT NULL,
		DocumentId INT NULL,
		[Version] INT NOT NULL,
		DocumentTypeId INT NOT NULL,
		HandbookId INT NOT NULL,
		Name VARCHAR(200) NOT NULL,
		[Description] VARCHAR(2000) NOT NULL,
		CreatedbyId INT NOT NULL,
		CreatedDate DATETIME NOT NULL,
		Author VARCHAR(200) NOT NULL,
		ApprovedById INT NOT NULL,
		ApprovedDate DATETIME NULL,
		ApprovedBy VARCHAR(200) NOT NULL
	)
	INSERT INTO @Document
	EXEC [dbo].[m136_GetLatestDocumentById] @SecurityId, @DocumentId
	SELECT @EntityId = EntityId,
		@DocumentTypeId = DocumentTypeId
	FROM @Document
	--Get Document Content
	SELECT	InfoTypeId = mi.iInfoTypeId, 
			FieldName = mi.strName, 
			FieldDescription = mi.strDescription,
			InfoId = COALESCE (mit.iMetaInfoTextId, mid.iMetaInfoDateId, mii.iMetaInfoNumberId, mir.iMetaInfoRichTextId),
			NumberValue = mii.value, 
			DateValue = mid.value, 
			TextValue = mit.value, 
			RichTextValue = mir.value,                            
			FieldId = mi.iMetaInfoTemplateRecordsId, 
			FieldProcessType = mi.iFieldProcessType, 
			Maximized = rdi.iMaximized
	FROM [dbo].m136_tblMetaInfoTemplateRecords mi
		 JOIN [dbo].m136_relDocumentTypeInfo rdi 
			ON rdi.iDocumentTypeId = @DocumentTypeId 
			   AND rdi.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoDate mid 
			ON mid.iEntityId = @EntityId 
			   AND mid.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoNumber mii 
			ON mii.iEntityId = @EntityId 
			   AND mii.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoText mit 
			ON mit.iEntityId = @EntityId 
			   AND mit.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoRichText mir 
			ON mir.iEntityId = @EntityId 
			   AND mir.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
	WHERE rdi.iDeleted = 0
	ORDER BY rdi.iSort
	--Get Document Attachment
	SELECT ItemId = r.iItemId,
		   Name = b.strName,
		   FieldId = r.iPlacementId
	FROM m136_relInfo r 
		 JOIN m136_tblBlob b 
			ON r.iItemId = b.iItemId
	WHERE r.iEntityId = @EntityId 
		  AND r.iRelationTypeId IN (20, 2, 50)
	--Get Document Related
	SELECT Name = d.strName, 
		   DocumentId = d.iDocumentId,
		   FieldId = r.iPlacementId
	FROM m136_relInfo r
		JOIN m136_tblDocument d 
			ON	r.iItemId = d.iDocumentId 
				AND d.iLatestApproved = 1
	WHERE	r.iEntityId = @EntityId 
			AND r.iRelationTypeId = 136
	ORDER BY r.iSort
	--Get Document Info
	SELECT * FROM @Document
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ReportDocumentUpdatedOverview]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ReportDocumentUpdatedOverview]
	@HandbookId AS INT,
	@SecurityId AS INT,
	@DateFrom DATETIME = null,
	@DateTo DATETIME = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result SETs from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @EntityId INT
	DECLARE @resultTable TABLE(iEntityId INT NOT NULL PRIMARY KEY, iDocId INT, iHandbookId INT, strName NVARCHAR(200), iLevelType INT, 
	strDocName NVARCHAR(200), iVersion INT, DocumentType INT, strChanges NVARCHAR(MAX), strTargetGroup NVARCHAR(MAX))
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @AvailableChildren(iHandbookId)
	SELECT 
		iHandbookId 
	FROM 
		[dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
	INSERT INTO @resultTable(iEntityId, iDocId, iHandbookId , iVersion, strDocName  ) 
	SELECT  d.iEntityId, d.iDocumentId, d.iHandbookId ,  d.iVersion , d.strName 
			FROM m136_tblDocument d
				JOIN @AvailableChildren ac
					ON d.iHandbookId = ac.iHandbookId
				WHERE d.iApproved = 1 and d.dtmPublish >= @DateFrom and 
				d.dtmPublish < @DateTo		
	DELETE
	FROM @resultTable
	WHERE iEntityId NOT IN ( SELECT MAX(iEntityId)
							  FROM @resultTable
							  GROUP BY iDocId)
	DECLARE curDocumentId CURSOR FOR
	SELECT iEntityId FROM @resultTable
	OPEN curDocumentId
	FETCH NEXT FROM curDocumentId INTO @EntityId
	WHILE @@FETCH_STATUS =0
	BEGIN		
		DECLARE @HandbookName NVARCHAR(200) 
		DECLARE @LevelType INT
		DECLARE @Changes NVARCHAR(MAX)
		DECLARE @TargetGroup NVARCHAR(MAX)
		DECLARE @DocumentType INT
		SELECT @HandbookName = (SELECT strName FROM m136_tblHandbook WHERE iHandbookId = (SELECT iHandbookId FROM m136_tblDocument WHERE iEntityId = @EntityId)) 
		SELECT @LevelType = (SELECT iLevelType FROM m136_tblHandbook WHERE iHandbookId = (SELECT iHandbookId FROM m136_tblDocument WHERE iEntityId = @EntityId)) 
		SELECT @DocumentType = (SELECT m136_tblDocumentType.Type FROM m136_tblDocumentType WHERE iDocumentTypeId = (SELECT iDocumentTypeId FROM m136_tblDocument WHERE iEntityId = @EntityId))
		UPDATE @resultTable 
		SET strName = @HandbookName, iLevelType = @LevelType, DocumentType = @DocumentType
		WHERE iEntityId = @EntityId;
		DECLARE @MetaInfoTemplateRecordsId int
		SELECT @MetaInfoTemplateRecordsId = 
			(SELECT iMetaInfoTemplateRecordsId FROM m136_tblMetaInfoTemplateRecords WHERE iMetaInfoTemplateRecordsId in 
				(SELECT iMetaInfoTemplateRecordsId FROM m136_relDocumentTypeInfo WHERE iDocumentTypeId = (SELECT iDocumentTypeId FROM m136_tblDocument WHERE iEntityId = @EntityId))
			  and strName like '%Målgruppe%')
		IF @MetaInfoTemplateRecordsId > 0
		BEGIN
			SELECT @TargetGroup = (SELECT Value FROM m136_tblMetaInfoRichText WHERE iEntityId = @EntityId and iMetaInfoTemplateRecordsId = @MetaInfoTemplateRecordsId)		
			UPDATE @resultTable 
			SET strTargetGroup = @TargetGroup
			WHERE iEntityId = @EntityId;  
		END
		SELECT @MetaInfoTemplateRecordsId = 
			(SELECT iMetaInfoTemplateRecordsId FROM m136_tblMetaInfoTemplateRecords WHERE iMetaInfoTemplateRecordsId in 
				(SELECT iMetaInfoTemplateRecordsId FROM m136_relDocumentTypeInfo WHERE iDocumentTypeId = (SELECT iDocumentTypeId FROM m136_tblDocument WHERE iEntityId = @EntityId))
			  and strName like '%Endringer fra%')
		IF @MetaInfoTemplateRecordsId > 0
		BEGIN
			SELECT @Changes = (SELECT Value FROM m136_tblMetaInfoRichText WHERE iEntityId = @EntityId and iMetaInfoTemplateRecordsId = @MetaInfoTemplateRecordsId)		
			UPDATE @resultTable 
			SET strChanges = @Changes
			WHERE iEntityId = @EntityId;
		END	
	FETCH NEXT FROM curDocumentId INTO @EntityId
	END
		CLOSE curDocumentId
		DEALLOCATE curDocumentId
	SELECT DocumentType, strDocName AS Dokument, strName AS Mappe, iDocId AS DokId, iVersion AS Versjon, strChanges AS CustomField1, strTargetGroup AS CustomField2  
	FROM @resultTable 
	ORDER BY strName, iDocId
END
GO
/****** Object:  Table [dbo].[m136_tblVJustify]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblVJustify](
	[iVJustifyId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
 CONSTRAINT [PK__m136_tbl__894D6A9275F77EB0] PRIMARY KEY CLUSTERED 
(
	[iVJustifyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblSubscriberDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_tblSubscriberDocument](
	[iEmployeeId] [int] NOT NULL,
	[iDocumentId] [int] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK_m136_tblSubscribeDocument] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetSubscriberDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Gets Subscriber Documents] 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetSubscriberDocuments] 
	-- Add the parameters for the stored procedure here
	@iEmployeeId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iEmployeeId, iHandbookId) & 0x15) > 0
   
	
	declare @tmp table(iDocumentId int, iVersion int)
                insert into @tmp(iDocumentId, iVersion)
                    select iDocumentId, max(iVersion) from m136_tblDocument where iApproved = 1 and 
						iHandbookId in (select iHandbookId from @HandbookPermissions)
	                    group by iDocumentId


	select t.iDocumentId, d.strName, d.iHandbookId, sd.iSort, t.iVersion, d.UrlOrFileName, d.UrlOrFileProperties, ISNULL(dt.Type,0) as [Type], d.iEntityId from @tmp t
                    join m136_tblDocument d on (t.iDocumentId = d.iDocumentId and t.iVersion = d.iVersion)
                    join m136_tblSubscriberDocument sd on t.iDocumentId = sd.iDocumentId
                    join m136_tblDocumentType dt on d.iDocumentTypeId = dt.iDocumentTypeId
                where sd.iEmployeeId = @iEmployeeId
                order by sd.iSort
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetNewLatestApprovedSubscriptionsCount]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetNewLatestApprovedSubscriptionsCount]
	@iSecurityId INT = 0,
	@iApprovedDocumentCount INT = 0,
	@TreatDepartmentFoldersAsFavorites INT = 0
AS
SET NOCOUNT ON
BEGIN
	DECLARE @iUserDepId INT;
	SELECT @iUserDepId = iDepartmentId FROM tblEmployee WHERE iEmployeeId = @iSecurityId;
	-- get list of handbookId which is favorite and have read access
	DECLARE @FavoriteHandbooksWithReadContents TABLE(iHandbookId INT);
	INSERT INTO @FavoriteHandbooksWithReadContents(iHandbookId)
	SELECT 
		iHandbookId 
	FROM 
		[dbo].[m136_fnGetAllFavoritesFoldersWithContentsAccessRecursively](@iSecurityId, @TreatDepartmentFoldersAsFavorites, @iUserDepId);
	-- get list of favorite document
	WITH Documents AS
	(
		SELECT
			iDocumentId
		FROM
			m136_relVirtualRelation
		WHERE iHandbookId IN (SELECT DISTINCT iHandbookId 
							  FROM @FavoriteHandbooksWithReadContents)
		UNION
		SELECT
			iDocumentId
		FROM
			m136_tblSubscriberDocument
		WHERE 
			iEmployeeId = @iSecurityId
	)
	SELECT DISTINCT 
		TOP(@iApprovedDocumentCount)
		COUNT(*)
	FROM  
		m136_tblDocument d
		JOIN m136_tblHandbook h ON d.iHandbookId = h.iHandbookId
		LEFT JOIN tblEmployee e ON e.iEmployeeId = d.iCreatedbyId
	WHERE 
		d.iLatestApproved = 1 
		AND ((d.iHandbookId IN (SELECT rp.iHandbookId FROM @FavoriteHandbooksWithReadContents rp))
			OR	(@TreatDepartmentFoldersAsFavorites = 1 AND h.iDepartmentId = @iUserDepId) 
			OR	d.iDocumentId IN (SELECT iDocumentId FROM Documents)
		)
		AND d.dtmApproved > e.PreviousLogin
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMyFavorites]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetMyFavorites]
	@EmployeeId INT = 0,
	@TreatDepartmentFoldersAsFavorites BIT = 0
AS
SET NOCOUNT ON
BEGIN
	DECLARE @iUserDepId INT;
	SELECT @iUserDepId = iDepartmentId FROM tblEmployee WHERE iEmployeeId = @EmployeeId;
	--chapter
	SELECT
		h.iHandbookId, 
		h.strName, 
		h.iLevelType,
		bf.isForced AS isForced,
		bf.isDepartment AS isDepartment,
		bf.iSort
	FROM
		m136_tblHandbook h
		JOIN [dbo].[m136_fnGetFavoriteFolders](@EmployeeId, @TreatDepartmentFoldersAsFavorites,@iUserDepId) bf
			ON h.iHandbookId = bf.iHandbookId
	ORDER BY
		CASE WHEN (isDepartment = 1 AND isForced = 1) OR (isDepartment = 1) THEN h.strName
		END,
		isDepartment,
		isForced,
		CASE WHEN isDepartment = 0 AND isForced = 0 THEN bf.iSort
		END,
		h.strName
	--document
	SELECT
		d.iHandbookId,
		d.strName,
		d.iDocumentId, 
		d.iDocumentTypeId,
		sd.iSort
	FROM
		m136_tblSubscriberDocument sd
		JOIN m136_tblDocument d 
			ON (sd.iDocumentId = d.iDocumentId AND d.iLatestApproved = 1)
	WHERE
		sd.iEmployeeId = @EmployeeId
	ORDER BY
		sd.iSort,
		strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_ListLatestApproved]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_ListLatestApproved] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	-- SET NOCOUNT ON;

    -- Insert statements for procedure here
declare @iUserDepId int
select @iUserDepId=iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId

declare @subTable table(iHandbookId int not null)
insert into @subTable
select iHandbookId FROM m136_tblSubscribe WHERE iEmployeeId=@iSecurityId AND iFrontpage=1
insert into @subTable
select iHandbookId from m136_tblHandbook where iDepartmentId=@iUserDepId

SELECT top 20
	d.iDocumentId,
	d.strName,
	dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
	d.iHandbookId,
	d.dtmApproved dtmDate,
	h.iHandbookId, 
	h.strName as strChapterName,
	case
		when h.iLevel=1 then 'book_blue1.gif'
		when h.iDepartmentId=@iUserDepId then 'book_green.gif'
		else 'book_blue1.gif'
	end as strChapterIcon
FROM 
	m136_tblDocument d left outer join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
WHERE
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument where 
					iDocumentId = d.iDocumentId and iDeleted = 0 and iApproved in (1,4) AND dtmPublish <= getDate() and iDraft = 0)
	AND d.iApproved = 1
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1
	AND (
		(d.iHandbookId in (select iHandbookId from @subTable)) 
--	OR (h.iDepartmentId=@iUserDepId)
	)
order by
	d.dtmApproved DESC
for xml auto

END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetSubscriberChaptersForFrontpage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Subscriber Chapters For Frontpage 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetSubscriberChaptersForFrontpage] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1 
   
	
	declare @tmp table(iHandbookId int not null PRIMARY KEY, iMin int, iMax int)
	declare @exclude table(iHandbookId int not null PRIMARY KEY)

	insert into @tmp(iHandbookId, iMin, iMax)
	select iHandbookId, iMin, iMax from m136_tblHandbook where iHandbookId in (
		select iHandbookId from m136_tblSubscribe where iEmployeeId = @iSecurityId and iFrontpage = 1)

	declare @iHandbookId int
	declare @iMin int
	declare @iMax int

	declare cur cursor fast_forward for
	select iHandbookId, iMin, iMax from @tmp order by iMin
	open cur
	fetch next from cur into @iHandbookId, @iMin, @iMax
	while @@fetch_status=0
	begin
		if exists(select * from @tmp where iMin > @iMin and iMax < @iMax)
		begin
			insert into @exclude(iHandbookId) select iHandbookId from @tmp 
				where iMin > @iMin 
						and iMax < @iMax 
						and iHandbookId not in (select iHandbookId from @exclude)
		end
	fetch next from cur into @iHandbookId, @iMin, @iMax
	end
	close cur
	deallocate cur

	SELECT h.iHandbookId, h.strName, h.iLevelType, h.iDepartmentId,
				dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup, (
                    (SELECT COUNT(d.iDocumentId) 
                            from m136_tblDocument d where
							d.iHandbookId = h.iHandbookId
							and d.iLatestApproved = 1
							AND d.iApproved=1
							AND h.iHandbookId in (select iHandbookId from @HandbookPermissions))
                    + (SELECT COUNT(d.iDocumentId) 
                            from m136_tblDocument d
							inner join m136_relVirtualRelation v
							on v.iHandbookId = h.iHandbookId
							and d.iDocumentId = v.iDocumentId
							and d.iLatestApproved = 1
							and iApproved=1
							AND h.iHandbookId in (select iHandbookId from @HandbookPermissions)
                        ) +
                (SELECT COUNT(iHandbookId) FROM m136_tblHandbook WHERE iParentHandbookId=h.iHandbookId AND iDeleted = 0 AND 
				(dbo.fnSecurityGetPermission(136, 461, @iSecurityId, iHandbookId) & 0x11) > 0 ))  as iChildCount
				 FROM m136_tblHandbook h WHERE h.iDeleted = 0 AND 
				(dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) & 0x11) > 0
				and h.iHandbookId in (select iHandbookId from @tmp where iHandbookId not in (select iHandbookId from @exclude))
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfLatestApprovedSubscriptionsCount]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Count Of Documents By Latest Approved Subscriptions
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfLatestApprovedSubscriptionsCount] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iApprovedDocumentCount int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @iUserDepId int
	select @iUserDepId=iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId     

	declare @iHandbookId int
    declare @iMin int
    declare @iMax int
    declare @iLevel int
    declare @subTableSubscribe table(iHandbookId int not null PRIMARY KEY, iMin int, iMax int, iLevel int)
    declare cur cursor for
    select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iDeleted = 0 AND iHandbookId in (SELECT iHandbookId FROM m136_tblSubscribe WHERE iEmployeeId=@iSecurityId AND iFrontpage=1 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1)

    open cur
    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    while @@fetch_status=0
    begin
        insert into @subTableSubscribe(iHandbookId, iMin, iMax, iLevel)
            select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iDeleted = 0 AND iMin >= @iMin and iMax <= @iMax and iHandbookId not in (select iHandbookId from @subTableSubscribe)

    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    end
    close cur
    deallocate cur
     
    declare @subTableRelation table(iDocumentId int not null PRIMARY KEY)
	insert into @subTableRelation
	select distinct iDocumentId from m136_relVirtualRelation where iHandbookId in 
		        (SELECT iHandbookId FROM @subTableSubscribe)
		        
	insert into @subTableRelation
	select iDocumentId 
	from m136_tblSubscriberDocument 
	where iEmployeeId = @iSecurityId 
		AND iDocumentId not in  (select iDocumentId from @subTableRelation)
		        
    declare @tmpBooks table(iHandbookId int not null PRIMARY KEY)
    insert into @tmpBooks
    select iHandbookId
    from m136_tblHandbook
    where (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&32)=32 AND 
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1 AND iDeleted = 0
               
	SELECT COUNT(*) FROM
	(
		SELECT top (@iApprovedDocumentCount)
            d.iDocumentId
		FROM 
		m136_tblDocument d
		join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
		WHERE
			d.iLatestApproved = 1
			AND d.iApproved = 1
			and d.dtmApproved <= GETDATE()
			AND h.iDeleted = 0
			AND (
				(d.iHandbookId in (SELECT iHandbookId FROM @subTableSubscribe))
				OR 
				(h.iDepartmentId=@iUserDepId)
				OR
				d.iDocumentId in (select iDocumentId from @subTableRelation)
				OR 
				d.iHandbookId in (SELECT iHandbookId from @tmpBooks)
			)
    ) a
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetEmailSubscriberDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get Email Subscriber Documents 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetEmailSubscriberDocuments] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iHours int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @iHandbookId int
    declare @iMin int
    declare @iMax int
    declare @iLevel int
    declare @subTableSubscribe table(iHandbookId int not null PRIMARY KEY, iMin int, iMax int, iLevel int)
    declare cur cursor for
    select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iHandbookId in (SELECT iHandbookId FROM m136_tblSubscribe WHERE iEmployeeId=@iSecurityId AND iFrontpage=1 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1)

    open cur
    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    while @@fetch_status=0
    begin
        insert into @subTableSubscribe(iHandbookId, iMin, iMax, iLevel)
            select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iMin >= @iMin and iMax <= @iMax and iHandbookId not in (select iHandbookId from @subTableSubscribe)

    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    end
    close cur
    deallocate cur
	
	select * from 
	(
		SELECT doc.iDocumentId, doc.strName docName, 
			doc.dtmApproved, doc.iVersion, book.iHandbookId, book.strName 
		FROM m136_tblDocument doc --left outer join m136_tblSubscribe s on doc.iHandbookId=s.iHandbookId 
			left outer join m136_tblHandbook book on doc.iHandbookId=book.iHandbookId 
		WHERE 
			doc.iDeleted=0 AND iApproved=1 AND iLatestApproved = 1
			AND dtmApproved<getdate() AND dtmApproved>= dateadd(Hour, @iHours, getdate() )
			AND doc.iHandbookId in (select iHandbookId from @subTableSubscribe) 
	union 
		SELECT doc.iDocumentId, doc.strName docName, 
			doc.dtmApproved, doc.iVersion, book.iHandbookId, book.strName 
		FROM m136_relVirtualRelation rel 
			left join m136_tblDocument doc on rel.iHandbookId=doc.iHandbookId
			left outer join m136_tblHandbook book on doc.iHandbookId=book.iHandbookId 
		WHERE 
			doc.iDeleted=0 AND iApproved=1 AND iLatestApproved = 1
			AND dtmApproved<getdate() AND dtmApproved>= dateadd(Hour, @iHours, getdate() )
			AND doc.iHandbookId in (select iHandbookId from @subTableSubscribe) 
		
	) r
	ORDER BY strName, dtmApproved
		
END

CREATE NONCLUSTERED INDEX [IX_EntityEmployeeConfirm]
    ON [dbo].[m136_tblConfirmRead]([iEntityId] ASC, [iEmployeeId] ASC, [dtmConfirm] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF, ONLINE = OFF, MAXDOP = 0)
    ON [PRIMARY];
GO
/****** Object:  Table [dbo].[m136_tblSearchLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblSearchLog](
	[iDocumentId] [int] NOT NULL,
	[iEmployeeId] [int] NOT NULL,
	[dtmSearch] [datetime] NOT NULL,
	[strSearchKey] [varchar](255) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblScaleDir]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblScaleDir](
	[iScaleDirId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
 CONSTRAINT [PK__m136_tbl__B84A13E3731B1205] PRIMARY KEY CLUSTERED 
(
	[iScaleDirId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblRelationType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblRelationType](
	[iRelationTypeId] [int] NOT NULL,
	[strName] [varchar](100) NULL,
 CONSTRAINT [PK__m136_tbl__CFF95EE6703EA55A] PRIMARY KEY CLUSTERED 
(
	[iRelationTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[m136_tblProcessRelationType]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m136_tblProcessRelationType](
	[iRelationTypeId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
 CONSTRAINT [PK_m136_tblProcessRelationType] PRIMARY KEY CLUSTERED 
(
	[iRelationTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedTableType [dbo].[EmployeePosition]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[EmployeePosition] AS TABLE(
	[iEmployeeId] [int] NOT NULL,
	[iDepartmentId] [int] NOT NULL,
	[iPositionId] [int] NOT NULL
)
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateEmployeePositions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateEmployeePositions]
	@iEmployeeId INT,
	@iDepartmentId INT,
	@Positions AS[dbo].[EmployeePosition] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tEmployeeId INT, @tDepartmentId INT, @tPositionId INT;
	DECLARE PositionSet CURSOR FOR 
		SELECT iEmployeeId
			, iDepartmentId
			, iPositionId
		FROM @Positions;
		
	OPEN PositionSet; 
	FETCH NEXT FROM PositionSet INTO @tEmployeeId, @tDepartmentId, @tPositionId;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM [dbo].[relEmployeePosition] 
			WHERE iEmployeeId = @tEmployeeId 
				AND iDepartmentId = @tDepartmentId 
				AND iPositionId = @tPositionId)
		BEGIN
			INSERT INTO dbo.relEmployeePosition
			(
			    iEmployeeId,
			    iDepartmentId,
			    iPositionId,
			    iExecutiveLevel
			)
			VALUES
			(
			    @tEmployeeId, -- iEmployeeId - int
			    @tDepartmentId, -- iDepartmentId - int
			    @tPositionId, -- iPositionId - int
			    0 -- iExecutiveLevel - int
			)
		END
		FETCH NEXT FROM PositionSet INTO @tEmployeeId, @tDepartmentId, @tPositionId;
	END
	CLOSE PositionSet;
	DEALLOCATE PositionSet;
		
	DELETE dbo.relEmployeePosition WHERE iEmployeeId = @iEmployeeId AND iDepartmentId = @iDepartmentId
	AND iPositionId NOT IN (SELECT iPositionId FROM @Positions);
END
GO
/****** Object:  Table [dbo].[EditorTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EditorTemplate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](200) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[Html] [nvarchar](max) NULL,
	[ImageId] [int] NOT NULL,
	[Deleted] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Uploads]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Uploads](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iEntityId] [int] NOT NULL,
	[iFolderId] [int] NOT NULL,
	[Url] [nvarchar](4000) NOT NULL,
	[Location] [nvarchar](4000) NOT NULL,
	[FileName] [varchar](400) NOT NULL,
	[ContentType] [varchar](400) NULL,
	[iType] [int] NOT NULL,
 CONSTRAINT [PK_Uploads] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UploadFolders]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UploadFolders](
	[iFolderId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[strName] [nvarchar](255) NOT NULL,
	[iParentFolderId] [int] NULL,
	[iDeleted] [int] NULL,
	[iCreatedBy] [int] NULL,
	[iModifiedBy] [int] NULL,
	[dtmCreated] [datetime] NULL,
	[dtmModified] [datetime] NULL,
	[Location] [nvarchar](4000) NOT NULL,
 CONSTRAINT [PK_UploadFolders] PRIMARY KEY CLUSTERED 
(
	[iFolderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedTableType [dbo].[UpdatedFavoriteItemsTable]    Script Date: 10/20/2016 11:39:17 ******/
CREATE TYPE [dbo].[UpdatedFavoriteItemsTable] AS TABLE(
	[Id] [int] NULL,
	[iSort] [int] NULL
)
GO
/****** Object:  Table [dbo].[CacheUpdate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CacheUpdate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActionType] [int] NOT NULL,
	[EntityId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteFolder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteFolder]
	@HandbookId INT = 0,
	@SecurityId INT = 0
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            SET NOCOUNT ON;
            DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
            DECLARE @DocumentChildren TABLE(Id INT NOT NULL PRIMARY KEY);
            INSERT INTO @AvailableChildren(iHandbookId)
            SELECT 
                iHandbookId 
            FROM 
                [dbo].[m136_GetHandbookRecursive](@HandbookId, @SecurityId, 1);
            INSERT INTO @DocumentChildren(Id)		
            SELECT DISTINCT d.iDocumentId AS Id
                FROM m136_tblDocument d
                    JOIN m136_tblHandbook h 
                        ON d.iHandbookId = h.iHandbookId
                    JOIN @AvailableChildren ac
                        ON d.iHandbookId = ac.iHandbookId
            --Delete virtual of handbook
            DELETE FROM	dbo.m136_relVirtualRelation	
            WHERE iHandbookId IN (SELECT iHandbookId FROM  @AvailableChildren)
            --Delete virtual of document
            DELETE FROM	dbo.m136_relVirtualRelation	
            WHERE iDocumentId IN (SELECT Id FROM  @DocumentChildren)
            --Delete Subcribe handbook
            DELETE FROM	dbo.m136_tblSubscribe
            WHERE iHandbookId IN (SELECT iHandbookId FROM  @AvailableChildren)
            --Delete Subcribe of document
            DELETE FROM	dbo.m136_tblSubscriberDocument
            WHERE iDocumentId IN (SELECT Id FROM  @DocumentChildren)
            --Set iDelete = 1 for handbook table
            UPDATE dbo.m136_tblHandbook
                SET iDeleted = 1
            WHERE iHandbookId IN (SELECT iHandbookId FROM  @AvailableChildren)
            --Set iDelete = 1 for Document table
            UPDATE dbo.m136_tblDocument
                SET iDeleted = 1
            WHERE iDocumentId IN (SELECT Id FROM  @DocumentChildren)
            INSERT INTO CacheUpdate(ActionType, EntityId) VALUES (3, @HandbookId);
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeInternetDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangeInternetDocument]
    @UserId INT,
    @DocumentIds AS [dbo].[Item] READONLY,
    @IsInternetDocument BIT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @FullName NVARCHAR(100);
            SELECT
                @FullName = strFirstName + ' ' + strLastName
            FROM
                tblEmployee
            WHERE
                iEmployeeId = @UserId
            UPDATE
                m136_tblDocument
            SET
                iInternetDoc = @IsInternetDocument,
                iAlterId = @UserId,
                strAlterer = @FullName
            WHERE
                iDocumentId IN (SELECT Id FROM @DocumentIds)
                AND iLatestVersion = 1
            INSERT INTO CacheUpdate (ActionType, EntityId)
                SELECT 11, Id FROM @DocumentIds
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeDocumentResponsible]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.NGUYEN.MANH
-- Create date: NOV 23, 2015
-- Description:	Change Document Responsible
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_ChangeDocumentResponsible] 
	@DocumentIds AS [dbo].[Item] READONLY,
	@TypeUpdate AS INT,
	@SendEmailApprover AS BIT,
	@ResponsibleId as INT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            IF @TypeUpdate = 1
                BEGIN
                    UPDATE dbo.m136_tblDocument
                    SET iCreatedbyId = @ResponsibleId
                    WHERE iDocumentId IN (SELECT Id FROM @DocumentIds)
                          AND (iLatestVersion = 1 OR iLatestApproved = 1)
                END
            ELSE
                BEGIN 
                    IF @TypeUpdate = 2
                        BEGIN
                            UPDATE dbo.m136_tblDocument
                            SET iCreatedbyId = @ResponsibleId
                            WHERE iDocumentId IN (SELECT Id FROM @DocumentIds)
                                  AND iLatestApproved = 1
                        END
                    ELSE
                        BEGIN
                            UPDATE dbo.m136_tblDocument
                            SET iCreatedbyId = @ResponsibleId
                            WHERE iDocumentId IN (SELECT Id FROM @DocumentIds)
                                  AND iLatestVersion = 1
                        END
                END
            DECLARE @EmailApprover VARCHAR(200) = '';
            DECLARE @ApproverId INT = null;
            IF @SendEmailApprover = 1
            BEGIN
                SELECT @EmailApprover = e.strEmail
                FROM dbo.m136_tblDocument doc
                JOIN dbo.tblEmployee e ON doc.iApprovedById = e.iEmployeeId
                WHERE iDocumentId IN (SELECT Id FROM @DocumentIds)
                      AND iLatestApproved = 1
            END
            INSERT INTO CacheUpdate (ActionType, EntityId)
                SELECT 11, Id FROM @DocumentIds
            SELECT @EmailApprover
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_FullTextSearchRanked]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_FullTextSearchRanked]
	-- Add the parameters for the stored procedure here
	@iSecurityId int,
	@strSearchString varchar(100),
	@iDepartmentId int = 0,
	@iHandbookId int = 0,
	@iDocTypeId int = 0,
	@iDateFilterId int = null,
	@dtmFrom datetime = null,
	@dtmTo datetime = null

AS
BEGIN
-- This is a placeholder implementation of the schema object to facilitate deferred creation of the actual implementation.
raiserror(N'This is a placeholder implementation of the schema object to facilitate deferred creation of the actual implementation.',16,-1)
END
GO
/****** Object:  Table [dbo].[tblCountry]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblCountry](
	[iCountryId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
	[strEmergency1Text] [varchar](100) NOT NULL,
	[strEmergency1Nr] [varchar](100) NOT NULL,
	[strEmergency2Text] [varchar](100) NOT NULL,
	[strEmergency2Nr] [varchar](100) NOT NULL,
	[strEmergency3Text] [varchar](100) NOT NULL,
	[strEmergency3Nr] [varchar](100) NOT NULL,
	[strEmergency4Text] [varchar](100) NOT NULL,
	[strEmergency4Nr] [varchar](100) NOT NULL,
	[strEmergency5Text] [varchar](100) NOT NULL,
	[strEmergency5Nr] [varchar](100) NOT NULL,
	[strMessage] [varchar](4000) NOT NULL,
 CONSTRAINT [PK__tblCountry_iCountryId] PRIMARY KEY CLUSTERED 
(
	[iCountryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [Deviation].[AddTaskAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddTaskAttachment]
	@DeviationId INT,
	@BaseActionId INT,
	@ActionType INT,
    @Title NVARCHAR(400),
	@Description NVARCHAR(MAX),
	@Size INT,
	@ContentType VARCHAR(400),
	@Extension VARCHAR(4),
	@Content IMAGE,
	@Removable BIT
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO Deviation.ActionAttachment
	(
	    --ActionAttachmentId - this column value is auto-generated
	    DeviationId,
	    Title,
	    Description,
	    ActionType,
	    BaseActionId,
	    Size,
	    ContentType,
	    Extension,
	    Content,
	    IsDeleted,
	    Removable
	)
	VALUES
	(
	    -- ActionAttachmentId - int
	    @DeviationId, -- DeviationId - int
	    @Title, -- Title - nvarchar
	    @Description, -- Description - nvarchar
	    @ActionType, -- ActionType - int
	    @BaseActionId, -- BaseActionId - int
	    @Size,
	    @ContentType,
		@Extension,
		@Content,
		0,
		@Removable
	)
	SELECT CAST(SCOPE_IDENTITY() AS INT);
END
GO
/****** Object:  StoredProcedure [Risk].[AddRiskAreaImage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddRiskAreaImage]
	@Id INT,
	@Icon IMAGE
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.Areas
    SET
        Icon = @Icon
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[AddRelatedDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddRelatedDocuments]
	@DeviationId INT,
	@IsRemovable BIT,
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	INSERT INTO [Deviation].[DeviationDocument](DeviationId, DocumentEntityId, IsDeleted, IsRemovable)
	SELECT @DeviationId, Id, 0, @IsRemovable FROM @IdsTable;
	UPDATE Deviation.Deviation
    SET 
        UpdatedDate = GETDATE()
    WHERE DeviationId = @DeviationId;
END
GO
/****** Object:  StoredProcedure [Deviation].[AddNotificationEmailForCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddNotificationEmailForCategory]
	@CategoryID INT,
	@Email NVARCHAR(100),
	@FirstName NVARCHAR(50),
	@LastName NVARCHAR(50)
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(CategoryAlertId),0) FROM Deviation.CategoryAlerts;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO Deviation.CategoryAlerts(CategoryID, Email, FirstName, LastName) 
    VALUES(@CategoryID, @Email, @FirstName, @LastName);
	SELECT @newId;
END
GO
/****** Object:  StoredProcedure [Deviation].[AddNotification]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddNotification]
	@UserId INT,
    @Subject NVARCHAR(500),
    @Content NVARCHAR(MAX),
    @NotificateDate DATETIME
AS
SET NOCOUNT ON
BEGIN	
	INSERT INTO [Deviation].[Notification](UserId, [Subject], Content, NotificateDate, IsDeleted, IsRead)
    VALUES(@UserId, @Subject, @Content, @NotificateDate, 0, 0);
END
GO
/****** Object:  StoredProcedure [Deviation].[AddMultiNotification]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddMultiNotification]
	@NotificationDataTable AS [Deviation].[NotificationTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	INSERT INTO [Deviation].[Notification](UserId, [Subject], Content, NotificateDate, IsDeleted, IsRead)
	SELECT UserId, [Subject], Content, NotificateDate, 0, 0 FROM @NotificationDataTable
END
GO
/****** Object:  StoredProcedure [Deviation].[AddLocation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddLocation]
	@LocationName NVARCHAR(150),
	@Description NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(LocationId),0) FROM Deviation.Location;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO Deviation.Location(LocationName, [Description], SortOrder, IsDeleted) 
    VALUES (@LocationName, @Description, 0, 0);
	SELECT @newId;
END
GO
/****** Object:  StoredProcedure [dbo].[sp_alterdiagram]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_alterdiagram]
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
GO
/****** Object:  StoredProcedure [Deviation].[SearchDeviationStatuses]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[SearchDeviationStatuses] 
	@Keyword NVARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
    SELECT s.Id, 
		s.Name, 
		s.[Description], 
		s.SortOrder, 
		s.IsDeleted 
    FROM Deviation.Statuses s
    WHERE (@Keyword IS NULL
		OR s.Name LIKE '%' + @Keyword + '%'
		OR s.[Description] LIKE '%' + @Keyword + '%')
		AND s.IsDeleted = 0
    ORDER BY s.SortOrder, s.Name;
END
GO
/****** Object:  StoredProcedure [dbo].[be_GetUndeletedReadingLists]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetUndeletedReadingLists]
AS
BEGIN
    SELECT
        ReadingListId,
        Name,
        Description,
        IsInactive
    FROM
        ReadingList
    WHERE
        IsDeleted = 0
    ORDER BY Name
END
GO
/****** Object:  StoredProcedure [dbo].[be_UpdateSecondaryDepartmentsOfUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_UpdateSecondaryDepartmentsOfUser] 
	@UserId INT,
    @DepartmentIds AS [dbo].[Item] READONLY
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DELETE FROM
                relEmployeeDepartment
            WHERE
                iEmployeeId = @UserId
            INSERT INTO relEmployeeDepartment (iEmployeeId, iDepartmentId)
            SELECT @UserId, Id
            FROM @DepartmentIds
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationStatusesOrder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviationStatusesOrder] 
	@Items AS dbo.[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE s
    SET s.SortOrder = i.Value
    FROM Deviation.Statuses s
    JOIN @Items i ON s.Id = i.Id
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviationStatus]
	@IdsTable AS [Deviation].[IdsTable] READONLY,
	@Status INT,
	@UserId INT,
	@ShouldUpdateOwner BIT
AS
BEGIN
	SET NOCOUNT ON	
	UPDATE d 
	SET
	    d.[State] = @Status,
	    d.OwnerId = CASE WHEN @ShouldUpdateOwner = 1 THEN @UserId
	                     WHEN @ShouldUpdateOwner = 0 THEN d.OwnerId
	                END,
	    d.UpdatedDate = GETDATE()
	FROM Deviation.Deviation d
	WHERE d.DeviationId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviationLog]
	@LogId INT,
	@LogDate DATETIME,
	@ActionType INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE Deviation.DeviationLog 
	SET LogDate = @LogDate,
		ActionType = @ActionType
	WHERE DeviationLogId = @LogId
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationInProgressStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviationInProgressStatus] 
	@Id INT,
	@Name NVARCHAR(150),
	@Description NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.Statuses
    SET
        Name = @Name,
        [Description] = @Description
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationById]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationById]
	@Id INT
AS
BEGIN
	SELECT d.DeviationId, 
		d.Title, 
		d.[Description], 
		d.Consequence, 
		d.CategoryId, 
		d.ContactPersonId, 
		d.DueDate, 
		d.ImmediateAction, 
		d.ImmediateConsequences, 
		d.ProposedActions, 
		d.RegisteredByUser, 
		d.ReportTypeId, 
		d.[State],
		d.StatusId, 
		d.[Priority], 
		d.[Type], 
		d.OwnerId, 
		d.PreviousOwner, 
		d.ForwardedTo, 
		d.EventDate, 
		d.RegisterDate, 
		d.LocationId, 
		d.IsDeleted, 
		d.RegisteredByDepartment, 
		d.HandledByDepartment,
		c.Name AS CategoryName,
		c.CategoryType,
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS RegisteredName,
		(ISNULL(te1.strFirstName, '') + ' ' + ISNULL(te1.strLastName, '')) AS OwnerName,
		(ISNULL(te2.strFirstName, '') + ' ' + ISNULL(te2.strLastName, '')) AS PreviousOwnerName,
		(ISNULL(te3.strFirstName, '') + ' ' + ISNULL(te3.strLastName, '')) AS ContactPersonName,
		l.LocationName,
		rbd.strName AS RegisteredByDepartmentName,
		hbd.strName AS HandledByDepartmentName,
		c.SecGroupId,
		c.AnonymousSecGroupId, 
		c.AnonymousIsDefault,
		tsg.strName AS SecGroupName,
		d.ServiceAreaID
	FROM Deviation.Deviation d 
	INNER JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee te ON d.RegisteredByUser = te.iEmployeeId
	LEFT JOIN dbo.tblEmployee te1 ON d.OwnerId = te1.iEmployeeId
	LEFT JOIN dbo.tblEmployee te2 ON d.PreviousOwner = te2.iEmployeeId
	LEFT JOIN dbo.tblEmployee te3 ON d.ContactPersonId = te3.iEmployeeId
	LEFT join Deviation.Location l ON d.LocationId = l.LocationId
	LEFT JOIN dbo.tblDepartment rbd ON d.RegisteredByDepartment = rbd.iDepartmentId
	LEFT JOIN dbo.tblDepartment hbd ON d.HandledByDepartment = hbd.iDepartmentId
	LEFT JOIN dbo.tblSecGroup tsg ON c.SecGroupId = tsg.iSecGroupId
	WHERE d.DeviationId = @Id;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[fGetHigherClosestDepartmentResponsible]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[fGetHigherClosestDepartmentResponsible] 
(
	@CurrentResponsible INT
)  
RETURNS INT
AS  
BEGIN 
	DECLARE @ParentDepartmentId INT, @ClosetDepartmentId INT;
	SET @ClosetDepartmentId = NULL;
	IF (@CurrentResponsible = -1)
		BEGIN
			SET @ClosetDepartmentId = -1;
			RETURN @ClosetDepartmentId
		END
	IF (@CurrentResponsible IS NOT NULL)
		BEGIN
			SELECT @ParentDepartmentId = iDepartmentParentId FROM  [dbo].[tblDepartment] WHERE iDepartmentId = @CurrentResponsible
		END
	IF (@ParentDepartmentId <> 0 AND @ParentDepartmentId IS NOT NULL)
		BEGIN
			SET @ClosetDepartmentId = [Deviation].[fGetClosestDepartmentResponsible](@ParentDepartmentId);
			IF (@ClosetDepartmentId = @CurrentResponsible)
				BEGIN
					SET @ClosetDepartmentId = [Deviation].[fGetHigherClosestDepartmentResponsible](@ClosetDepartmentId);
				END
		END
	ELSE
		BEGIN
			SET @ClosetDepartmentId = NULL;
		END
	RETURN @ClosetDepartmentId
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateTaskAttachments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI	
-- Create date: MAR 31. 2015
-- Description:	Update task attachments.
--		Because we reuse UDT [Deviation].[DeviationAttachment], so DeviationAttachmentId is ActionAttachmentId,
--      DeviationId is BaseActionId. Others are the same DeviationAttachment's fields
-- =============================================
CREATE PROCEDURE [Deviation].[UpdateTaskAttachments]
	@Id INT,
	@Attachments AS [Deviation].[DeviationAttachment] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE
		@DeviationId INT, 
		@DeviationAttachmentId INT,
		@BaseActionId INT,
		@Title [nvarchar](400),
		@Description [nvarchar](max),
		@Size [int],
		@ContentType [varchar](400),
		@Extension [varchar](10),
		@Content [varbinary](max),
		@IsDeleted [bit],
		@Removable [bit];
	DECLARE @NewAttachments TABLE(
		DeviationAttachmentId INT
	);
	SELECT @DeviationId = aa.DeviationId FROM Deviation.ActionAttachment aa
	WHERE aa.BaseActionId = @Id;			
	DECLARE Attachments CURSOR FOR 
		SELECT 
			[DeviationAttachmentId],
			@Id,
			[@Attachments].Title, 
			[@Attachments].[Description], 
			[@Attachments].Size, 
			[@Attachments].ContentType, 
			[@Attachments].Extension, 
			[@Attachments].Content, 
			[@Attachments].IsDeleted, 
			[@Attachments].Removable
		FROM @Attachments;
	OPEN Attachments; 
	FETCH NEXT FROM Attachments INTO @DeviationAttachmentId, 
		@BaseActionId, 
		@Title, 
		@Description, 
		@Size, 
		@ContentType, 
		@Extension, 
		@Content,
		@IsDeleted,
		@Removable;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM Deviation.ActionAttachment aa
			WHERE aa.BaseActionId = @BaseActionId
				AND aa.ActionAttachmentId = @DeviationAttachmentId)
		BEGIN
			INSERT INTO Deviation.ActionAttachment
			(
			    BaseActionId, 
			    DeviationId,
			    Title, 
			    [Description], 
			    Size, 
			    ContentType, 
			    Extension, 
			    Content, 
			    IsDeleted, 
			    Removable
			)
			VALUES
			(
			    @BaseActionId,
			    @DeviationId,
			    @Title,
			    @Description,
			    @Size,
			    @ContentType,
			    @Extension,
			    @Content,
			    @IsDeleted,
			    @Removable 
			)
			INSERT INTO @NewAttachments SELECT SCOPE_IDENTITY();
		END
		FETCH NEXT FROM Attachments INTO @DeviationAttachmentId, 
			@BaseActionId, 
			@Title, 
			@Description, 
			@Size, 
			@ContentType, 
			@Extension, 
			@Content,
			@IsDeleted,
			@Removable;
	END
	CLOSE Attachments;
	DEALLOCATE Attachments;
	IF EXISTS(SELECT * FROM Deviation.ActionAttachment da WHERE da.ActionAttachmentId IS NOT NULL AND ActionAttachmentId <> 0)
	BEGIN
		DELETE Deviation.ActionAttachment WHERE BaseActionId = @Id
			AND ActionAttachmentId NOT IN (SELECT DeviationAttachmentId FROM @Attachments 
				WHERE DeviationAttachmentId IS NOT NULL AND DeviationAttachmentId <> 0)
			AND ActionAttachmentId NOT IN (SELECT dda.DeviationAttachmentId FROM @NewAttachments dda);
    END	
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateTask]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateTask]
	@Id INT,
	@Title NVARCHAR(400),
	@Description NVARCHAR(MAX),
	@DueDate DATETIME,
	@State INT,
	@ResponsibleId INT,
    @WhatDone NVARCHAR(MAX),
    @FollowUpDate DATETIME	
AS
BEGIN
	SET NOCOUNT ON	
	UPDATE ba
	SET
	    ba.Title = @Title, -- nvarchar
	    ba.[Description] = @Description, -- nvarchar
	    ba.DueDate = @DueDate, -- datetime
	    ba.ResponsiblePersonId = @ResponsibleId, -- int
	    ba.[State] = @State, -- int
	    ba.Whatdone = @WhatDone,
	    ba.FollowUpDate = @FollowUpDate,
	    ba.UpdatedDate = GETDATE()
	FROM Deviation.BaseAction ba
	WHERE ba.BaseActionId = @Id
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateServiceAreasOrder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateServiceAreasOrder] 
	@Items AS dbo.[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE sa
    SET sa.SortOrder = i.Value
    FROM Deviation.ServiceAreas sa
    JOIN @Items i ON sa.Id = i.Id
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateServiceArea]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateServiceArea]
	@Id INT,
	@Name NVARCHAR(150),
	@Description NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.ServiceAreas
    SET
        Name = @Name,
        [Description] = @Description
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateRiskArea]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateRiskArea] 
	@Id INT,
	@Name NVARCHAR(250),
	@Description NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.Areas
    SET
        Name = @Name,
        Description = @Description
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[EditLocation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[EditLocation]
	@LocationId INT,
	@LocationName NVARCHAR(150),
	@Description NVARCHAR(MAX),
	@SortOrder INT
AS
BEGIN
	UPDATE Deviation.Location
	SET LocationName = @LocationName, [Description] = @Description, SortOrder = @SortOrder
	WHERE LocationId = @LocationId
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteEditorTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteEditorTemplate]
    @Id INT
AS
BEGIN
    UPDATE
        EditorTemplate
    SET
        Deleted = 1
    WHERE
        Id = @Id
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteDocuments]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.DeviationDocument
	SET IsDeleted = 1
	WHERE DeviationDocumentId IN (SELECT Id FROM @IdsTable) AND IsRemovable = 1
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteDeviationStatuses]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteDeviationStatuses]
	@Items AS Deviation.IdsTable READONLY
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.Statuses
    SET
        IsDeleted = 1
    WHERE Id IN (SELECT Id FROM @Items)
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteDeviationLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteDeviationLog]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
BEGIN
	DELETE FROM Deviation.DeviationLog
	WHERE DeviationLogId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteDeviation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteDeviation] 
	@DeviationId INT
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.Deviation
    SET
        Deviation.Deviation.IsDeleted = 1
    WHERE DeviationId = @DeviationId;
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteCategory]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.Category
	SET IsDeleted = 1
	WHERE CategoryId IN (SELECT Id FROM @IdsTable)
	UPDATE Deviation.CategoryCustomField
	SET Deleted = 1
	WHERE CategoryId IN (SELECT Id FROM @IdsTable)
	UPDATE Deviation.CategoryCustomFieldOptions
	SET Deleted = 1
	WHERE CategoryId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteCacheUpdateById]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteCacheUpdateById]
	@Id INT
AS
BEGIN
    DELETE FROM
        CacheUpdate
    WHERE
        Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteAllCacheUpdate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteAllCacheUpdate]
AS
BEGIN
    DELETE FROM CacheUpdate
END
GO
/****** Object:  StoredProcedure [dbo].[UpdateEditorTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateEditorTemplate]
    @Id INT,
    @Title NVARCHAR(200),
    @Description NVARCHAR(2000),
    @Html NVARCHAR(MAX),
    @ImageId INT
AS
BEGIN
    UPDATE
        EditorTemplate
    SET
        Title = @Title,
        Description = @Description,
        Html = @Html,
        ImageId = @ImageId
    WHERE
        Id = @Id
END
GO
/****** Object:  UserDefinedFunction [Deviation].[fCountCompletedActions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [Deviation].[fCountCompletedActions]
(
	@DeviationID INT,
	@CountState INT,
	@ActionType INT
)
RETURNS NVARCHAR(20)
AS
BEGIN
	DECLARE @Result NVARCHAR(20), @Total INT = 0, @Count INT = 0;

	SELECT @Total = COUNT(*), @Count = SUM(CASE WHEN ba.State = @CountState THEN 1 ELSE 0 END) 
	FROM Deviation.BaseAction ba 
	WHERE ba.DeviationId = @DeviationID 
	AND (ba.ActionType = @ActionType OR 
		(@ActionType = 2 OR @ActionType = 4) AND (ba.ActionType IN (2,4)));
	
	SET @Result = LTRIM(STR(ISNULL(@Count, 0))) + '/' + LTRIM(STR(ISNULL(@Total, 0)));
	
	RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[fGetDeviationLogDate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [Deviation].[fGetDeviationLogDate]
(
	@DeviationId INT
)
RETURNS DATETIME
AS
BEGIN
	
	DECLARE @Result DATETIME;

	SELECT @Result = MAX(dl.LogDate) FROM Deviation.DeviationLog dl WHERE dl.DeviationId = @DeviationId;
	
	RETURN @Result;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationsAssignedToMe]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationsAssignedToMe] 
	@iUserId int = 0,
	@iState int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT d.DeviationId, 
		d.Title, 
		d.[Description], 
		d.DueDate, 
		d.[State], 
		d.StatusId,
		d.[Priority], 
		d.CategoryId,
		c.Name AS CategoryName,
		d.RegisterDate,
		d.RegisteredByDepartment,
		d.HandledByDepartment,
		c.CategoryType AS [Type],	
		d.OwnerId,	
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS RegisteredName,
		(ISNULL(te2.strFirstName, '') + ' ' + ISNULL(te2.strLastName, '')) AS OwnerName,
		te2.strEmail AS OwnerEmail,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,1) AS Tasks,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,2) AS Actions,
		[Deviation].[fGetDeviationLogDate](d.DeviationId) AS Updated,
		td.strName AS RegisteredByDepartmentName,
		td2.strName AS HandledByDepartmentName,
		row_number() OVER (ORDER BY d.RegisterDate DESC) AS rownumber
	INTO #Filters 
	FROM Deviation.Deviation d INNER JOIN Deviation.Category c 
	ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = d.RegisteredByUser
	LEFT JOIN dbo.tblEmployee te2 ON te2.iEmployeeId = d.OwnerId
	LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = d.RegisteredByDepartment
	LEFT JOIN dbo.tblDepartment td2 ON td2.iDepartmentId = d.HandledByDepartment
	WHERE d.OwnerId = @iUserId
	AND ((d.State = @iState OR @iState IS NULL) AND d.State != 16)
	AND d.IsDeleted = 0;
	SELECT f.* FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;       
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteCustomFieldOptions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteCustomFieldOptions]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.CategoryCustomFieldOptions
	SET Deleted = 1
	WHERE OptionId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteCustomField]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteCustomField]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.CategoryCustomField
	SET Deleted = 1
	WHERE CategoryCustomFieldId IN (SELECT Id FROM @IdsTable)
	UPDATE Deviation.CategoryCustomFieldOptions
	SET Deleted = 1
	WHERE CategoryCustomFieldId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportHandbookDocumentStatistics]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportHandbookDocumentStatistics]
	@SecurityId AS INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @resultTable TABLE(period DATETIME, Approved INT)
	DECLARE @DateFrom DATETIME
	SET @DateFrom = (SELECT TOP 1 dtmCreated FROM m136_tblHandbook WHERE ideleted = 0 ORDER BY ihandbookid) 
	SET @DateFrom = (SELECT DATEADD(dd, DATEDIFF(dd, 0, @DateFrom), 0))
	SET @DateFrom = (SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, @DateFrom), 0))
	DECLARE @monthintervall INT
	SET @monthintervall = (SELECT DATEDIFF(MONTH, @DateFrom,GETDATE()))
	DECLARE @I INT
	SET @I = 0
	WHILE @I <= @monthintervall
	BEGIN
		INSERT INTO @resultTable(period)
		VALUES(@DateFrom)
		SET @DateFrom = DATEADD(MONTH,1,@DateFrom)
		SET @I = @I + 1
	END
   	DECLARE @Approved INT	
   	DECLARE @Period DATETIME
	DECLARE curPeriod CURSOR FOR
	SELECT period FROM @resultTable
	OPEN curPeriod
	FETCH NEXT FROM curPeriod INTO @Period
	WHILE @@FETCH_STATUS =0
	BEGIN	
		SELECT @Approved = (SELECT COUNT(DISTINCT iDocumentId) 
				FROM m136_tblDocument d
					WHERE d.iApproved = 1 and d.dtmPublish < @Period)
		UPDATE @resultTable 
		SET Approved = @Approved
		WHERE period = @Period;
	FETCH NEXT FROM curPeriod INTO @Period
	END
	CLOSE curPeriod
	DEALLOCATE curPeriod
	SELECT period AS Date, Approved
	FROM @resultTable
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SetVersionFlags]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SetVersionFlags] 
	-- Add the parameters for the stored procedure here
	@iDocumentId INT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @MaxVersion INT
	SET @MaxVersion = 0
	--Reset version flags
	UPDATE  m136_tblDocument set iLatestVersion = 0, iLatestApproved  = 0 
		WHERE iDocumentId = @iDocumentId 
	--Get entity that should be flagged as latest approved version
	SELECT @MaxVersion = MAX(iVersion)
		FROM m136_tblDocument d 
		WHERE iDeleted = 0 AND iApproved IN (1 ,4) AND iDocumentId = @iDocumentId AND dtmPublish <= GETDATE() 
	--set iLatestApproved flag
	UPDATE m136_tblDocument 
	SET
		iLatestApproved = 1 
	WHERE
		iDocumentId = @iDocumentId AND iApproved = 1 AND iVersion = @MaxVersion AND iDeleted = 0 AND dtmPublish <= GETDATE()          
	--Get entity that should be flagged as latest version
	SELECT @MaxVersion = MAX(iVersion)
		FROM m136_tblDocument d 
		WHERE iDocumentId = @iDocumentId
	--set iLatestVersion flag
	UPDATE  m136_tblDocument 
	SET  
		iLatestVersion = 1 
	WHERE 
		iDocumentId = @iDocumentId AND iVersion = @MaxVersion
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_RestoreDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_RestoreDocuments] 
	@UserId INT,
	@DocumentIds AS Item READONLY
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @FullName NVARCHAR(100);
            DECLARE @DocumentId INT;
            DECLARE CurDocumentId CURSOR FOR
                SELECT Id From @DocumentIds;
            SELECT
                @FullName = strFirstName + ' ' + strLastName
            FROM
                tblEmployee
            WHERE
                iEmployeeId = @UserId
            UPDATE
                m136_tblDocument
            SET
                iDeleted = 0,
                iAlterId = @UserId,
                strAlterer = @FullName
            WHERE
                iDocumentId IN (SELECT Id FROM @DocumentIds)        
            OPEN CurDocumentId;
            FETCH NEXT FROM CurDocumentId INTO @DocumentId;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                EXEC m136_SetVersionFlags @DocumentId;
                FETCH NEXT FROM CurDocumentId INTO @DocumentId;
            END
            CLOSE CurDocumentId;
            DEALLOCATE CurDocumentId;
            INSERT INTO CacheUpdate (ActionType, EntityId)
                SELECT 11, Id FROM @DocumentIds
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_RejectDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_RejectDocument] 
	@EntityId INT,
	@UserId INT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @DocumentId INT;
            SELECT @DocumentId = iDocumentId
                FROM dbo.m136_tblDocument
                WHERE iEntityId = @EntityId
                      AND iDeleted = 0
            UPDATE dbo.m136_tblDocument
            SET iApproved = 2,
                iDraft = 1,
                iApprovedById = @UserId,
                dtmApproved = getdate(),
                strApprovedBy = dbo.fnOrgGetUserName(@UserId, '', 0)
            WHERE iEntityId = @EntityId
                  AND iDeleted = 0
            EXEC dbo.m136_SetVersionFlags @DocumentId
            SELECT a.strEmail 
            FROM dbo.tblEmployee a 
                INNER JOIN dbo.m136_tblDocument b 
                ON a.iEmployeeId = b.iCreatedById 
            WHERE b.iEntityId = @EntityId
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteDocuments]
	@UserId AS INT,
	@DocumentIds AS [dbo].[Item] READONLY
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @FullName NVARCHAR(100);
            DECLARE @DocumentId INT;
            DECLARE CurDocumentId CURSOR FOR
                SELECT Id From @DocumentIds;
            SELECT
                @FullName = strFirstName + ' ' + strLastName
            FROM
                tblEmployee
            WHERE
                iEmployeeId = @UserId
            UPDATE
                m136_tblDocument
            SET
                iDeleted = 1,
                iAlterId = @UserId,
                strAlterer = @FullName
            WHERE
                iDocumentId IN (SELECT Id FROM @DocumentIds)
            DELETE
                FROM m136_relVirtualRelation
            WHERE
                iDocumentId IN (SELECT Id FROM @DocumentIds)
            OPEN CurDocumentId;
            FETCH NEXT FROM CurDocumentId INTO @DocumentId;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                EXEC m136_SetVersionFlags @DocumentId;
                FETCH NEXT FROM CurDocumentId INTO @DocumentId;
            END
            CLOSE CurDocumentId;
            DEALLOCATE CurDocumentId;
        COMMIT TRANSACTION;
        INSERT INTO CacheUpdate (ActionType, EntityId)
            SELECT 11, Id FROM @DocumentIds
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ArchiveDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ArchiveDocument] 
	@DocumentIds AS [dbo].[Item] READONLY,
	@UserId INT,
	@Description varchar(2000)
AS
BEGIN
	BEGIN TRY
        BEGIN TRANSACTION;
            UPDATE dbo.m136_tblDocument
                SET iApproved = 4,
                    iApprovedById = @UserId,
                    dtmApproved = getdate(),
                    strApprovedBy = dbo.fnOrgGetUserName(@UserId, '', 0),
                    strDescription = CASE WHEN @Description IS NULL THEN strDescription
                                     ELSE (@Description + ' ' + strDescription)
                                     END,
                    iDraft = 0
                WHERE iEntityId IN(
                        SELECT iEntityId 
                        FROM @DocumentIds AS doc
                        JOIN	m136_tblDocument d ON d.iDocumentId = doc.Id AND d.iLatestVersion = 1
                      )
            DECLARE @iDocumentId INT
            DECLARE curDocumentId CURSOR FOR 
                SELECT Id
                FROM @DocumentIds;
            OPEN curDocumentId; 
            FETCH NEXT FROM curDocumentId INTO @iDocumentId;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                EXEC dbo.m136_SetVersionFlags @iDocumentId
                FETCH NEXT FROM curDocumentId INTO @iDocumentId;
            END
            CLOSE curDocumentId;
            DEALLOCATE curDocumentId;
            INSERT INTO CacheUpdate (ActionType, EntityId)
                SELECT 11, Id FROM @DocumentIds
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SetCopyConfirms]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SetCopyConfirms]
	@iDocumentId INT,
	@CopyConfirm INT
AS
BEGIN
	DECLARE @iEntityId INT;
	select
		@iEntityId=iEntityId
	FROM
		m136_tblDocument d
	WHERE
		d.iDocumentId = @iDocumentId
		AND d.iVersion = (SELECT
								MAX(iVersion) 
							FROM
								m136_tblDocument
							WHERE
								iDocumentId = @iDocumentId)
	IF @iEntityId IS NOT NULL
	BEGIN
		DELETE FROM m136_tblCopyConfirms WHERE iEntityId=@iEntityId
		IF @CopyConfirm = 1
		BEGIN
			INSERT INTO m136_tblCopyConfirms(iEntityId) VALUES (@iEntityId)
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m147_LinkHandbookToRegisterItem]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_LinkHandbookToRegisterItem]
	@ChapterId INT,
    @RegisterItemId INT
AS
BEGIN
    BEGIN TRY
		BEGIN TRANSACTION 
            INSERT INTO
                m147_relRegisterItemCategory
                    (iRegisterItemId, iModuleId, iCategoryId, iInheritTypeId)
                VALUES
                    (@RegisterItemId, 136, @ChapterId, 2)
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (4, 0)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_GetRegisterItemsByTypeAllowMultipleNotInHandbook]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_GetRegisterItemsByTypeAllowMultipleNotInHandbook]
	@ChapterId INT,
    @TypeId INT,
    @AllowMultiple BIT
AS
BEGIN
    SELECT
        ri.iRegisterItemId,
        ri.iRegisterId,
        ri.strName
    FROM
        m147_tblRegisterItem ri
    WHERE
        eTypeId = @TypeId
        AND bAllowMultiple = @AllowMultiple
        AND (
			iRegisterItemId NOT IN (SELECT iRegisterItemId FROM m147_relRegisterItemCategory)
			OR NOT EXISTS (SELECT 1 FROM m147_relRegisterItemCategory
						  WHERE iRegisterItemId = ri.iRegisterItemId AND iCategoryId = @ChapterId))
END
GO
/****** Object:  StoredProcedure [dbo].[m147_DeleteHandbookRegisterItem]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_DeleteHandbookRegisterItem]
	@ChapterId INT,
    @RegisterItemIds AS [dbo].[Item] READONLY
AS
BEGIN
    BEGIN TRY
		BEGIN TRANSACTION 
            DELETE
                FROM m147_relRegisterItemCategory
            WHERE
                iCategoryId = @ChapterId
                AND iRegisterItemId IN (SELECT Id FROM @RegisterItemIds)
            DELETE
                FROM m147_relRegisterItemItem
            WHERE
                iItemId IN (SELECT iDocumentId FROM m136_tblDocument WHERE iHandbookId = @ChapterId)
                AND iRegisterItemId IN (SELECT Id FROM @RegisterItemIds)
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (4, 0)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_UpdateRegisterItemValue]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_UpdateRegisterItemValue]
	@RegisterItemId INT,
	@RegisterItemValue AS [dbo].[Items] READONLY
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION 
		SET NOCOUNT ON;
		DELETE dbo.m147_tblRegisterItemValue WHERE iRegisterItemId = @RegisterItemId 
			AND iRegisterItemValueId NOT IN (SELECT Id 
			FROM @RegisterItemValue);
		DECLARE @iRegisterItemValueId INT, @RegisterValue VARCHAR(200);
		DECLARE RegisterItemValueSet CURSOR FOR 
			SELECT Id, Value
			FROM @RegisterItemValue;
		OPEN RegisterItemValueSet; 
		FETCH NEXT FROM RegisterItemValueSet INTO @iRegisterItemValueId, @RegisterValue;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @iRegisterItemValueId IS NOT NULL AND @iRegisterItemValueId <> 0
			BEGIN
				UPDATE dbo.m147_tblRegisterItemValue
				SET RegisterValue = @RegisterValue
				WHERE iRegisterItemValueId = @iRegisterItemValueId 
			END
			ELSE
			BEGIN
				INSERT INTO dbo.m147_tblRegisterItemValue (iRegisterItemId
					, RegisterValue) 
				VALUES (@RegisterItemId
					, @RegisterValue);
			END
			FETCH NEXT FROM RegisterItemValueSet INTO @iRegisterItemValueId, @RegisterValue;
		END
		CLOSE RegisterItemValueSet;
		DEALLOCATE RegisterItemValueSet;
	COMMIT
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_UpdateRegisterItem]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_UpdateRegisterItem]
(
@iRegisterItemId INT,
@strName VARCHAR(200),
@strDescription VARCHAR(1000),
@eTypeId INT,
@bMandatory BIT,
@bAllowMultiple BIT
)
AS
BEGIN
	UPDATE m147_tblRegisterItem 
	SET strName = @strName
		, strDescription = @strDescription, eTypeId = @eTypeId, bMandatory = @bMandatory
		, bAllowMultiple = @bAllowMultiple 
	WHERE iRegisterItemId = @iRegisterItemId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UnlockDocumentByAdmin]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UnlockDocumentByAdmin]
	@DocumentId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @EntityId INT;
        SET @EntityId = (SELECT iEntityId FROM m136_tblDocument WHERE iDocumentId = @DocumentID AND iLatestVersion = 1);
        DELETE FROM
            m136_tblDocumentLock
        WHERE
            iEntityId = @EntityId
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UnlockDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UnlockDocument]
    @UserId INT,
	@DocumentId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @EntityId INT;
        SET @EntityId = (SELECT iEntityId FROM m136_tblDocument WHERE iDocumentId = @DocumentID AND iLatestVersion = 1);
        DELETE FROM
            m136_tblDocumentLock
        WHERE
            iEntityId = @EntityId
            AND iEmployeeId = @UserId
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spRemoveSubscription]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_spRemoveSubscription](@iSecurityId int, @iHandbookId int, @iSubscriptionTypeId int)
AS
begin
	if @iSubscriptionTypeId = 1
		begin
			update m136_tblSubscribe set iFrontPage=0 where iEmployeeId=@iSecurityId AND iHandbookId=@iHandbookId
		end
	else if @iSubscriptionTypeId = 2 
		begin
			update m136_tblSubscribe set iEmail=0 where iEmployeeId=@iSecurityId AND iHandbookId=@iHandbookId
		end
	else if @iSubscriptionTypeId = 3
		begin
			update m136_tblSubscribe set iPDA=0 where iEmployeeId=@iSecurityId AND iHandbookId=@iHandbookId
		end
	delete from m136_tblSubscribe where iEmployeeId=@iSecurityId AND iHandbookId=@iHandbookId AND iEmail=0 AND iFrontPage=0 AND iPDA=0
end
GO
/****** Object:  StoredProcedure [dbo].[m136_m147GetCategoryItemsTags]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_m147GetCategoryItemsTags]
(
@iSecurityId int,
@iHandbookId int,
@bIncludeHigherDocs bit
) AS
if @bIncludeHigherDocs=0
begin
	SELECT
		DISTINCT rel.iRegisterItemId,
		regitem.strName  as strTagName,
		reg.strName as strRegisterName
	FROM m147_relRegisterItemItem rel
		left outer join m147_tblRegisterItem regitem on rel.iRegisterItemId=regitem.iRegisterItemId
		left outer join m147_tblRegister reg on regitem.iRegisterId=reg.iRegisterId
	where
		rel.iModuleId=136
		and rel.iRegisterItemId>0
		and iItemId in (select iDocumentId from m136_tbldocument d where iHandbookid = @iHandbookId AND d.iDeleted=0)
	order by
		strRegisterName asc,
		strTagName asc
end
else
begin
	SELECT
		DISTINCT rel.iRegisterItemId,
		regitem.strName as strTagName,
		reg.strName as strRegisterName
	FROM m147_relRegisterItemItem rel
		left outer join m147_tblRegisterItem regitem on rel.iRegisterItemId=regitem.iRegisterItemId
		left outer join m147_tblRegister reg on regitem.iRegisterId=reg.iRegisterId
	where
		rel.iModuleId=136
		and rel.iRegisterItemId>0
		and iItemId in (
			select iDocumentId
			from m136_tbldocument
			where iHandbookid in (
				select iCategoryId
				from dbo.m147_fnGetCategoryParents(@iSecurityId, 136, @iHandbookId, 1)
			)
			OR iHandbookId in (
				SELECT iHandbookId from m136_tblHandbook WHERE iLevelType=1 AND iDeleted=0
			)
		)

	order by
		strRegisterName asc,
		strTagName asc
end
GO
/****** Object:  StoredProcedure [dbo].[m136_LockDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_LockDocument]
    @UserId INT,
	@DocumentId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @EntityId INT;
        SET @EntityId = (SELECT iEntityId FROM m136_tblDocument WHERE iDocumentId = @DocumentID AND iLatestVersion = 1);
        INSERT INTO
            m136_tblDocumentLock
                (iEntityId, iEmployeeId, dtmLocked)
            VALUES
                (@EntityId, @UserId, GETDATE())
        SELECT SCOPE_IDENTITY();
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_listRelatedDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_listRelatedDocuments]
	@iSecurityId int = 0,
	@iEntityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    declare @docTbl table(iDocumentId int not null)
	insert into @docTbl
	SELECT
		iItemId
	FROM
		m136_relInfo rel
	where
		rel.iEntityId=@iEntityId
		AND rel.iRelationTypeId=136


	select
		d.iDocumentId,
		d.strName,
		d.iHandbookId,
		h.strName as strChapterName
	from m136_tblDocument d
		join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
	where
		iDocumentId in (select iDocumentId from @docTbl)
		and	d.iDeleted = 0
		and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
			and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
			and dd.iDraft = 0)
		and d.iApproved=1
	order by
		strChapterName, d.strName

END
GO
/****** Object:  StoredProcedure [Deviation].[RestoreDeviation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[RestoreDeviation] 
	@DeviationId INT
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.Deviation
    SET
        Deviation.Deviation.IsDeleted = 0
    WHERE DeviationId = @DeviationId;
END
GO
/****** Object:  StoredProcedure [Risk].[RemoveRiskAreaImage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[RemoveRiskAreaImage]
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE Risk.Areas
	SET
	    Icon = NULL
	WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[RemoveFileAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[RemoveFileAttachment]
	@Id INT
AS
SET NOCOUNT ON
BEGIN
	DELETE FROM Deviation.DeviationAttachment
	WHERE DeviationAttachmentId = @Id
END
GO
/****** Object:  StoredProcedure [Deviation].[SearchServiceAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[SearchServiceAreas] 
	@Keyword NVARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
    SELECT sa.Id, 
		sa.Name, 
		sa.Description, 
		sa.SortOrder, 
		sa.IsDeleted 
    FROM Deviation.ServiceAreas sa
    WHERE (@Keyword IS NULL
		OR sa.Name LIKE '%' + @Keyword + '%'
		OR sa.Description LIKE '%' + @Keyword + '%')
		AND sa.IsDeleted = 0
    ORDER BY sa.SortOrder, sa.Name;
END
GO
/****** Object:  StoredProcedure [Risk].[SearchRiskAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[SearchRiskAreas] 
	@Keyword NVARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT * FROM Risk.Areas a
    WHERE (a.Name LIKE '%' + @Keyword + '%' 
		OR a.[Description] LIKE '%' + @Keyword + '%')
    AND (a.iDeleted = 0);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_doCopyConfirms]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_doCopyConfirms]
(
	@iDocumentId INT
)
AS
BEGIN
	DECLARE @iEntityId INT;
	select
		@iEntityId=iEntityId
	FROM
		m136_tblDocument d
	WHERE
		d.iDocumentId = @iDocumentId
		AND d.iVersion = (SELECT
								MAX(iVersion) 
							FROM
								m136_tblDocument
							WHERE
								iDocumentId = @iDocumentId)
	IF @iEntityId IS NOT NULL
	BEGIN
		DECLARE @iPreviousVersionEntityId INT;
		SELECT
			@iPreviousVersionEntityId=iEntityId
		FROM
			m136_tblDocument d
		WHERE
			d.iDocumentId = @iDocumentId
			AND d.iVersion = (SELECT
									MAX(iVersion) 
								FROM
									m136_tblDocument
								WHERE
									iDocumentId = @iDocumentId
									AND iEntityId <> @iEntityId)
		IF @iPreviousVersionEntityId IS NOT NULL
		BEGIN
			INSERT INTO m136_tblConfirmRead(iEntityId, iEmployeeId, dtmConfirm, strEmployeeName)
				SELECT
					@iEntityId, iEmployeeId, dtmConfirm, strEmployeeName
				FROM
					m136_tblConfirmRead
				WHERE
					iEntityId=@iPreviousVersionEntityId
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_DeleteExportJobs]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_DeleteExportJobs]
	@Minutes INT
AS
BEGIN
	DECLARE @Table TABLE (Col VARCHAR(1000));
	DECLARE @SomeHoursAgo DATETIME = DATEADD(MINUTE, -@Minutes, GETDATE());
	INSERT INTO @Table (Col) SELECT FilePath 
		FROM dbo.m136_ExportJob WHERE ProcessStatus = 2 AND @SomeHoursAgo >= CreatedDate;
	DELETE dbo.m136_ExportJob WHERE ProcessStatus = 2 AND @SomeHoursAgo >= CreatedDate;
	SELECT Col AS [FileName] FROM @Table;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateFolderDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: OCT 20, 2015
-- Description:	Update folder documents
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateFolderDocuments]
	@Documents AS [dbo].[Documents] READONLY,
	@HandbookId as INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE doc
	SET doc.iSort = doc1.iSort
	FROM [dbo].[m136_tblDocument] doc
		INNER JOIN @Documents doc1
		ON doc.iDocumentId = doc1.iDocumentId; 
    UPDATE doc
	SET doc.iSort = doc1.iSort
	FROM [dbo].[m136_relVirtualRelation] doc
		INNER JOIN @Documents doc1
		ON doc.iDocumentId = doc1.iDocumentId;
		
	SELECT doc.iHandbookId, doc.iDocumentId, doc.iSort INTO #VirtualDocuments
		FROM @Documents doc
		WHERE doc.iVirtual = 1 
			AND doc.iDocumentId NOT IN (SELECT iDocumentId
				FROM [dbo].[m136_relVirtualRelation] doc1 WHERE doc1.iHandbookId = @HandbookId);
				
	INSERT INTO [dbo].[m136_relVirtualRelation]
		SELECT @HandbookId, iDocumentId, iSort FROM #VirtualDocuments;
	
	DELETE [dbo].[m136_relVirtualRelation] 
		WHERE iHandbookId = @HandbookId AND iDocumentId NOT IN (SELECT doc1.iDocumentId 
			FROM @Documents doc1 WHERE iVirtual = 1);
	DROP TABLE #VirtualDocuments;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 18, 2015
-- Description:	Delete attachment.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteAttachment] 
	@iItemId	INT
AS
BEGIN
	SET NOCOUNT ON;

    DELETE dbo.m136_tblBlob
			WHERE iItemId = @iItemId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateNewsCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateNewsCategory]
    @ParentCategoryId INT,
    @Name VARCHAR(100),
    @Description VARCHAR(1000),
    @Access TINYINT,
    @ShownIn TINYINT,
    @UserId INT
AS
BEGIN
    INSERT INTO
        m123_tblCategory
            (iParentCategoryId, strName, strDescription, iPublishLocation, iOwnerId, iAccess, iShownIn)
        VALUES
            (@ParentCategoryId, @Name, @Description, 0, @UserId, @Access, @ShownIn)
            
    SELECT SCOPE_IDENTITY();
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteDocumentFields]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 20, 2015
-- Description:	Delete document fields
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteDocumentFields]
	-- Add the parameters for the stored procedure here
	@FieldIds AS [dbo].[Item] READONLY
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE dbo.m136_tblMetaInfoTemplateRecords
    SET
        iDeleted = 1
	    WHERE iMetaInfoTemplateRecordsId IN (SELECT Id FROM @FieldIds);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteRelatedInfo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 06, 2015
-- Description:	Delete related information that includes attachment, document, images.
--              For types not document we have to delete tblBlob as well.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteRelatedInfo]
	@iEntityId			INT,
	@iItemIds			dbo.Item READONLY,
	@iRelationTypeId	INT
AS
BEGIN
	SET NOCOUNT ON;

    DELETE dbo.m136_relInfo
        WHERE iEntityId = @iEntityId
        AND iRelationTypeId = @iRelationTypeId
        AND iItemId IN (SELECT Id FROM @iItemIds);

    IF (@iRelationTypeId <> 136)
    BEGIN
		IF NOT EXISTS(SELECT COUNT(1) FROM dbo.m136_tblBlob 
			WHERE iItemId IN (SELECT iItemId FROM dbo.m136_relInfo WHERE iRelationTypeId <> 136))
		BEGIN
			DELETE dbo.m136_tblBlob
				WHERE iItemId IN (SELECT Id FROM @iItemIds);
		END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteNewsCategories]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteNewsCategories]
    @NewsCategoryIds AS [dbo].[Item] READONLY
AS
BEGIN

    DELETE FROM
        m123_relInfoCategory
    WHERE
        iCategoryId IN (SELECT Id FROM @NewsCategoryIds);
        
    DELETE FROM
        m123_tblCategory
    WHERE
        iCategoryId IN (SELECT Id FROM @NewsCategoryIds);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteDocumentTemplates]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 16, 2015
-- Description:	Delete document templates by ids
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteDocumentTemplates]
	-- Add the parameters for the stored procedure here
	@DocumentTypeIds AS [dbo].[Item] READONLY
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
	UPDATE dbo.m136_tblDocumentType
	SET
	    dbo.m136_tblDocumentType.iDeleted = 1
	    WHERE dbo.m136_tblDocumentType.iDocumentTypeId IN (SELECT Id FROM @DocumentTypeIds);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentFieldsAndRelates]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_GetDocumentFieldsAndRelates]
@iEntityId INT
AS
BEGIN
	DECLARE @DocumentTypeId INT
	SELECT	@DocumentTypeId = d.iDocumentTypeId
	FROM m136_tblDocument d
		JOIN m136_tblDocumentType t 
			ON d.iDocumentTypeId = t.iDocumentTypeId
	WHERE	d.iEntityId = @iEntityId
	-- Get related attachment of document view.
	SELECT r.iItemId,
		   b.strName,
		   r.iPlacementId,
		   r.iProcessrelationTypeId,
		   b.strExtension 
	FROM m136_relInfo r 
		 JOIN m136_tblBlob b 
			ON r.iItemId = b.iItemId
	WHERE r.iEntityId = @iEntityId 
		  AND r.iRelationTypeId = 20
	-- Get related Document of document view.
	SELECT d.strName, 
		   d.iDocumentId,
		   r.iPlacementId,
		   d.iHandbookId,
		   h.strName AS strFolderName,
		   r.iProcessRelationTypeId,
		   d.iDocumentTypeId,
		   h.iLevelType,
		   0 as Virtual,
		   dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
		   d.iVersion as Version,
		   d.dtmApproved,
		   d.strApprovedBy,
		   dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible
	FROM m136_relInfo r
		JOIN m136_tblDocument d 
			ON	r.iItemId = d.iDocumentId 
				AND d.iLatestApproved = 1
		JOIN m136_tblHandbook h 
			ON d.iHandbookId = h.iHandbookId
	WHERE	r.iEntityId = @iEntityId 
			AND r.iRelationTypeId = 136
	ORDER BY r.iSort
		--Get Related Image	of document view.	
	SELECT	r.iItemId,
			r.iPlacementId,
			r.iScaleDirId,
			r.iSize,
			r.iVJustifyId, 
			r.iHJustifyId,
			r.iWidth, 
			r.iHeight,
			r.strCaption,
			r.strURL, 
			r.iNewWindow
	FROM  m136_relInfo r 
	WHERE iEntityId = @iEntityId 
		  AND (r.iRelationTypeId = 5 OR r.iRelationTypeId = 50)
		  AND r.iPlacementId > 0
	ORDER BY r.iRelationTypeId, 
			 r.iSort
	--Get fields content of document view.
	SELECT	mi.iInfoTypeId, 
			mi.strName strFieldName, 
			mi.strDescription strFieldDescription,
			InfoId = COALESCE (mit.iMetaInfoTextId, mid.iMetaInfoDateId, mii.iMetaInfoNumberId, mir.iMetaInfoRichTextId),
			NumberValue = mii.value, 
			DateValue = mid.value, 
			TextValue = mit.value, 
			RichTextValue = mir.value,                            
			mi.iMetaInfoTemplateRecordsId, 
			mi.iFieldProcessType, rdi.iMaximized,
			rdi.iShowOnPDA
	FROM [dbo].m136_tblMetaInfoTemplateRecords mi
		 JOIN [dbo].m136_relDocumentTypeInfo rdi 
			ON rdi.iDocumentTypeId = @DocumentTypeId 
			   AND rdi.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoDate mid 
			ON mid.iEntityId = @iEntityId 
			   AND mid.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoNumber mii 
			ON mii.iEntityId = @iEntityId 
			   AND mii.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoText mit 
			ON mit.iEntityId = @iEntityId 
			   AND mit.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoRichText mir 
			ON mir.iEntityId = @iEntityId 
			   AND mir.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
	WHERE rdi.iDeleted = 0
	ORDER BY rdi.iSort
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetFoldersRecursive]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetFoldersRecursive]
	@iHandbookId INT,
	@iSecurityId INT,
	@bCheckSecurity BIT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT h.iHandbookId as Id,
			h.iHandbookId,
			h.strName,
			-1 as iDocumentTypeId,
			NULL as Version,
			iLevelType as LevelType,
			NULL as dtmApproved,
			NULL as strApprovedBy,
			NULL as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			h.iSort,
			NULL as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as [Path],
			0 as HasAttachment,
			NULL as iApproved,
			NULL as iDraft,
			ISNULL(h.iParentHandbookId,0) AS iParentHandbookId,
			[dbo].[fn136_GetChildCount] (@iSecurityId, h.iHandbookId, 1) AS iChildCount,
            0 AS IsDocument
	FROM	m136_tblHandbook h WHERE h.iHandbookId IN (SELECT  iHandbookId  FROM 
		[dbo].[m136_GetHandbookRecursive](@iHandbookId, @iSecurityId, @bCheckSecurity));
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetParentPathExNew]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn136_GetParentPathExNew](@chapterId INT)
RETURNS NVARCHAR(4000)
AS
BEGIN
	DECLARE @Path varchar(4000);
	WITH Parents AS
	(
		SELECT 
			iParentHandbookId,
			strName
		FROM 
			[dbo].[m136_tblHandbook] 
		WHERE
			iHandbookId = @chapterId
		UNION ALL
		SELECT 
			h.iParentHandbookId,
			h.strName
		FROM 
			[dbo].[m136_tblHandbook] h
			INNER JOIN Parents
				ON	(h.iHandbookId = Parents.iParentHandbookId AND (h.iHandbookId <> h.iParentHandbookId OR h.iParentHandbookId IS NULL))
	)
	SELECT
		@Path = strName + COALESCE('/' + @Path, '')
	FROM
		Parents
	RETURN @Path
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SearchFolders]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_SearchFolders]
	@iUserId INT,
	@strName VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT iHandbookId AS Id
		, strName
		, iParentHandbookId AS iHandbookId
		, iLevel
		, iViewTypeId
		, iLevelType AS LevelType
		, iDepartmentId AS DepartmentId
		, [dbo].[fn136_GetParentPathExNew](iHandbookId) AS [Path]
		, -1 AS iDocumentTypeId
    FROM [dbo].[m136_tblHandbook]
    WHERE strName LIKE '%' + @strName + '%'
		AND [dbo].[fnHandbookHasReadContentsAccess](@iUserId, iHandbookId) = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentFieldsAndRelates]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentFieldsAndRelates]
	@iEntityId INT
AS
BEGIN
	DECLARE @DocumentTypeId INT;
	SELECT	@DocumentTypeId = d.iDocumentTypeId
	FROM m136_tblDocument d
		JOIN m136_tblDocumentType t 
			ON d.iDocumentTypeId = t.iDocumentTypeId
	WHERE	d.iEntityId = @iEntityId;
	-- Get related attachment of document view.
	SELECT r.iItemId,
		   b.strName,
		   r.iPlacementId,
		   r.iProcessrelationTypeId,
		   b.strExtension,
		   b.strDescription,
		   r.iSort 
	FROM m136_relInfo r 
		 JOIN m136_tblBlob b 
			ON r.iItemId = b.iItemId
	WHERE r.iEntityId = @iEntityId 
		  AND r.iRelationTypeId = 20
	ORDER BY r.iSort, b.strName;
	-- Get related Document of document view.
	SELECT d.strName, 
		   d.iDocumentId,
		   r.iPlacementId,
		   d.iHandbookId,
		   h.strName AS strFolderName,
		   r.iProcessRelationTypeId,
		   d.iDocumentTypeId,
		   r.iSort,
		   h.iLevelType,
		   d.iApproved,
		   dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
		   d.iVersion as Version,
		   d.dtmCreated,
		   d.dtmAlter,
		   d.dtmApproved,
		   d.strApprovedBy,
		   d.dtmPublishUntil,
		   dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
		   d.iReadCount AS ReadCount,
		   d.iInternetDoc,
		   0 as Virtual,
		   d.iDraft,
		   d.iDeleted
	FROM m136_relInfo r
		JOIN m136_tblDocument d 
			ON	r.iItemId = d.iDocumentId 
				AND d.iLatestVersion = 1
		JOIN m136_tblHandbook h 
			ON d.iHandbookId = h.iHandbookId
	WHERE	r.iEntityId = @iEntityId 
			AND r.iRelationTypeId = 136
	ORDER BY r.iSort, d.strName;
	--Get Related Image	of document view.	
	SELECT	r.iItemId,
			r.iPlacementId,
			r.iScaleDirId,
			r.iSize,
			r.iVJustifyId, 
			r.iHJustifyId,
			r.iWidth, 
			r.iHeight,
			r.strCaption,
			r.strURL, 
			r.iNewWindow,
			r.iSort
	FROM  m136_relInfo r 
	WHERE iEntityId = @iEntityId 
		  AND (r.iRelationTypeId = 5 OR r.iRelationTypeId = 50)
		  AND r.iPlacementId > 0
	ORDER BY r.iSort, r.iItemId;
	--Get fields content of document view.
	SELECT	mi.iInfoTypeId, 
			mi.strName strFieldName, 
			mi.strDescription strFieldDescription,
			InfoId = COALESCE (mit.iMetaInfoTextId, mid.iMetaInfoDateId, mii.iMetaInfoNumberId, mir.iMetaInfoRichTextId),
			NumberValue = mii.value, 
			DateValue = mid.value, 
			TextValue = mit.value, 
			RichTextValue = mir.value,                            
			mi.iMetaInfoTemplateRecordsId, 
			mi.iFieldProcessType,
            rdi.iMaximized,
            rdi.iMandatory
	FROM [dbo].m136_tblMetaInfoTemplateRecords mi
		 JOIN [dbo].m136_relDocumentTypeInfo rdi 
			ON rdi.iDocumentTypeId = @DocumentTypeId 
			   AND rdi.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoDate mid 
			ON mid.iEntityId = @iEntityId 
			   AND mid.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoNumber mii 
			ON mii.iEntityId = @iEntityId 
			   AND mii.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoText mit 
			ON mit.iEntityId = @iEntityId 
			   AND mit.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
		 LEFT JOIN [dbo].m136_tblMetaInfoRichText mir 
			ON mir.iEntityId = @iEntityId 
			   AND mir.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
	WHERE rdi.iDeleted = 0
	ORDER BY rdi.iSort;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetParentPath]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[fn136_GetParentPath]
(
@iChapterId int
)
returns varchar(1000)
as
Begin
declare @retval varchar(1000)
declare @iParentId int
declare @strCatName varchar(100)
SELECT @strCatName = strName from m136_tblHandbook where iHandbookId = @iChapterId
Select @iParentId = iParentHandbookId from m136_tblHandbook where iHandbookId = @iChapterId
if @iParentId <> 0
		Select @retval = isnull(dbo.fn136_GetParentPath(@iParentId), '') + ','

Select @retval = isnull(@retval, '') + isnull(@strCatname, '-1')
return @retval
End
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetParentIds]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[fn136_GetParentIds]
(
@iChapterId int
)
returns varchar(100)
as
Begin
declare @retval varchar(100)
declare @iParentId int
Select @iParentId = iParentHandbookId from m136_tblHandbook where iHandbookId = @iChapterId
if @iParentId <> 0
		Select @retval = isnull(dbo.fn136_GetParentIds(@iParentId), '') + ','

Select @retval = isnull(@retval, '') + isnull(cast(@iChapterId as varchar(10)), '-1')
return @retval
End
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetDocumentRegisterItemValues]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_GetDocumentRegisterItemValues]
    @DocumentId INT
AS
BEGIN
    SELECT
        riv.iRegisterItemValueId,
        riv.iRegisterItemId,
        riv.RegisterValue,
        CASE
            WHEN EXISTS (SELECT 1 
                         FROM m147_relRegisterItemItem
                         WHERE
                            iItemId = @DocumentId
                            AND iRegisterItemValueId = riv.iRegisterItemValueId
                            AND iRegisterItemId = riv.iRegisterItemId) THEN 1
            ELSE 0
        END AS IsTagged
    FROM
        m147_tblRegisterItemValue riv
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_AddRegisterItem]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_AddRegisterItem]
(
@iRegisterId INT,
@strName VARCHAR(200),
@strDescription VARCHAR(1000),
@eTypeId INT,
@bMandatory BIT,
@bAllowMultiple BIT,
@iRegisterItemParentId INT = null
)
AS
BEGIN
	INSERT INTO m147_tblRegisterItem (iRegisterId, iRegisterItemParentId, strName, strDescription, eTypeId, bMandatory, bAllowMultiple)
				VALUES (@iRegisterId, @iRegisterItemParentId, @strName, @strDescription, @eTypeId, @bMandatory, @bAllowMultiple)
	SELECT cast(@@identity AS INT) AS nyid
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_AddMetaRegister]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 28, 2015
-- Description:	add meta register
-- =============================================
CREATE PROCEDURE [dbo].[m147_be_AddMetaRegister]
(
	@Name varchar(300),
	@Draft bit,
	@Obsolete bit
)
AS
BEGIN
		INSERT INTO m147_tblRegister (strName, bObsolete, bKladd) VALUES (@Name, @Obsolete, @Draft)
		SELECT cast(@@identity AS int) AS nyid
END
GO
/****** Object:  StoredProcedure [dbo].[m136_HasLockDocumentWithId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_HasLockDocumentWithId]
	@LockId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @HasLock INT = 0;
        IF EXISTS (SELECT 1 FROM m136_tblDocumentLock WHERE iLockId = @LockId)
        BEGIN
            SET @HasLock = 1
        END
        SELECT @HasLock
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_UntagDocumentRegisterItemValues]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_UntagDocumentRegisterItemValues]
    @RegisterItemItemIds AS [dbo].[Item] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DELETE FROM
            m147_relRegisterItemItem
        WHERE
            iAutoId IN (SELECT Id FROM @RegisterItemItemIds)
        INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (4, 0)
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_LinkDocumentToRegisterItemValues]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_LinkDocumentToRegisterItemValues]
    @ItemValues AS [dbo].[LinkDocumentRegisterItemValues] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DELETE FROM
            m147_relRegisterItemItem
        WHERE
            iItemId IN (SELECT DocumentId FROM @ItemValues)
            AND iRegisterItemValueId IN (SELECT RegisterItemValueId FROM @ItemValues)
        INSERT INTO
            m147_relRegisterItemItem
                (iRegisterItemId, iModuleId, iCategoryId, iItemId, iRegisterItemValueId)
            SELECT
                RegisterItemId,
                136,
                0,
                DocumentId,
                RegisterItemValueId
            FROM
                @ItemValues
        INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (4, 0)
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetRegisters]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JAN 05, 2015
-- Description:	GET REGISTERS
-- =============================================
CREATE PROCEDURE [dbo].[m147_be_GetRegisters]
	@iRegisterId INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	SELECT * FROM [dbo].[m147_tblRegister] WHERE (iRegisterId = @iRegisterId OR @iRegisterId IS NULL) AND bObsolete = 0;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetUserEmailSubsciptionsFolders]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetUserEmailSubsciptionsFolders]
	@iSecurityId INT
AS
SET NOCOUNT ON
BEGIN
	SELECT
		h.iHandbookId as Id,	
		h.strName,
		iLevelType as LevelType,
		iDepartmentId as DepartmentId
	FROM	
		m136_tblHandbook h
		INNER JOIN m136_tblSubscribe sb
			ON h.iHandbookId = sb.iHandbookId
	WHERE
		h.iDeleted = 0
		AND sb.iEmployeeId = @iSecurityId
		AND sb.iEmail = 1
	ORDER BY
		h.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetUserEmailSubsciptions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetUserEmailSubsciptions]
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
		SELECT	sh.iHandbookId
		FROM	m136_tblSubscribe sh
		WHERE	sh.iEmployeeId = @iSecurityId 
			AND sh.iEmail = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_UpdateMetaRegister]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 28, 2015
-- Description:	Update meta register
-- =============================================
CREATE PROCEDURE [dbo].[m147_be_UpdateMetaRegister]
(
	@RegisterId INT,
	@Name VARCHAR(300),
	@Draft BIT,
	@Obsolete BIT
)
AS
BEGIN
		UPDATE m147_tblRegister 
		SET strName = @Name, bObsolete = @Obsolete, bKladd = @Draft 
		WHERE iRegisterId = @RegisterId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDocumentTitle]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateDocumentTitle] 
	-- Add the parameters for the stored procedure here
	@iEntityId int = 0,
	@strTitle nvarchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE [dbo].[m136_tblDocument]
        SET strName = @strTitle
        WHERE iEntityId = @iEntityId
    DECLARE @DocumentId INT
    SELECT @DocumentId = idocumentId
    FROM dbo.m136_tblDocument
    WHERE iEntityId = @iEntityId
    IF(@DocumentId IS NOT NULL)
    BEGIN
		INSERT INTO dbo.CacheUpdate (ActionType, EntityId)
		VALUES (11, @DocumentId);
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDocumentTemplateInfo]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 31, 2015
-- Description:	Update document template information
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDocumentTemplateInfo]
	@iDocumentTypeId INT,
	@MetaInfo AS [dbo].[DocumentTypeInfoTable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iEntityId INT, 
		@_iDocumentTypeId INT, 
		@iMetaInfoTemplateRecordsId INT, 
		@iSort INT, 
		@iDeleted INT, 
		@iShowOnPDA INT,
		@iMandatory INT,
		@iMaximized INT;
	DECLARE Metainfo CURSOR FOR 
		SELECT iEntityId 
			, iDocumentTypeId
			, iMetaInfoTemplateRecordsId
			, iSort
			, iDeleted
			, iShowOnPDA
			, iMandatory
			, iMaximized
		FROM @MetaInfo;
	OPEN Metainfo; 
	FETCH NEXT FROM Metainfo INTO @iEntityId, @_iDocumentTypeId, @iMetaInfoTemplateRecordsId, @iSort, @iDeleted, @iShowOnPDA, @iMandatory, @iMaximized;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF EXISTS(SELECT * FROM  dbo.m136_relDocumentTypeInfo mrdti WHERE mrdti.iDocumentTypeInfoId = @iEntityId 
			OR (mrdti.iDocumentTypeId = @iDocumentTypeId AND mrdti.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId))
		BEGIN
			UPDATE dbo.m136_relDocumentTypeInfo
			SET
			    dbo.m136_relDocumentTypeInfo.iSort = @iSort,
			    dbo.m136_relDocumentTypeInfo.iDeleted = @iDeleted,
			    dbo.m136_relDocumentTypeInfo.iShowOnPDA = @iShowOnPDA,
			    dbo.m136_relDocumentTypeInfo.iMandatory = @iMandatory,
			    dbo.m136_relDocumentTypeInfo.iMaximized = @iMaximized
			WHERE (iDocumentTypeInfoId = @iEntityId) 
				OR (iDocumentTypeId = @iDocumentTypeId AND iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId)
		END
		ELSE
		BEGIN
			DECLARE @NewDocumentTypeInfoId INT;
			SELECT @NewDocumentTypeInfoId = MAX(iDocumentTypeInfoId) FROM dbo.m136_relDocumentTypeInfo mrdti;
			SET IDENTITY_INSERT dbo.m136_relDocumentTypeInfo ON;
			INSERT INTO dbo.m136_relDocumentTypeInfo
			(
			    iDocumentTypeInfoId,
			    iDocumentTypeId,
			    iMetaInfoTemplateRecordsId,
			    iSort,
			    iDeleted,
			    iShowOnPDA,
			    iMandatory,
			    iMaximized
			)
			VALUES
			(
			    (ISNULL(@NewDocumentTypeInfoId, 0) + 1),
			    @iDocumentTypeId,
			    @iMetaInfoTemplateRecordsId,
			    @iSort,
			    @iDeleted,
			    @iShowOnPDA,
			    @iMandatory,
			    @iMaximized
			);
		END
		FETCH NEXT FROM Metainfo INTO @iEntityId, @iDocumentTypeId, @iMetaInfoTemplateRecordsId, @iSort, @iDeleted, @iShowOnPDA, @iMandatory, @iMaximized;
	END
	CLOSE Metainfo;
	DEALLOCATE Metainfo;
	DELETE [dbo].[m136_relDocumentTypeInfo] WHERE iDocumentTypeId = @iDocumentTypeId
		AND iMetaInfoTemplateRecordsId NOT IN (SELECT iMetaInfoTemplateRecordsId 
		FROM @MetaInfo WHERE [@MetaInfo].iDocumentTypeId = @iDocumentTypeId);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDocumentTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 16, 2015
-- Description:	Update document template
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDocumentTemplate]
	-- Add the parameters for the stored procedure here
	@iDocumentTypeId INT,
	@strName VARCHAR(100),
	@strDescription VARCHAR(4000),
	@bIsProcess BIT,
	@bInactive BIT,
	@ViewMode INT,
	@Type INT,
	@HideFieldNumbering BIT,
	@HideFieldName BIT,
	@iSort INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE dbo.m136_tblDocumentType
    SET
        strName			= @strName,
        strDescription	= @strDescription,
        bIsProcess		= @bIsProcess,
        bInactive		= @bInactive,
        ViewMode		= @ViewMode,
        [Type]			= @Type,
        HideFieldNumbering = @HideFieldNumbering,
        HideFieldName	= @HideFieldName,
        iSort			= @iSort
    WHERE dbo.m136_tblDocumentType.iDocumentTypeId = @iDocumentTypeId;
	
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDocumentField]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 20, 2015
-- Description:	Update document field
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDocumentField]
	-- Add the parameters for the stored procedure here
	@iFieldId INT,
	@strName VARCHAR(100),
	@strDescription VARCHAR(4000),
	@iInfoTypeId INT,
	@DefaultIntValue INT,
	@DefaultTextValue VARCHAR(7000),
	@DefaultDateValue DATETIME,
	@iFlag INT,
	@iFieldProcessType INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE dbo.m136_tblMetaInfoTemplateRecords
	SET
	    strName = @strName, -- varchar
	    strDescription = @strDescription, -- varchar
	    iInfoTypeId = @iInfoTypeId, -- int
	    DefaultIntValue = @DefaultIntValue, -- int
	    DefaultTextValue = @DefaultTextValue, -- varchar
	    DefaultDateValue = @DefaultDateValue, -- datetime
	    iFlag = @iFlag, -- int
	    iFieldProcessType = @iFieldProcessType -- int
	WHERE iMetaInfoTemplateRecordsId = @iFieldId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDocument]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateDocument] 
	@iEntityId				INT,
	@strName				VARCHAR(200),
	@RelatedAttachments		AS [dbo].[RelatedInfoTable] READONLY,
	@RelatedDocuments		AS [dbo].[RelatedInfoTable] READONLY,
	@FieldContents			AS [dbo].[FieldContent] READONLY,
	@File					[image],
	@UrlOrFileName			NVARCHAR(4000),
	@UrlOrFileProperties	NVARCHAR(4000),
	@strDescription			NVARCHAR(2000),
	@strAuthor				VARCHAR(200),
	@dtmPublish				DATETIME,
	@dtmPublishUntil		DATETIME,
	@iCompareToVersion		INT,
	@iInternetDoc			INT,
	@iHandbookId			INT,
    @iOrientation           INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE dbo.m136_tblDocument
	SET [strName]				= @strName,
		[File]					= @File,
		[UrlOrFileName]			= @UrlOrFileName,
		[UrlOrFileProperties]	= @UrlOrFileProperties,
		[strDescription]		= @strDescription,
		[strAuthor]				= @strAuthor,
		[dtmPublish]			= @dtmPublish,
		[dtmPublishUntil]		= @dtmPublishUntil,
		[iCompareToVersion]		= @iCompareToVersion,
		[iInternetDoc]			= @iInternetDoc,
		[iHandbookId]			= @iHandbookId,
        [iOrientation]          = @iOrientation
	WHERE iEntityId = @iEntityId;   
	UPDATE r
		SET r.iSort = rd.iSort,
		r.iPlacementId = rd.iPlacementId,
		r.iProcessRelationTypeId = rd.iProcessRelationTypeId
	FROM dbo.m136_relInfo r INNER JOIN @RelatedDocuments rd 
		ON r.iItemId = rd.iItemId
	WHERE r.iEntityId = @iEntityId
		AND r.iRelationTypeId = 136; -- HandbookRelationTypes.Document = 136  
    UPDATE r
		SET r.iSort = rd.iSort,
		r.iPlacementId = rd.iPlacementId,
		r.iProcessRelationTypeId = rd.iProcessRelationTypeId
	FROM dbo.m136_relInfo r INNER JOIN @RelatedAttachments rd 
		ON r.iItemId = rd.iItemId
	WHERE r.iEntityId = @iEntityId
		AND r.iRelationTypeId IN (2, 20); -- 2: attachment, 20: related attachment
	DECLARE @iDocumentTypeId INT, 
		@iMetaInfoTemplateRecordsId INT,
		@iInfoTypeId INT,
		@RichText [nvarchar](MAX),
		@Text VARCHAR(8000),
		@Number INT,
		@Date DATETIME;
	SELECT @iDocumentTypeId = d.iDocumentTypeId FROM dbo.m136_tblDocument d
	WHERE d.iEntityId = @iEntityId;
	DECLARE FieldContens CURSOR FOR 
		SELECT [iMetaInfoTemplateRecordsId], [iInfoTypeId], [RichText], [Text], [Number], [Date]
		FROM @FieldContents;
	OPEN FieldContens; 
	FETCH NEXT FROM FieldContens INTO @iMetaInfoTemplateRecordsId, @iInfoTypeId, @RichText, @Text, @Number, @Date;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF (@iInfoTypeId = 1)
		BEGIN
			IF EXISTS(SELECT * FROM dbo.m136_tblMetaInfoNumber mtmin
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmin.iMetaInfoTemplateRecordsId
				WHERE mtmin.iEntityId = @iEntityId AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmin.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId)
			BEGIN
     			UPDATE mtmin 
				SET
					mtmin.[value] = ISNULL(@Number, 0)
				FROM dbo.m136_tblMetaInfoNumber mtmin
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmin.iMetaInfoTemplateRecordsId
				AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmin.iEntityId = @iEntityId
				AND mtmin.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId;
            END
            ELSE
            BEGIN
				DECLARE @iMaxiMetaInfoNumberId INT;
				SELECT @iMaxiMetaInfoNumberId = MAX(mtmin.iMetaInfoNumberId) FROM dbo.m136_tblMetaInfoNumber mtmin;
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoNumber ON;
				INSERT INTO dbo.m136_tblMetaInfoNumber
				(
				    iMetaInfoNumberId,
				    iMetaInfoTemplateRecordsId,
				    iEntityId,
				    [value]
				)
				VALUES
				(
				    (ISNULL(@iMaxiMetaInfoNumberId, 0) + 1),
				    @iMetaInfoTemplateRecordsId,
				    @iEntityId,
				    ISNULL(@Number, 0)
				)
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoNumber OFF;
            END
		END
		IF (@iInfoTypeId = 2 OR @iInfoTypeId = 3 OR @iInfoTypeId = 4)
		BEGIN
			IF EXISTS(SELECT * FROM dbo.m136_tblMetaInfoText mtmit
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmit.iMetaInfoTemplateRecordsId
				WHERE mtmit.iEntityId = @iEntityId AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmit.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId)
			BEGIN
     			UPDATE mtmit 
				SET
					mtmit.[value] = ISNULL(@Text, '')
				FROM dbo.m136_tblMetaInfoText mtmit
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmit.iMetaInfoTemplateRecordsId
				AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmit.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId
				AND mtmit.iEntityId = @iEntityId;
            END
            ELSE
            BEGIN
				DECLARE @iMaxiMetaInfoTextId INT;
				SELECT @iMaxiMetaInfoTextId = MAX(mtmit.iMetaInfoTextId) FROM dbo.m136_tblMetaInfoText mtmit;
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoText ON;
				INSERT INTO dbo.m136_tblMetaInfoText
				(
				    iMetaInfoTextId,
				    iMetaInfoTemplateRecordsId,
				    iEntityId,
				    [value]
				)
				VALUES
				(
				    (ISNULL(@iMaxiMetaInfoTextId, 0) + 1),
				    @iMetaInfoTemplateRecordsId, 
				    @iEntityId, 
				    ISNULL(@Text, '')
				)
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoText OFF;
            END
		END
		IF (@iInfoTypeId = 5)
		BEGIN
			IF EXISTS(SELECT * FROM dbo.m136_tblMetaInfoDate mtmid
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmid.iMetaInfoTemplateRecordsId
				WHERE mtmid.iEntityId = @iEntityId AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmid.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId)
			BEGIN
     			UPDATE mid 
				SET
					mid.[value] = @Date
				FROM dbo.m136_tblMetaInfoDate mid
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mid.iMetaInfoTemplateRecordsId
				AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mid.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId
				AND mid.iEntityId = @iEntityId;	
            END
            ELSE
            BEGIN
				DECLARE @iMaxiMetaInfoDateId INT;
				SELECT @iMaxiMetaInfoDateId = MAX(mtmit.iMetaInfoDateId) FROM dbo.m136_tblMetaInfoDate mtmit;
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoDate ON;
				INSERT INTO dbo.m136_tblMetaInfoDate
				(
				    iMetaInfoDateId,
				    iMetaInfoTemplateRecordsId,
				    iEntityId,
				    [value]
				)
				VALUES
				(
				    (@iMaxiMetaInfoDateId + 1),
				    @iMetaInfoTemplateRecordsId,
				    @iEntityId,
				    ISNULL(@Date, GETDATE())
				)
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoDate OFF;
            END
		END
		IF (@iInfoTypeId = 6)
		BEGIN
			IF EXISTS(SELECT * FROM dbo.m136_tblMetaInfoRichText mtmirt
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmirt.iMetaInfoTemplateRecordsId
				WHERE mtmirt.iEntityId = @iEntityId AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmirt.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId)
			BEGIN
     			UPDATE mtmirt 
				SET
					mtmirt.[value] = ISNULL(@RichText, '')
				FROM dbo.m136_tblMetaInfoRichText mtmirt
				INNER JOIN dbo.m136_relDocumentTypeInfo mrdti ON mrdti.iMetaInfoTemplateRecordsId = mtmirt.iMetaInfoTemplateRecordsId
				AND mrdti.iDocumentTypeId = @iDocumentTypeId
				AND mtmirt.iMetaInfoTemplateRecordsId = @iMetaInfoTemplateRecordsId
				AND mtmirt.iEntityId = @iEntityId;	
            END
            ELSE
            BEGIN
				DECLARE @iMaxiMetaInfoRichTextId INT;
				SELECT @iMaxiMetaInfoRichTextId = MAX(mtmirt.iMetaInfoRichTextId) FROM dbo.m136_tblMetaInfoRichText mtmirt;
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoRichText ON;
				INSERT INTO dbo.m136_tblMetaInfoRichText
				(
				    iMetaInfoRichTextId,
				    iMetaInfoTemplateRecordsId,
				    iEntityId,
				    [value]
				)
				VALUES
				(
				    (ISNULL(@iMaxiMetaInfoRichTextId, 0) + 1),
				    @iMetaInfoTemplateRecordsId,
				    @iEntityId,
				    ISNULL(@RichText, '')
				)
				SET IDENTITY_INSERT dbo.m136_tblMetaInfoRichText OFF;
            END
		END
		FETCH NEXT FROM FieldContens INTO @iMetaInfoTemplateRecordsId, @iInfoTypeId, @RichText, @Text, @Number, @Date;
    END
    CLOSE FieldContens;
	DEALLOCATE FieldContens;	
END
GO
/****** Object:  StoredProcedure [dbo].[m136x_insertIntoTextIndex]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136x_insertIntoTextIndex]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @iEntityId int
	declare @srcPtr binary(16)
	declare @dstPtr binary(16)
	declare @insertOffset int

	declare @iAutoId int

	declare @chunkSize int
	set @chunkSize = 1000 --Should be multiples of 8040 for best performance
	declare @charBlock1 nvarchar(4000)
	declare @charBlock2 nvarchar(4000)

	declare @fetchProgress int
	declare @insertLength int
	declare @finalOffset int
	--DocTable
	declare @docTbl table(
		iEntityId int not null,
		iDocumentId int not null
	)
	insert into @docTbl
	select
		d.iEntityId,
		d.iDocumentId
	from m136_tblDocument d
	where 
		d.iDeleted = 0
		and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
			and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
			and dd.iDraft = 0)
		and d.iApproved=1
	order by iEntityId

--	select * from @docTbl
	insert into m136x_tblTextIndex(iEntityId, totalvalue)
	select iEntityId, '' from @docTbl

	declare Entitys CURSOR
	FOR
		select iEntityId from @docTbl order by iEntityId
	open Entitys
	FETCH NEXT FROM Entitys
	into @iEntityId

	WHILE @@FETCH_STATUS <> -1
	BEGIN
		declare theValues CURSOR
		FOR
		select TEXTPTR(value) valuePtr, datalength(value)/2, iMetaInfoRichTextId from m136_tblMetaInfoRichText where iEntityId=@iEntityId
		print '=================='
		print cast( @ientityId as varchar(10)) +':'
		open theValues
		FETCH NEXT FROM theValues
		into @srcPtr, @insertLength, @iAutoId
		if @@FETCH_STATUS <> -1
		BEGIN
--			print '@iEntityId:'
--			print @iEntityId

--			if (select count(iEntityId) from m136x_tblTextIndex where iEntityId=@iEntityId)=0
--			BEGIN
--				insert into m136x_tblTextIndex(iEntityId, totalValue)
--				select iEntityId, value from m136_tblMetaInfoRichText where iEntityId=@iEntityId
--			END
--			ELSE
			BEGIN
				
				while @@FETCH_STATUS = 0
				BEGIN
					select @dstPtr = TEXTPTR(totalValue) from m136x_tblTextIndex where iEntityId=@iEntityId
					select @insertOffset = datalength(totalValue)/2 from m136x_tblTextIndex where iEntityId=@iEntityId
					set @fetchProgress = 0
					set @finalOffset = @insertOffset+@insertLength
					print 'insertlength: ' + cast(@insertLength as varchar(10))
					while @fetchProgress< @insertLength
					BEGIN
						print @fetchProgress
						select @insertOffset = datalength(totalValue)/2 from m136x_tblTextIndex where iEntityId=@iEntityId
						select @charBlock1 = substring(value, @fetchProgress, @chunkSize) from m136_tblMetaInfoRichText where iMetaInfoRichTextId=@iAutoId
--select @iEntityId as EntId, @insertLength as inserLen, @iAutoId as iAuto, @finalOffset as finOffset, @insertOffset as progress, (datalength(totalValue)) as lengt from m136x_tblTextIndex where iEntityId=@iEntityId
						updatetext m136x_tblTextIndex.totalvalue @dstPtr @insertOffset 0 @charBlock1
						select @insertOffset = datalength(totalValue)/2 from m136x_tblTextIndex where iEntityId=@iEntityId
						set @fetchProgress = @fetchProgress + @chunkSize
						print 'Lengde nå:' + cast( @insertOffset as varchar(10))
						print '------'
					END
					FETCH NEXT FROM theValues
					into @srcPtr, @insertLength, @iAutoId
				END
			END
		END
		CLOSE theValues
		DEALLOCATE theValues
		FETCH NEXT FROM Entitys
		into @iEntityId
	END
	CLOSE Entitys
	DEALLOCATE Entitys

END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_AddEventLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_AddEventLog]
	@DocumentId INT,
    @Version INT,
    @Description VARCHAR(MAX),
    @EmployeeId INT,
    @LoginName VARCHAR(100),
    @FirstName VARCHAR(50),
    @LastName VARCHAR(50),
    @EventTime DATETIME,
    @EventType INT
AS
BEGIN
	SET NOCOUNT ON;
	SET IDENTITY_INSERT dbo.tblEventlog ON;
	DECLARE @MaxId INT;
    DECLARE @EventLogId INT;
	SELECT @MaxId = MAX(te.Id) FROM dbo.tblEventlog te;
    SET @EventLogId = ISNULL(@MaxId, 0) + 1;
	INSERT INTO dbo.tblEventlog
        (Id, DocumentId, [Version], EmployeeId, LoginName, FirstName, LastName, EventTime, EventType, [Description])
	VALUES
        (@EventLogId, @DocumentId, @Version, @EmployeeId, @LoginName,  @FirstName, @LastName, @EventTime, @EventType, @Description)
	SET IDENTITY_INSERT dbo.tblEventlog OFF;
    SELECT @EventLogId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeDocumentLink]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangeDocumentLink] 
	@iEntityId INT,
	@FieldId INT,
	@FieldContentId INT,
	@OldUrl [nvarchar](max),
	@NewUrl [nvarchar](max)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iDocumentTypeId INT;
	SELECT @iDocumentTypeId = mtd.iDocumentTypeId 
	FROM dbo.m136_tblDocument mtd WHERE mtd.iEntityId = @iEntityId;
    UPDATE mir SET mir.[value] = CAST(REPLACE(CAST(value as nvarchar(max)), @OldUrl, @NewUrl) as ntext)
    FROM dbo.m136_tblMetaInfoRichText mir
    JOIN dbo.m136_relDocumentTypeInfo rdti ON rdti.iMetaInfoTemplateRecordsId = mir.iMetaInfoTemplateRecordsId
    WHERE mir.iMetaInfoRichTextId = @FieldContentId
    AND mir.iMetaInfoTemplateRecordsId = @FieldId
    AND rdti.iDocumentTypeId = @iDocumentTypeId;    
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AddHandbookToFavorites]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AddHandbookToFavorites]
	@HandbookId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	IF NOT EXISTS(SELECT 1 FROM [dbo].[m136_tblSubscribe] WHERE [iHandbookId] = @HandbookId AND [iEmployeeId] = @iSecurityId)
		BEGIN
			INSERT INTO [dbo].[m136_tblSubscribe] ([iEmployeeId], [iHandbookId], [iEmail], [iFrontpage], [iPDA], [iSort]) 
			VALUES (@iSecurityId, @HandbookId,0,1,0,0)
		END
	ELSE
		BEGIN
			UPDATE	[dbo].[m136_tblSubscribe]
			SET		[iFrontpage] = 1
			WHERE	[iHandbookId] = @HandbookId 
				AND [iEmployeeId] = @iSecurityId
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AddHandbookToEmailSubscription]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AddHandbookToEmailSubscription]
	@HandbookId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	IF NOT EXISTS(SELECT 1 FROM [dbo].[m136_tblSubscribe] WHERE [iHandbookId] = @HandbookId AND [iEmployeeId] = @iSecurityId)
		BEGIN
			INSERT INTO [dbo].[m136_tblSubscribe] ([iEmployeeId], [iHandbookId], [iEmail], [iFrontpage], [iPDA], [iSort]) 
			VALUES (@iSecurityId, @HandbookId,1,0,0,0)
		END
	ELSE
		BEGIN
			UPDATE	[dbo].[m136_tblSubscribe]
			SET		[iEmail] = 1
			WHERE	[iHandbookId] = @HandbookId 
				AND [iEmployeeId] = @iSecurityId
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AddFormulaImage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AddFormulaImage]
	@ImageContent IMAGE,
    @DocumentId INT,
    @DocumentVersion INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        INSERT INTO
            m136_FormulaImages
                (ImageContent, DocumentId, DocumentVersion)
            VALUES
                (@ImageContent, @DocumentId, @DocumentVersion)
        SELECT SCOPE_IDENTITY();
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    IF @@TRANCOUNT > 0
        ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_AddDocumentToFavorites]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_AddDocumentToFavorites]
	@DocumentId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	IF NOT EXISTS(SELECT 1 FROM [dbo].[m136_tblSubscriberDocument] WHERE [iDocumentId] = @DocumentId AND [iEmployeeId] = @iSecurityId)
	BEGIN
		INSERT INTO [dbo].[m136_tblSubscriberDocument] ([iEmployeeId], [iDocumentId], [iSort]) 
		VALUES (@iSecurityId, @DocumentId, 0)
	END
END
GO
/****** Object:  Table [dbo].[relEmployeeGroup]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relEmployeeGroup](
	[iEmployeeId] [int] NOT NULL,
	[iGroupId] [int] NOT NULL,
	[dtmLastVisited] [smalldatetime] NULL,
	[bSubscribed] [bit] NOT NULL,
	[iSort] [int] NOT NULL,
 CONSTRAINT [PK__relEmployeeGroup_iEmployeeId_iGroupId] PRIMARY KEY CLUSTERED 
(
	[iEmployeeId] ASC,
	[iGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblGroup]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblGroup](
	[iGroupId] [int] NOT NULL,
	[iGroupMasterId] [int] NOT NULL,
	[iInformationTypeId] [int] NOT NULL,
	[strName] [varchar](40) NOT NULL,
	[strDescription] [varchar](200) NOT NULL,
	[strPath] [varchar](255) NOT NULL,
	[bHidden] [bit] NOT NULL,
	[bMaster] [bit] NOT NULL,
	[bSubscribe] [bit] NOT NULL,
	[iAvailabilityId] [int] NOT NULL,
	[iChildCount] [int] NOT NULL,
	[iGroupParentId] [int] NOT NULL,
 CONSTRAINT [PK__tblGroup_iGroupId] PRIMARY KEY CLUSTERED 
(
	[iGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationsRegisteredByMe]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationsRegisteredByMe] 
	@iUserId int = 0,
	@iState int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT d.DeviationId, 
		d.Title, 
		d.[Description], 
		d.DueDate, 
		d.[State], 
		d.StatusId,
		d.[Priority], 
		d.CategoryId,
		c.Name AS CategoryName,
		d.RegisterDate,
		d.RegisteredByDepartment,
		d.HandledByDepartment,
		d.OwnerId,
		(ISNULL(re.strFirstName, '') + ' ' + ISNULL(re.strLastName, '')) AS RegisteredName,
		(ISNULL(he.strFirstName, '') + ' ' + ISNULL(he.strLastName, '')) AS OwnerName,
		he.strEmail AS OwnerEmail,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,1) AS Tasks,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,2) AS Actions,
		[Deviation].[fGetDeviationLogDate](d.DeviationId) AS Updated,
		rd.strName AS RegisteredByDepartmentname,
		hd.strName AS HandledByDepartmentName,
		c.CategoryType AS [Type],
		row_number() OVER (ORDER BY d.RegisterDate DESC) AS rownumber
	INTO #Filters 
	FROM Deviation.Deviation d INNER JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee re ON d.RegisteredByUser = re.iEmployeeId
	LEFT JOIN dbo.tblEmployee he ON d.OwnerId = he.iEmployeeId
	LEFT JOIN Deviation.Location l ON d.LocationId = l.LocationId
	LEFT JOIN dbo.tblDepartment rd ON d.RegisteredByDepartment = rd.iDepartmentId
	LEFT JOIN dbo.tblDepartment hd ON d.HandledByDepartment = hd.iDepartmentId
	WHERE d.RegisteredByUser = @iUserId
	AND ((d.State = @iState OR @iState IS NULL) AND d.State != 16)
	AND d.IsDeleted = 0;
	SELECT f.* FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;       
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationsOverDueDate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationsOverDueDate] 
	@iUserId int = 0,
	@iState int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT d.DeviationId, 
		d.Title, 
		d.[Description], 
		d.DueDate, 
		d.[State], 
		d.StatusId,
		d.[Priority], 
		d.CategoryId,
		c.Name AS CategoryName,
		d.RegisterDate,
		d.RegisteredByDepartment,
		d.HandledByDepartment,
		c.CategoryType AS [Type],
		d.OwnerId,
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS RegisteredName,
		(ISNULL(te2.strFirstName, '') + ' ' + ISNULL(te2.strLastName, '')) AS OwnerName,
		te2.strEmail AS OwnerEmail,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,1) AS Tasks,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,2) AS Actions,
		[Deviation].[fGetDeviationLogDate](d.DeviationId) AS Updated,
		td.strName AS RegisteredByDepartmentName,
		td2.strName AS HandledByDepartmentName,
		row_number() OVER (ORDER BY d.RegisterDate DESC) AS rownumber
	INTO #Filters 
	FROM Deviation.Deviation d INNER JOIN Deviation.Category c 
	ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = d.RegisteredByUser
	LEFT JOIN dbo.tblEmployee te2 ON te2.iEmployeeId = d.OwnerId
	LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = d.RegisteredByDepartment
	LEFT JOIN dbo.tblDepartment td2 ON td2.iDepartmentId = d.HandledByDepartment
	WHERE d.OwnerId = @iUserId
	AND ((d.State = @iState OR @iState IS NULL) AND d.State != 16)
	AND d.IsDeleted = 0
	AND d.DueDate <= GETDATE();
	SELECT f.* FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;       
END
GO
/****** Object:  UserDefinedFunction [Deviation].[fGetParentCategoryNameByParentCategoryId]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[fGetParentCategoryNameByParentCategoryId] 
(
	@CategoryId INT
)  
RETURNS nvarchar(100) AS  
BEGIN 
	DECLARE @categoryName nvarchar(100)
	SELECT  @categoryName = Name FROM [Deviation].Category WHERE CategoryId = @CategoryId
RETURN @categoryName
END
GO
/****** Object:  Table [Risk].[luConsequenceTypesLanguage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luConsequenceTypesLanguage](
	[Id] [int] NOT NULL,
	[ConsequenceTypeId] [tinyint] NOT NULL,
	[Language] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_Risk_luConsequenceTypesLanguage_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Risk].[luConsequencesLanguage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luConsequencesLanguage](
	[Id] [int] NOT NULL,
	[ConsequencesId] [tinyint] NOT NULL,
	[Language] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_Risk_luConsequencesLanguage_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReadingListReaders]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReadingListReaders](
	[ReadingListReaderId] [int] IDENTITY(1,1) NOT NULL,
	[ReadingListId] [int] NOT NULL,
	[ReaderTypeId] [smallint] NOT NULL,
	[ReaderId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ReadingListReaderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReadingListDocuments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReadingListDocuments](
	[ReadingListDocumentId] [int] IDENTITY(1,1) NOT NULL,
	[ReadingListId] [int] NOT NULL,
	[DocumentId] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ReadingListDocumentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[NumberOfReadingListConfirmedDocumentsAssociateWithUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[NumberOfReadingListConfirmedDocumentsAssociateWithUser]
(
	@UserId INT
)
RETURNS INT
AS
BEGIN
    DECLARE @Result INT;
	DECLARE @ReadingListDocumentIds TABLE (DocumentId INT);
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 1 -- Person reader
            INNER JOIN tblEmployee e ON e.iEmployeeId = rlr.ReaderId
            INNER JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId AND cr.iEmployeeId = e.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON d.iDepartmentId = rlr.ReaderId
            INNER JOIN tblEmployee e ON e.iDepartmentId = d.iDepartmentId
            INNER JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId AND cr.iEmployeeId = e.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 3 -- Role reader
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iSecGroupId
            INNER JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId AND cr.iEmployeeId = esg.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND esg.iEmployeeId = @UserId
    SELECT @Result = COUNT(DISTINCT DocumentId)
    FROM @ReadingListDocumentIds
    RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [dbo].[NumberOfReadingListDocumentsAssociateWithUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[NumberOfReadingListDocumentsAssociateWithUser]
(
	@UserId INT
)
RETURNS INT
AS
BEGIN
    DECLARE @Result INT;
	DECLARE @ReadingListDocumentIds TABLE (DocumentId INT);
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 1 -- Person reader
            INNER JOIN tblEmployee e ON e.iEmployeeId = rlr.ReaderId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON d.iDepartmentId = rlr.ReaderId
            INNER JOIN tblEmployee e ON e.iDepartmentId = d.iDepartmentId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListDocumentIds (DocumentId)
    SELECT rld.DocumentId
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 3 -- Role reader
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iSecGroupId
    WHERE
        r.IsDeleted = 0
        AND esg.iEmployeeId = @UserId
    SELECT @Result = COUNT(DISTINCT DocumentId)
    FROM @ReadingListDocumentIds
    RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [dbo].[NumberOfReadingListsAssociateWithUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[NumberOfReadingListsAssociateWithUser]
(
	@UserId INT
)
RETURNS INT
AS
BEGIN
    DECLARE @Result INT;
	DECLARE @ReadingListIds TABLE (ReadingListId INT);
    INSERT INTO @ReadingListIds (ReadingListId)
    SELECT r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 1 -- Person reader
            INNER JOIN tblEmployee e ON e.iEmployeeId = rlr.ReaderId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListIds (ReadingListId)
    SELECT r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON d.iDepartmentId = rlr.ReaderId
            INNER JOIN tblEmployee e ON e.iDepartmentId = d.iDepartmentId
    WHERE
        r.IsDeleted = 0
        AND e.iEmployeeId = @UserId
    INSERT INTO @ReadingListIds (ReadingListId)
    SELECT r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 3 -- Role reader
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iSecGroupId
    WHERE
        r.IsDeleted = 0
        AND esg.iEmployeeId = @UserId
    SELECT @Result = COUNT(DISTINCT ReadingListId)
    FROM @ReadingListIds
    RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [dbo].[AreDocumentsInReadingListConfirmedByUser]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[AreDocumentsInReadingListConfirmedByUser]
(
    @UserId INT,
	@ReadingListId INT
)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT;
    DECLARE @NumberOfDocuments INT;
    DECLARE @NumberOfConfirmedDocuments INT;
    SELECT
        @NumberOfDocuments = COUNT(1)
    FROM
        ReadingListDocuments
    WHERE
        ReadingListId = @ReadingListId
    SELECT
        @NumberOfConfirmedDocuments = COUNT(1)
    FROM
        ReadingListDocuments rld
            INNER JOIN m136_tblDocument d ON rld.DocumentId = d.iDocumentId
            INNER JOIN m136_tblConfirmRead cr ON d.iEntityId = cr.iEntityId
    WHERE
        ReadingListId = @ReadingListId
        AND cr.iEmployeeId = @UserId
    IF @NumberOfDocuments = @NumberOfConfirmedDocuments
    BEGIN
        SET @Result = 1;
    END
    ELSE
    BEGIN
        SET @Result = 0;
    END
    RETURN @Result;
END
GO
/****** Object:  StoredProcedure [dbo].[GetNumberOfOkReadingListsForLeaderOfDepartments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNumberOfOkReadingListsForLeaderOfDepartments]
	@LeaderId INT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @UserConfirmedDocumentsOnReadingLists TABLE
    (
        UserId INT,
        ReadingListId INT,
        ReadingListName NVARCHAR(100),
        IsOK BIT
    );
    -- Insert reading lists from person readers
    INSERT INTO @UserConfirmedDocumentsOnReadingLists
        (UserId, ReadingListId, ReadingListName, IsOK)
    SELECT
        e.iEmployeeId, rl.ReadingListId, rl.Name, dbo.AreDocumentsInReadingListConfirmedByUser(e.iEmployeeId, rl.ReadingListId)
    FROM
        ReadingList rl
            INNER JOIN ReadingListReaders rlr ON rl.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 1 -- Person reader
            INNER JOIN tblEmployee e ON rlr.ReaderId = e.iEmployeeId
    WHERE
        rl.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND e.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND e.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )        
        AND rl.ReadingListId IN (SELECT Id FROM @ReadingListIds)
    -- Insert reading list from department readers
    INSERT INTO @UserConfirmedDocumentsOnReadingLists
        (UserId, ReadingListId, ReadingListName, IsOK)
    SELECT
        e.iEmployeeId, rl.ReadingListId, rl.Name, dbo.AreDocumentsInReadingListConfirmedByUser(e.iEmployeeId, rl.ReadingListId)
    FROM
        ReadingList rl
            INNER JOIN ReadingListReaders rlr ON rl.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON d.iDepartmentId = rlr.ReaderId
            INNER JOIN tblEmployee e ON d.iDepartmentId = e.iDepartmentId
    WHERE
        rl.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND e.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND e.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )
        AND rl.ReadingListId IN (SELECT Id FROM @ReadingListIds)
        AND NOT EXISTS(SELECT 1 FROM @UserConfirmedDocumentsOnReadingLists WHERE UserId = e.iEmployeeId AND ReadingListId = rl.ReadingListId)
    -- Insert reading list documents from role readers
    INSERT INTO @UserConfirmedDocumentsOnReadingLists
        (UserId, ReadingListId, ReadingListName, IsOK)
    SELECT
        esg.iEmployeeId, rl.ReadingListId, rl.Name, dbo.AreDocumentsInReadingListConfirmedByUser(esg.iEmployeeId, rl.ReadingListId)
    FROM 
        ReadingList rl
            INNER JOIN ReadingListReaders rlr ON rl.ReadingListId = rlr.ReadingListId AND ReaderTypeId = 3 -- Role reader
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iEmployeeId
    WHERE
        rl.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND esg.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND esg.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )
        AND rl.ReadingListId IN (SELECT Id FROM @ReadingListIds)
        AND NOT EXISTS(SELECT 1 FROM @UserConfirmedDocumentsOnReadingLists WHERE UserId = esg.iEmployeeId AND ReadingListId = rl.ReadingListId)
    SELECT DISTINCT
        UserId,
        ReadingListId,
        ReadingListName,
        IsOK
    FROM
        @UserConfirmedDocumentsOnReadingLists
END
GO
/****** Object:  StoredProcedure [dbo].[GetReadingListLeaderOfDepartmentsForReport]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetReadingListLeaderOfDepartmentsForReport]
    @LeaderId INT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @LeaderReadingLists TABLE
    (
        LeaderId INT,
        EmployeeName VARCHAR(100),
        DepartmentName VARCHAR(80),
        ReadingListId INT
    );
    -- Insert reading list documents from person readers
    INSERT INTO @LeaderReadingLists
        (LeaderId, EmployeeName, DepartmentName, ReadingListId)
    SELECT
        e.iEmployeeId, e.strFirstName + ' ' + e.strLastName, d.strName, r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 1 -- Person reader
            INNER JOIN tblEmployee e ON rlr.ReaderId = e.iEmployeeId
            INNER JOIN tblDepartment d ON d.iDepartmentId = e.iDepartmentId
    WHERE
        r.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND e.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND e.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
    -- Insert reading list documents from department readers
    INSERT INTO @LeaderReadingLists
        (LeaderId, EmployeeName, DepartmentName, ReadingListId)
    SELECT
        e.iEmployeeId, e.strFirstName + ' ' + e.strLastName, d.strName, r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON d.iDepartmentId = rlr.ReaderId
            INNER JOIN tblEmployee e ON d.iDepartmentId = e.iDepartmentId
    WHERE
        r.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND e.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND e.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
        AND NOT EXISTS (SELECT 1 FROM @LeaderReadingLists lrl WHERE lrl.LeaderId = e.iEmployeeId AND lrl.ReadingListId = r.ReadingListId)
    -- INSERT reading list documents from role readers
    INSERT INTO @LeaderReadingLists
        (LeaderId, EmployeeName, DepartmentName, ReadingListId)
    SELECT
        e.iEmployeeId, e.strFirstName + ' ' + e.strLastName, d.strName, r.ReadingListId
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 3 -- Role reader
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iEmployeeId
            INNER JOIN tblEmployee e ON e.iEmployeeId = esg.iEmployeeId
            INNER JOIN tblDepartment d ON d.iDepartmentId = e.iDepartmentId
    WHERE
        r.IsDeleted = 0
        AND (
            (@LeaderId IS NOT NULL AND e.iEmployeeId = @LeaderId)
            OR (@LeaderId IS NULL AND e.iEmployeeId IN (SELECT EmployeeId FROM DepartmentResponsibles WHERE ResponsibleTypeId = 1))
        )
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
        AND NOT EXISTS (SELECT 1 FROM @LeaderReadingLists lrl WHERE lrl.LeaderId = e.iEmployeeId AND lrl.ReadingListId = r.ReadingListId)
    SELECT
        DISTINCT LeaderId AS UserId,
        EmployeeName,
        DepartmentName,
        dbo.NumberOfReadingListsAssociateWithUser(LeaderId) AS NumberOfReadingLists,
        dbo.NumberOfReadingListDocumentsAssociateWithUser(LeaderId) AS NumberOfDocuments,
        dbo.NumberOfReadingListConfirmedDocumentsAssociateWithUser(LeaderId) AS NumberOfOKDocuments
    FROM
        @LeaderReadingLists
    EXEC GetNumberOfOkReadingListsForLeaderOfDepartments @LeaderId, @ReadingListIds
END
GO
/****** Object:  StoredProcedure [dbo].[GetUploadById]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUploadById] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT u.Id, 
		u.iEntityId, 
		u.Url, 
		u.Location, 
		u.FileName, 
		u.ContentType, 
		u.iType
    FROM dbo.Uploads u
    WHERE u.Id = @Id;    
END
GO
/****** Object:  StoredProcedure [Deviation].[GetNotificationEmailForCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetNotificationEmailForCategory]
	@PageIndex INT,
	@PageSize INT,
	@CategoryID INT,
	@IsLoadMore BIT
AS
SET NOCOUNT ON
BEGIN
	WITH emailNotifications AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY ca.CategoryAlertId DESC),
			ca.*
		FROM 
			Deviation.CategoryAlerts ca
		WHERE
			ca.CategoryAlertId = @CategoryID
	)
	SELECT 
		e.*
	FROM 
		emailNotifications e
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				Deviation.CategoryAlerts ca
			WHERE
				ca.CategoryAlertId = @CategoryID
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [Deviation].[GetNotificationByFilter]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetNotificationByFilter]
	@PageIndex INT,
	@PageSize INT,
	@UserId INT,
	@IsLoadMore BIT,
	@IsGetNew BIT
AS
SET NOCOUNT ON
BEGIN
	WITH notifications AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY n.NotificateDate DESC),
			n.*
		FROM 
			[Deviation].[Notification] n
		WHERE
			n.IsDeleted = 0
		AND
			(n.UserId = 0 OR n.UserId = @UserId)
		AND
			(@IsGetNew = 0 OR n.IsRead = 0)
	)
	SELECT 
		n.*
	FROM 
		notifications n
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				[Deviation].[Notification] n
			WHERE
				n.IsDeleted = 0
			AND
				(n.UserId = 0 OR n.UserId = @UserId)
			AND
				(@IsGetNew = 0 OR n.IsRead = 0)
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
	SELECT
		COUNT(*) AS Unread
	FROM 
		[Deviation].[Notification] n
	WHERE
		n.IsDeleted = 0
	AND
		(n.UserId = 0 OR n.UserId = @UserId)
	AND
		n.IsRead = 0
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationAttachment]
	@Id INT
AS
SET NOCOUNT ON
BEGIN
	SELECT da.DeviationAttachmentId, 
		da.DeviationId, 
		da.Title, 
		da.[Description], 
		da.Size, 
		da.ContentType, 
		da.Extension, 
		da.Content, 
		da.IsDeleted,
		da.Removable 
	FROM Deviation.DeviationAttachment da 
	WHERE da.DeviationAttachmentId = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategoryDefinitions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategoryDefinitions]
	@CategoryId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT cd.Id, 
		cd.CategoryId,
		cd.DefinitionType, 
		cd.DefinitionValue, 
		cd.Definition, 
		ldt.Name AS DefinitionTypeName
    FROM Deviation.CategoryDefinitions cd
		LEFT JOIN Deviation.luDefinitionTypes ldt ON ldt.Id = cd.DefinitionType
	WHERE cd.CategoryId = @CategoryId;
END
GO
/****** Object:  Table [Risk].[luProbabilityLanguage]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[luProbabilityLanguage](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[ProbabilityId] [tinyint] NOT NULL,
	[Language] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_Risk_luProbabilityLanguage_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CreateUploadFolder]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CreateUploadFolder] 
	@iParentFolderId INT,
	@strName NVARCHAR(255),
	@Location NVARCHAR(4000),
	@iCreatedBy INT
AS
BEGIN
	SET NOCOUNT ON;
    INSERT INTO dbo.UploadFolders
    (
        strName,
        iParentFolderId,
        iDeleted,
        iCreatedBy,
        iModifiedBy,
        dtmCreated,
        dtmModified,
        Location
    )
    VALUES
    (
        @strName, 
        @iParentFolderId,
        0,
        @iCreatedBy,
        @iCreatedBy,
        GETDATE(),
        GETDATE(),
        @Location
    );
    SELECT CAST(SCOPE_IDENTITY() AS INT);
END
GO
/****** Object:  StoredProcedure [dbo].[CreateUpload]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CreateUpload] 
	@iFolderId INT,
	@FileName varchar(400),
	@ContentType varchar(400),
	@Location nvarchar(4000),
	@iType INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Id INT = NULL;
    INSERT INTO dbo.Uploads
    (
		[iEntityId],
		[iFolderId],
		[Url],
		Location,
		[FileName],
		[ContentType],
		[iType]
    )
    VALUES
    (
		0,
		@iFolderId,
		'',
		@Location,
		@FileName,
		@ContentType,
		@iType
    );
    SELECT @Id = CAST(SCOPE_IDENTITY() AS INT);
    UPDATE dbo.Uploads
    SET
        dbo.Uploads.Url = (N'/video?id=' + ltrim(str(@Id)))
    WHERE Id = @Id;
    SELECT @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateTask]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateTask]
	@DeviationId INT,
	@Title NVARCHAR(400),
	@Description NVARCHAR(MAX),
	@DueDate DATETIME,
	@ResponsibleId INT,
	@ActionType INT,
	@State INT,
	@FollowUpDate DATETIME
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @SequenceId [nvarchar](25), @CountTask INT = 0;
	SET @SequenceId = STR(YEAR(GETDATE())) + '-' + (SELECT RIGHT('000000' + RTRIM(CONVERT(CHAR(6), @DeviationId)), 6));
	SELECT @CountTask = COUNT(*) FROM Deviation.BaseAction ba WHERE ba.DeviationId = @DeviationId;
	SET @SequenceId = @SequenceId + '-' + (SELECT RIGHT('000' + RTRIM(CONVERT(CHAR(3), (ISNULL(@CountTask, 0) + 1))),3));
	INSERT INTO Deviation.BaseAction
	(
	    --BaseActionId - this column value is auto-generated
	    Title,
	    [Description],
	    DeviationId,
	    DueDate,
	    ResponsiblePersonId,
	    [State],
	    ActionType,
	    StartDate,
	    Whatdone,
	    FollowUpDate,
	    Cost,
	    Item,
	    CostType,
	    SequenceId,
	    RegisteredDate,
		IsDeleted,
		UpdatedDate
	)
	VALUES
	(
	    @Title,
	    @Description, 
	    @DeviationId, 
	    @DueDate, 
	    @ResponsibleId, 
	    @State,
	    @ActionType,
	    GETDATE(), 
	    N'', 
	    @FollowUpDate, 
	    0,
	    0,
	    0,
	    LTRIM(@SequenceId),
	    GETDATE(), 
		0,
		GETDATE()
	);
	UPDATE Deviation.Deviation
    SET 
        UpdatedDate = GETDATE()
    WHERE DeviationId = @DeviationId;
	SELECT CAST(SCOPE_IDENTITY() AS [int]);
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateServiceArea]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateServiceArea] 
	@Name NVARCHAR(150),
	@Description NVARCHAR(MAX),
	@SortOrder INT
AS
BEGIN
	SET NOCOUNT ON;
    INSERT INTO Deviation.ServiceAreas
    (
        Name,
        [Description],
        SortOrder,
        IsDeleted
    )
    VALUES
    (
        @Name, 
        @Description,
        @SortOrder, 
        0 
    )
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Risk].[CreateRiskArea]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[CreateRiskArea] 
	@Name NVARCHAR(250),
	@Description NVARCHAR(MAX),
	@Icon [image]
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.Areas
    (
        Name,
        Description,
        Icon
    )
    VALUES
    (
        @Name, -- Name - nvarchar
        @Description, -- Description - nvarchar
        @Icon -- Icon - image
    );
    
    SELECT CAST(SCOPE_IDENTITY() AS INT);
END
GO
/****** Object:  StoredProcedure [dbo].[CreateEditorTemplate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CreateEditorTemplate]
    @Title NVARCHAR(200),
    @Description NVARCHAR(2000),
    @Html NVARCHAR(MAX),
    @ImageId INT
AS
BEGIN
	INSERT INTO
        EditorTemplate
            (Title, Description, Html, ImageId)
        VALUES
            (@Title, @Description, @Html, @ImageId)
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateDeviationStatus]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateDeviationStatus]
	@Name NVARCHAR(100),
	@Description NVARCHAR(MAX),
	@SortOrder INT
AS
BEGIN
	SET NOCOUNT ON;
    INSERT INTO Deviation.Statuses
    (
        Name,
		[Description],
        SortOrder,
        IsDeleted
    )
    VALUES
    (
        @Name, 
		@Description,
        @SortOrder,
        0 
    ); 
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateDeviationLog]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateDeviationLog]
	@DeviationId INT,
	@LogDate DATETIME,
	@LogByPersonId INT,
	@Description NVARCHAR(MAX),
	@ActionType INT,
	@Editable BIT = 0
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO Deviation.DeviationLog
	(
	    --DeviationLogId - this column value is auto-generated
	    DeviationId,
	    LogDate,
	    LogByPersonId,
	    [Description],
	    ActionType,
	    Editable
	)
	VALUES
	(
	    -- DeviationLogId - int
	    @DeviationId, -- DeviationId - int
	    @LogDate, -- LogDate - datetime
	    @LogByPersonId, -- LogByPersonId - int
	    @Description, -- Description - nvarchar
	    @ActionType, -- ActionType - int
	    @Editable
	)
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateDeviation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateDeviation]
	@Title NVARCHAR(500),
	@Description NVARCHAR(MAX),
	@Consequence TINYINT,
	@CategoryId INT,
	@ImmediateAction NVARCHAR(MAX),
	@ImmediateConsequences NVARCHAR(MAX),
	@ProposedActions NVARCHAR(MAX),
	@RegisteredByUser INT,
	@Type INT,
	@Priority INT,
	@EventDate DATETIME,
	@LocationId INT,
	@DueDate DATETIME,
	@RegisterDate DATETIME,
	@RegisteredByDepartment INT,
	@HandledByDepartment INT,
	@ServiceAreaId INT,
	@DeviationCustomFieldDataTable AS [Deviation].[DeviationCustomFieldTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(DeviationId),0) FROM Deviation.Deviation;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO 
		Deviation.Deviation(
			Title, [Description], Consequence, CategoryId, 
			ImmediateAction, ImmediateConsequences, ProposedActions, RegisteredByUser,
			[Priority] ,[Type], EventDate, LocationId, DueDate, [State], IsDeleted, RegisterDate,
			RegisteredByDepartment, HandledByDepartment, AssignedDeparementDate, ServiceAreaID, UpdatedDate
		) 
    VALUES(
		@Title, @Description, @Consequence, @CategoryId, 
		@ImmediateAction, @ImmediateConsequences, @ProposedActions, @RegisteredByUser,
		@Priority ,@Type, @EventDate, @LocationId, @DueDate, 2, 0, @RegisterDate,
		@RegisteredByDepartment, @HandledByDepartment, @RegisterDate, @ServiceAreaId, GETDATE());
	INSERT INTO Deviation.DeviationCustomField(DeviationId, CategoryId, CategoryCustomFieldId, [Text], OptionId)
	SELECT @newId, CategoryId, CategoryCustomFieldId, [Text], OptionId FROM @DeviationCustomFieldDataTable
	SELECT @newId;
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateCategoryDefinitions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateCategoryDefinitions]
	@CategoryId INT,
	@DefinitionType INT,
	@Definitions AS dbo.Items READONLY
AS
BEGIN
	SET NOCOUNT ON;
    INSERT INTO Deviation.CategoryDefinitions
    (
        CategoryId,
        DefinitionType,
        DefinitionValue,
        Definition
    )
    SELECT @CategoryId, @DefinitionType, Id, Value FROM @Definitions
    WHERE Id NOT IN (SELECT cd.DefinitionValue FROM Deviation.CategoryDefinitions cd 
		WHERE cd.CategoryId = @CategoryId 
		AND cd.DefinitionType = @DefinitionType);
	UPDATE cd
	SET
	    [Definition] = d.Value
	FROM Deviation.CategoryDefinitions cd
	JOIN @Definitions d ON d.Id = cd.DefinitionValue
	WHERE cd.CategoryId = @CategoryId AND cd.DefinitionType = @DefinitionType;
    DELETE Deviation.CategoryDefinitions WHERE CategoryId = @CategoryId 
    AND DefinitionValue NOT IN (SELECT Id FROM @Definitions);
END
GO
/****** Object:  StoredProcedure [Deviation].[CreateCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CreateCategory]
	@ParentCategoryId INT,
	@TopCategoryId INT,
	@Depth INT,
	@Name NVARCHAR(500),
	@Description NVARCHAR(MAX),
	@Cost INT,
	@CategoryType INT,
	@DueDatePeriod INT,
	@Priority INT,
	@KPI INT,
	@KPIPeriod INT,
	@SecGroupId INT,
	@AnonymousSecGroupId INT,
	@IncludePatientInfo BIT,
	@IncludeForwaringOption BIT,
	@AnonymousIsDefault BIT,
	@IncludeServiceArea BIT,
	@ServiceAreaId INT
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(CategoryId),0) FROM Deviation.Category;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO Deviation.Category(
		ParentCategoryId, TopCategoryId, Depth, Name, [Description], Cost, CategoryType,
		DueDatePeriod, [Priority], KPI, KPIPeriod, IsDeleted, IncludePatientInfo, IncludeForwaringOption,
		SecGroupId, AnonymousSecGroupId, AnonymousIsDefault, ServiceAreaID) 
    VALUES(
		@ParentCategoryId, @TopCategoryId, @Depth, @Name, @Description, @Cost, @CategoryType,
		@DueDatePeriod, @Priority, @KPI, @KPIPeriod, 0, @IncludePatientInfo, @IncludeForwaringOption,
		@SecGroupId, @AnonymousSecGroupId, @AnonymousIsDefault, CASE WHEN @IncludeServiceArea = 1 THEN @ServiceAreaId ELSE NULL END);
	SELECT @newId;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetUploadFoldersChildCount]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnGetUploadFoldersChildCount] 
(
	@iFolderId INT
)
RETURNS INT
AS
BEGIN
	DECLARE @ReturnVal INT
	SET @ReturnVal = (SELECT COUNT(uf.iFolderId) 
				FROM dbo.UploadFolders uf WHERE uf.iParentFolderId = @iFolderId 
					AND iDeleted = 0);	
	RETURN @ReturnVal;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnDocumentCanBeApproved]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnDocumentCanBeApproved] 
(
	@EntityId INT = NULL
) RETURNS BIT
AS
BEGIN
	DECLARE @Result BIT;
    DECLARE @RequiredTemplateRecords TABLE(iMetaInfoTemplateRecordsId INT);
    DECLARE @NumberOfRequiredRecordsInDocumentTemplate INT;
    DECLARE @NumberOfValidNumberRecordsInDocument INT;
    DECLARE @NumberOfValidTextRecordsInDocument INT;
    DECLARE @NumberOfValidRichTextRecordsInDocument INT;
    DECLARE @NumberOfValidDateRecordsInDocument INT;
    IF @EntityId = NULL
    BEGIN
        SET @Result = 0;
    END
    ELSE
    BEGIN
		INSERT INTO
			@RequiredTemplateRecords
		SELECT
			dti.iMetaInfoTemplateRecordsId
		FROM
			m136_tblDocument d
				INNER JOIN m136_tblDocumentType dt
					ON d.iDocumentTypeId = dt.iDocumentTypeId
				INNER JOIN m136_relDocumentTypeInfo dti
					ON dt.iDocumentTypeId = dti.iDocumentTypeId
		WHERE
			d.iEntityId = @EntityId
            AND dti.iDeleted = 0
            AND dti.iMandatory = 1
        -- Select number of required fields in document template
        SELECT
			@NumberOfRequiredRecordsInDocumentTemplate = COUNT(*)
		FROM
			@RequiredTemplateRecords
        -- Select number of valid number fields in document
        SELECT
			@NumberOfValidNumberRecordsInDocument = COUNT(*)
		FROM
			m136_tblDocument d
				INNER JOIN m136_tblMetaInfoNumber mi
					ON d.iEntityId = mi.iEntityId
		WHERE
			d.iEntityId = @EntityId
			AND mi.iMetaInfoTemplateRecordsId IN (SELECT iMetaInfoTemplateRecordsId FROM @RequiredTemplateRecords)
			AND mi.[value] IS NOT NULL
        -- Select number of valid text fields in document
        SELECT
			@NumberOfValidTextRecordsInDocument = COUNT(*)
		FROM
			m136_tblDocument d
				INNER JOIN m136_tblMetaInfoText mi
					ON d.iEntityId = mi.iEntityId
		WHERE
			d.iEntityId = @EntityId
			AND mi.iMetaInfoTemplateRecordsId IN (SELECT iMetaInfoTemplateRecordsId FROM @RequiredTemplateRecords)   
			AND mi.[value] <> ''     
        -- Select number of valid rich text fields in document
        SELECT
			@NumberOfValidRichTextRecordsInDocument = COUNT(*)
		FROM
			m136_tblDocument d
				INNER JOIN m136_tblMetaInfoRichText mi
					ON d.iEntityId = mi.iEntityId
		WHERE
			d.iEntityId = @EntityId
			AND mi.iMetaInfoTemplateRecordsId IN (SELECT iMetaInfoTemplateRecordsId FROM @RequiredTemplateRecords)
			AND cast(mi.[value] as nvarchar(max)) <> ''
        -- Select number of valid date fields in document
        SELECT
			@NumberOfValidDateRecordsInDocument = COUNT(*)
		FROM
			m136_tblDocument d
				INNER JOIN m136_tblMetaInfoDate mi
					ON d.iEntityId = mi.iEntityId
		WHERE
			d.iEntityId = @EntityId
			AND mi.iMetaInfoTemplateRecordsId IN (SELECT iMetaInfoTemplateRecordsId FROM @RequiredTemplateRecords)
			AND mi.[value] IS NOT NULL
        IF @NumberOfRequiredRecordsInDocumentTemplate = @NumberOfValidNumberRecordsInDocument + @NumberOfValidTextRecordsInDocument + @NumberOfValidRichTextRecordsInDocument + @NumberOfValidDateRecordsInDocument
        BEGIN
            SET @Result = 1;
        END
        ELSE
        BEGIN
            SET @Result = 0;
        END
    END
    RETURN @Result;
END
GO
/****** Object:  Table [Risk].[AreaConsequences]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AreaConsequences](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AreaId] [int] NOT NULL,
	[ConsequenceTypeId] [tinyint] NOT NULL,
	[ConsequenceId] [tinyint] NOT NULL,
	[iDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_AreaConsequences] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Deviation].[DeleteTasks]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteTasks]
	@DeviationId INT,
	@Ids AS [Deviation].[IdsTable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE ba
	SET
	    ba.IsDeleted = 1
	FROM Deviation.BaseAction ba
	WHERE ba.DeviationId = @DeviationId
	AND ba.BaseActionId IN (SELECT Id FROM @Ids);
	UPDATE Deviation.Deviation
    SET 
        UpdatedDate = GETDATE()
    WHERE DeviationId = @DeviationId;
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteServiceAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteServiceAreas]
	@Items AS Deviation.IdsTable READONLY
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE Deviation.ServiceAreas
    SET
        Deviation.ServiceAreas.IsDeleted = 1
    WHERE Id IN (SELECT Id FROM @Items)
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteRiskAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteRiskAreas] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.Areas
    SET
        iDeleted = 1
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteNotificationEmailOfCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteNotificationEmailOfCategory]
	@CategoryAlertId INT
AS
SET NOCOUNT ON
BEGIN
	DELETE 
	FROM Deviation.CategoryAlerts
	WHERE CategoryAlertId = @CategoryAlertId
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteNotification]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteNotification]
	@IdsDataTable AS [dbo].[Items] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE [Deviation].[Notification]
	SET IsDeleted = 1
	WHERE NotificationId IN (SELECT Id FROM @IdsDataTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[DeleteLocation]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[DeleteLocation]
	@IdsTable AS [Deviation].[IdsTable] READONLY
AS
BEGIN
	UPDATE Deviation.Location
	SET IsDeleted = 1
	WHERE LocationId IN (SELECT Id FROM @IdsTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationCustomFieldsAndOptions]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviationCustomFieldsAndOptions]
	@DeviationId INT,
	@DeviationCustomFieldDataTable AS [Deviation].[DeviationCustomFieldTable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	-- update existed fields/options
	UPDATE dcf
	SET
	    dcf.CategoryCustomFieldId = dcf1.CategoryCustomFieldId, 
	    dcf.[Text] = dcf1.Text, 
	    dcf.OptionId = dcf1.OptionId
	FROM Deviation.DeviationCustomField dcf
	INNER JOIN @DeviationCustomFieldDataTable dcf1
		ON dcf1.DeviationId = dcf.DeviationId
	WHERE dcf.DeviationId = @DeviationId 
		AND dcf.DeviationCustomFieldId = dcf1.DeviationCustomFieldId;
	--remove unused fields/options
	DELETE Deviation.DeviationCustomField 
	WHERE DeviationId = @DeviationId 
	AND DeviationCustomFieldId NOT IN (SELECT dcf.DeviationCustomFieldId 
		FROM @DeviationCustomFieldDataTable dcf WHERE dcf.DeviationId = @DeviationId);
	-- Insert new fields/options	
	INSERT INTO Deviation.DeviationCustomField
	(
	    DeviationId,
	    CategoryId,
	    CategoryCustomFieldId,
	    OptionId,
	    [Text]
	)
	SELECT dcf.DeviationId, 
		dcf.CategoryId, 
		dcf.CategoryCustomFieldId, 
		dcf.OptionId, 
		dcf.[Text] 
	FROM @DeviationCustomFieldDataTable dcf
	WHERE dcf.DeviationCustomFieldId NOT IN (SELECT dcf2.DeviationCustomFieldId 
	FROM Deviation.DeviationCustomField dcf2 WHERE dcf2.DeviationId = @DeviationId);
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviationAttachments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI	
-- Create date: MAR 29. 2015
-- Description:	Update deviation attachments
-- =============================================
CREATE PROCEDURE [Deviation].[UpdateDeviationAttachments]
	@Id INT,
	@Attachments AS [Deviation].[DeviationAttachment] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE 
		@DeviationAttachmentId INT,
		@DeviationId INT,
		@Title [nvarchar](400),
		@Description [nvarchar](max),
		@Size [int],
		@ContentType [varchar](400),
		@Extension [varchar](10),
		@Content [varbinary](max),
		@IsDeleted [bit],
		@Removable [bit];
	DECLARE @NewAttachments TABLE(
		DeviationAttachmentId INT
	);
	DECLARE Attachments CURSOR FOR 
		SELECT 
			[DeviationAttachmentId],
			@Id,
			[@Attachments].Title, 
			[@Attachments].[Description], 
			[@Attachments].Size, 
			[@Attachments].ContentType, 
			[@Attachments].Extension, 
			[@Attachments].Content, 
			[@Attachments].IsDeleted, 
			[@Attachments].Removable
		FROM @Attachments;
	OPEN Attachments; 
	FETCH NEXT FROM Attachments INTO @DeviationAttachmentId, 
		@DeviationId, 
		@Title, 
		@Description, 
		@Size, 
		@ContentType, 
		@Extension, 
		@Content,
		@IsDeleted,
		@Removable;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM Deviation.DeviationAttachment
			WHERE DeviationId = @DeviationId
				AND DeviationAttachmentId = @DeviationAttachmentId)
		BEGIN
			INSERT INTO Deviation.DeviationAttachment
			(
			    DeviationId, 
			    Title, 
			    [Description], 
			    Size, 
			    ContentType, 
			    Extension, 
			    Content, 
			    IsDeleted, 
			    Removable
			)
			VALUES
			(
			    @DeviationId,
			    @Title,
			    @Description,
			    @Size,
			    @ContentType,
			    @Extension,
			    @Content,
			    @IsDeleted,
			    @Removable 
			)
			INSERT INTO @NewAttachments SELECT SCOPE_IDENTITY();
		END
		FETCH NEXT FROM Attachments INTO @DeviationAttachmentId, 
			@DeviationId, 
			@Title, 
			@Description, 
			@Size, 
			@ContentType, 
			@Extension, 
			@Content,
			@IsDeleted,
			@Removable;
	END
	CLOSE Attachments;
	DEALLOCATE Attachments;
	IF EXISTS(SELECT * FROM Deviation.DeviationAttachment da WHERE DeviationAttachmentId IS NOT NULL AND DeviationAttachmentId <> 0)
	BEGIN
		DELETE Deviation.DeviationAttachment WHERE DeviationId = @Id
			AND DeviationAttachmentId NOT IN (SELECT DeviationAttachmentId FROM @Attachments 
				WHERE DeviationAttachmentId IS NOT NULL AND DeviationAttachmentId <> 0)
			AND DeviationAttachmentId NOT IN (SELECT dda.DeviationAttachmentId FROM @NewAttachments dda);
    END	
END
GO
/****** Object:  StoredProcedure [dbo].[ssp_WriteFileChunk]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_WriteFileChunk] (@iAutoId int, @iIndex int, @imgData image) AS

SET NOCOUNT ON

DECLARE @bnTextPointer binary(16)

SELECT @bnTextPointer = TEXTPTR(imgContent) FROM tblBlob WHERE iAutoId = @iAutoId

IF (@bnTextPointer IS NULL) RETURN

IF (@iIndex > 0)
	UPDATETEXT tblBlob.imgContent @bnTextPointer @iIndex 0 @imgData
ELSE
	WRITETEXT tblBlob.imgContent @bnTextPointer @imgData
GO
/****** Object:  StoredProcedure [dbo].[ssp_ReadFileChunk]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_ReadFileChunk] (@iAutoId int, @iIndex int, @iChunkSize int) AS
DECLARE @iDataSize int

SET NOCOUNT ON

DECLARE @bnTextPointer binary(16)

SELECT @bnTextPointer = TEXTPTR(imgContent), @iDataSize = DATALENGTH(imgContent) FROM tblBlob WHERE iAutoId = @iAutoId

IF (@bnTextPointer IS NULL) RETURN
IF (@iIndex + @iChunkSize > @iDataSize) SET @iChunkSize = @iDataSize - @iIndex
IF (@iIndex > @iDataSize) SET @iIndex = @iDataSize

READTEXT tblBlob.imgContent @bnTextPointer @iIndex @iChunkSize
GO
/****** Object:  StoredProcedure [dbo].[ssp_MapImageIdToProperties]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_MapImageIdToProperties]
	@iUserId integer,
	@strEntityIds varchar(8000)
AS

DECLARE
	@strTmpTableName varchar(100),
	@strTmpCreateTable varchar (2000),

	@strResult varchar(500),

	@iIdPos integer,
	@iTmpPos integer,
	@iIdLen integer,
	@strId varchar(20),
	@strSQL nvarchar(2000),

	@iAccess integer,
	@iGroupId integer,

	@iEntityId integer,
	@iSize integer,
	@iHeight integer,
	@iWidth integer,
	@strName varchar(150),
	@strURL varchar(300),
	@strDescription varchar(400)

SET NOCOUNT ON

-- GENERATE TEMPORARY TABLE NAME
SET @strTmpTableName = '[##' + HOST_NAME() + RTRIM(@@spid) + convert(varchar(30), getdate(),14) + ']'

---------------------
SET @strTmpCreateTable = 'CREATE TABLE ' + @strTmpTableName + '
(iIndex int NOT NULL IDENTITY(1,1)  PRIMARY KEY (iIndex, iEntityId), iEntityId int NOT NULL, 
strName varchar(150) NOT NULL DEFAULT '''', 
strURL varchar(300) NOT NULL DEFAULT '''', 
strDescription varchar(400) NOT NULL DEFAULT '''', iAccess int NOT NULL DEFAULT 0, iGroupId int NOT NULL DEFAULT 0, iSize int NOT NULL DEFAULT 0, iHeight int NOT NULL DEFAULT 0, iWidth int NOT NULL DEFAULT 0)'
--print @strTmpCreateTable

-- CREATE THE TABLE
EXECUTE (@strTmpCreateTable)

-- MAKE CURSOR STATEMENT
SET @strResult = '
DECLARE curResult
CURSOR SCROLL DYNAMIC FOR
select im.iItemId, im.strPhotoNo, im.strPictureURL, im.strDescription, i.iGroupId, b1.iSize, b1.iHeight, b1.iWidth
from tblImage im, tblItem i, tblGroup g, tblBlob b1
where i.iInformationTypeId = 5 and i.iItemId > 0 and i.iItemId = im.iItemId and i.iGroupId = g.iGroupId and b1.iItemId = i.iItemId and b1.iType = 50 and i.iItemId IN ('
-- CREATE CURSOR
EXEC (@strResult + @strEntityIds + ')')

-- SPLIT ARGUMENT STRINGS AND INSERT INTO TABLE
set @strSQL = 'INSERT INTO ' + @strTmpTableName + '(iEntityId) VALUES(@iEntityId)'

set @strEntityIds =  @strEntityIds + ','
set @iIdLen = len(@strEntityIds)
set @iIdPos = 1
while (@iIdPos < @iIdLen)
BEGIN
	-- GET NEXT ID
	set @iTmpPos = charindex(',', @strEntityIds, @iIdPos)
	set @strId = substring(@strEntityIds, @iIdPos, @iTmpPos - @iIdPos)
	set @iIdPos = @iTmpPos + 1
	exec sp_executesql @strSQL, N'@iEntityId int', @iEntityId = @strId
--print cast(@iIdPos as varchar) + '-' + cast(@iTmpPos as varchar) + ': ' + @strId
END


set @strSQL = 'UPDATE ' + @strTmpTableName + ' SET strName = @strName, strURL = @strURL, strDescription = @strDescription, iAccess = @iAccess, iGroupId = @iGroupId, iSize = @iSize, iHeight = @iHeight, iWidth = @iWidth WHERE iEntityId = @iEntityId'

-- OPEN CURSOR
OPEN curResult

-- GET FIRST STACK ITEM
FETCH FIRST FROM curResult
INTO 	@iEntityId,
	@strName,
	@strURL,
	@strDescription,
	@iGroupId,
	@iSize,
	@iHeight,
	@iWidth

WHILE (@@FETCH_STATUS = 0)
BEGIN
	EXEC ssp_GetEntityPermission @iUserId, 98, 99, @iEntityId, @iAccess OUTPUT
	if (@iAccess & 1) = 0
	begin
		set @strName = '&lt;You do not have access to this image&gt;'
		set @strURL = '../images/no_access.gif'
		set @strDescription = ''
	end
	EXEC sp_executesql @strSQL, N'@strName varchar(150), @strURL varchar(300), @strDescription varchar(400), @iEntityId int, @iAccess int, @iGroupId int, @iSize int, @iHeight int, @iWidth int', @strName = @strName, @strURL = @strURL, @strDescription = @strDescription, @iEntityId = @iEntityId, @iAccess = @iAccess, @iGroupId = @iGroupId, @iSize = @iSize, @iHeight = @iHeight, @iWidth = @iWidth 

	FETCH NEXT FROM curResult 
	INTO 	@iEntityId,
		@strName,
		@strURL,
		@strDescription,
		@iGroupId,
		@iSize,
		@iHeight,
		@iWidth
END	

-- clean up
CLOSE curResult
DEALLOCATE curResult

exec('SELECT iEntityId iId, strName, strURL, strDescription, iAccess, iGroupId, iSize, iHeight, iWidth FROM ' + @strTmpTableName)
GO
/****** Object:  StoredProcedure [dbo].[ssp_MapFileIdToProperties]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ssp_MapFileIdToProperties]
	@iUserId integer,
	@strEntityIds varchar(8000)
AS

DECLARE
	@strTmpTableName varchar(100),
	@strTmpCreateTable varchar (2000),

	@strResult varchar(500),

	@iIdPos integer,
	@iTmpPos integer,
	@iIdLen integer,
	@strId varchar(20),
	@strSQL nvarchar(2000),

	@iAccess integer,

	@iEntityId integer,
	@strName varchar(150),
	@strURL varchar(300),
	@strDescription varchar(400),
	@iSize integer

SET NOCOUNT ON

-- GENERATE TEMPORARY TABLE NAME
SET @strTmpTableName = '[##' + HOST_NAME() + RTRIM(@@spid) + convert(varchar(30), getdate(),14) + ']'

---------------------
SET @strTmpCreateTable = 'CREATE TABLE ' + @strTmpTableName + '
(iIndex int NOT NULL IDENTITY(1,1)  PRIMARY KEY (iIndex, iEntityId), iEntityId int NOT NULL, 
strName varchar(150) NOT NULL DEFAULT '''', 
strURL varchar(300) NOT NULL DEFAULT '''', 
strDescription varchar(400) NOT NULL DEFAULT '''',
iSize int NOT NULL DEFAULT 0, iAccess int NOT NULL DEFAULT 0)'
--print @strTmpCreateTable

-- CREATE THE TABLE
EXECUTE (@strTmpCreateTable)

-- MAKE CURSOR STATEMENT
SET @strResult = '
DECLARE curResult
CURSOR SCROLL DYNAMIC FOR
select f.iItemId, f.strName, f.strFileName strURL, f.strDescription, b.iSize
from tblFile f, tblItem i, tblGroup g, tblBlob b
where i.iInformationTypeId = 2 and i.iItemId > 0 and i.iItemId = f.iItemId and i.iGroupId = g.iGroupId and b.iItemId = i.iItemId and b.iType=20 and i.iItemId IN ('
-- CREATE CURSOR
EXEC (@strResult + @strEntityIds + ')')

-- SPLIT ARGUMENT STRINGS AND INSERT INTO TABLE
set @strSQL = 'INSERT INTO ' + @strTmpTableName + '(iEntityId) VALUES(@iEntityId)'

set @strEntityIds =  @strEntityIds + ','
set @iIdLen = len(@strEntityIds)
set @iIdPos = 1
while (@iIdPos < @iIdLen)
BEGIN
	-- GET NEXT ID
	set @iTmpPos = charindex(',', @strEntityIds, @iIdPos)
	set @strId = substring(@strEntityIds, @iIdPos, @iTmpPos - @iIdPos)
	set @iIdPos = @iTmpPos + 1
	exec sp_executesql @strSQL, N'@iEntityId int', @iEntityId = @strId
--print cast(@iIdPos as varchar) + '-' + cast(@iTmpPos as varchar) + ': ' + @strId
END


set @strSQL = 'UPDATE ' + @strTmpTableName + ' SET strName = @strName, strURL = @strURL, strDescription = @strDescription, iSize = @iSize, iAccess = @iAccess WHERE iEntityId = @iEntityId'

-- OPEN CURSOR
OPEN curResult

-- GET FIRST STACK ITEM
FETCH FIRST FROM curResult
INTO 	@iEntityId,
	@strName,
	@strURL,
	@strDescription,
	@iSize

WHILE (@@FETCH_STATUS = 0)
BEGIN
	EXEC ssp_GetEntityPermission @iUserId, 98, 99, @iEntityId, @iAccess OUTPUT
	if (@iAccess & 1) = 0
	begin
		set @strName = '&lt;You do not have read access to this file&gt;'
		set @strURL = ''
		set @strDescription = ''
		set @iSize = 0
	end
	EXEC sp_executesql @strSQL, N'@strName varchar(150), @strURL varchar(300), @strDescription varchar(400), @iSize int, @iEntityId int, @iAccess int', @strName = @strName, @strURL = @strURL, @strDescription = @strDescription, @iSize = @iSize , @iEntityId = @iEntityId, @iAccess = @iAccess 

	FETCH NEXT FROM curResult 
	INTO 	@iEntityId,
		@strName,
		@strURL,
		@strDescription,
		@iSize
END	

-- clean up
CLOSE curResult
DEALLOCATE curResult

exec('SELECT iEntityId iId, strName, strURL, strDescription, iSize, iAccess FROM ' + @strTmpTableName)
GO
/****** Object:  StoredProcedure [dbo].[sp_upgraddiagrams]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_upgraddiagrams]
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_renamediagram]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_renamediagram]
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_helpdiagrams]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_helpdiagrams]
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_helpdiagramdefinition]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_helpdiagramdefinition]
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_dropdiagram]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_dropdiagram]
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
GO
/****** Object:  StoredProcedure [dbo].[sp_creatediagram]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_creatediagram]
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportHandbookOverview]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportHandbookOverview]
	@SecurityId AS INT	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @resultTable TABLE(iHandbookId INT, strName NVARCHAR(200), iLevelType INT, 
	   Approved INT, Expired INT, NewCount INT, NewAndUpdatedCount INT, Revised INT, AwaitingApproval INT, Archived INT,
	   Internet INT, Folders INT)
	INSERT INTO @resultTable (iHandbookId ,strName, iLevelType ) 
	VALUES (0,'eHåndbok',0)
	DECLARE @Approved INT
	DECLARE @Expired INT
	DECLARE @NewCount INT
	DECLARE @NewAndUpdatedCount INT
	DECLARE @Revised INT
	DECLARE @AwaitingApproval INT
	DECLARE @Archived INT
	DECLARE @Folders INT	
	DECLARE @Internet INT
	DECLARE @DateFrom DATETIME
	DECLARE @DateTo DATETIME
	SET @DateFrom = DATEADD(YEAR, DATEDIFF(YEAR, 0, GETDATE()), 0)
	SET @DateTo = GETDATE()
		SELECT @Folders = (SELECT COUNT(*) FROM m136_tblHandbook WHERE iDeleted = 0) 
		SELECT @Approved = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.dtmPublish < @DateTo)
		SELECT @Expired = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.dtmPublishUntil < @DateTo)
		SELECT @AwaitingApproval = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 0 and d.iLatestVersion = 1 and d.iDraft = 0 
					and d.iApproved = 0 and d.dtmCreated < @DateTo)
		SELECT @Archived = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 0 and d.iLatestVersion = 1 and d.iDraft = 0 
					and d.iApproved = 4 and d.dtmApproved < @DateTo)
		SELECT @NewCount = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.iVersion = 0 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)
		SELECT @NewAndUpdatedCount = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)			
		SELECT @Revised = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.iVersion > 0 and d.dtmPublish >= @DateFrom and 
					d.dtmPublish < @DateTo)	
		select @Internet = (SELECT COUNT(*) 
				FROM m136_tblDocument d
					WHERE d.iLatestApproved = 1 and d.iInternetDoc = 1 and d.dtmPublish < @DateFrom)
		UPDATE @resultTable 
		SET Approved = @Approved, Folders = @Folders , Expired = @Expired,
		AwaitingApproval = @AwaitingApproval, Revised = @Revised, Archived = @Archived,
		NewCount = @NewCount, NewAndUpdatedCount = @NewAndUpdatedCount, Internet = @Internet
		WHERE iHandbookId = 0;
	SELECT strName AS FolderName, iLevelType AS LevelType, Approved, 
	Expired, NewAndUpdatedCount, NewCount , Revised ,AwaitingApproval, 
	Archived, Internet , Folders 
	FROM @resultTable
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportHandbookDocumentTypes]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spReportHandbookDocumentTypes]
	@SecurityId AS INT	
AS
BEGIN
	DECLARE @docTypeTable TABLE(DocTypeCount INT,  DocType VARCHAR(100),DocTypeId INT) 
	INSERT INTO @docTypeTable (DocTypeCount ,DocType,DocTypeId) 
		(SELECT COUNT(d.idocumenttypeid) AS Count,
				 dt.strName AS DocType, dt.iDocumentTypeId AS DocTypeId
			FROM m136_tblDocument d
				INNER JOIN m136_tblDocumentType dt on dt.idocumenttypeid = d.idocumenttypeid
			WHERE  d.iLatestApproved = 1 and d.dtmPublish < GETDATE() 
		GROUP BY d.idocumenttypeid, dt.strName, dt.iDocumentTypeId)
	SELECT DocTypeId, DocType, DocTypeCount FROM @docTypeTable	
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_GetNewsCategoryById]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_GetNewsCategoryById]
    @CategoryId INT
AS
BEGIN
    SELECT
        iCategoryId,
        strName,
        iAccess,
        iShownIn,
        strDescription
    FROM
        m123_tblCategory
    WHERE
        iCategoryId = @CategoryId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_GetChildCategoryFromParentCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_GetChildCategoryFromParentCategory]
    @ParentCategoryId INT
AS
BEGIN
    SELECT
        iCategoryId,
        iParentCategoryId,
        strName,
        iShownIn,
        iAccess,
        strDescription
    FROM
        m123_tblCategory
    WHERE
        iParentCategoryId = @ParentCategoryId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_EditNewsCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_EditNewsCategory]
    @ParentCategoryId INT,
    @NewsCategoryId INT,
    @Name VARCHAR(100),
    @Description VARCHAR(1000),
    @Access TINYINT,
    @ShownIn TINYINT
AS
BEGIN
    UPDATE
        m123_tblCategory
    SET
        strName = @Name,
        strDescription = @Description,
        iAccess = @Access,
        iShownIn = @ShownIn
    WHERE
        iCategoryId = @NewsCategoryId
        AND iParentCategoryId = @ParentCategoryId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_DeleteNewsAttachments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_DeleteNewsAttachments]
    @ItemIds AS [dbo].[Item] READONLY
AS
BEGIN
    DELETE FROM
        m123_relInfo
    WHERE
        iEntityId IN (SELECT Id FROM @ItemIds)
    DELETE FROM
        m136_tblBlob
    WHERE
        iItemId IN (SELECT Id FROM @ItemIds)
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_CreateNews]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_CreateNews]
    @CategoryId INT,
    @Title VARCHAR(300),
    @Ingress VARCHAR(800),
    @Body TEXT,
    @Publish DATETIME,
    @Expire DATETIME,
    @AuthorId INT,
    @Draft INT
AS
BEGIN
    DECLARE @InfoId INT;
    DECLARE @Now DATETIME = GETDATE();
    INSERT INTO
        m123_tblInfo
            (strTitle, strIngress, strBody, dtmCreated, dtmChanged, dtmPublish, dtmExpire, iAuthorId, iDraft)
        VALUES
            (@Title, @Ingress, @Body, @Now, @Now, @Publish, @Expire, @AuthorId, @Draft)
    SET @InfoId = SCOPE_IDENTITY();
    INSERT INTO
        m123_relInfoCategory
            (iInfoId, iCategoryId)
        VALUES
            (@InfoId, @CategoryId);
    SELECT @InfoId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_AddNewsRelatedAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_AddNewsRelatedAttachment]
    @RelationTypeId INT,
    @Name VARCHAR(300),
    @Description VARCHAR(800),
    @Size INT,
    @FileName VARCHAR(200),
    @ContentType VARCHAR(100),
    @Extension VARCHAR(100),
    @ImgContent [image]
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @MaxId INT;
    DECLARE @ItemId INT;
    SELECT @MaxId = MAX(iItemId) FROM dbo.m136_tblBlob;
    SET @ItemId = ISNULL(@MaxId, 0) + 1;
    SET IDENTITY_INSERT dbo.m136_tblBlob ON;
    INSERT INTO
        m136_tblBlob
            (iItemId, iInformationTypeId, strName, strDescription, iSize, strFileName, strContentType, strExtension, imgContent, bInUse, dtmRegistered, iWidth, iHeight)
        VALUES
            (@ItemId, @RelationTypeId, @Name, @Description, @Size, @FileName, @ContentType, @Extension, @ImgContent, 1, GETDATE(), 0, 0);
    SET IDENTITY_INSERT dbo.m136_tblBlob OFF;
	SELECT @ItemId;
END
GO
/****** Object:  StoredProcedure [dbo].[m123_LinkNewsAttachment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_LinkNewsAttachment]
    @NewsId INT,
    @ItemId INT,
    @RelationTypeId INT,
    @CategoryId INT
AS
BEGIN
    INSERT INTO
        m123_relInfo
            (iInfoId, iEntityId, iVJustifyId, iHJustifyId, iRelationTypeId, iCategoryId)
        VALUES
            (@NewsId, @ItemId, 0, 0, @RelationTypeId, @CategoryId);
END
GO
/****** Object:  StoredProcedure [Deviation].[GetLocations]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetLocations]
	@PageIndex INT,
	@PageSize INT,
	@IsLoadMore BIT
AS
BEGIN
	WITH locations AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY l.LocationId DESC),
			l.*
		FROM 
			Deviation.Location l
		WHERE
			l.IsDeleted = 0
	)
	SELECT 
		l.*
	FROM 
		locations l
	WHERE 
		(@PageSize = 0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				Deviation.Location l
			WHERE
				l.IsDeleted = 0
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [Deviation].[GetLocationById]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetLocationById]
	@LocationId INT
AS
BEGIN
	SELECT *
	FROM Deviation.Location
	WHERE LocationId = @LocationId
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationCustomFields]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationCustomFields]
	@Id INT
AS
SET NOCOUNT ON
BEGIN
	SELECT  dcf.DeviationCustomFieldId, 
		dcf.DeviationId, 
		dcf.CategoryId, 
		dcf.CategoryCustomFieldId, 
		dcf.[Text], 
		dcf.OptionId
	FROM Deviation.DeviationCustomField dcf
	WHERE dcf.DeviationId = @Id;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationStatuses]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationStatuses] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT s.Id, 
		s.Name, 
		s.[Description],
		s.SortOrder, 
		s.IsDeleted 
    FROM Deviation.Statuses s
    WHERE (@Id IS NULL OR s.Id = @Id)
		AND s.IsDeleted = 0
    ORDER BY s.SortOrder, s.Name;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[GetSubCategoryIds]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[GetSubCategoryIds]
(
	@CategoryId INT
)
RETURNS @Table TABLE(CategoryId INT) 
AS
BEGIN
	DECLARE @tmpCategoryId INT
	IF EXISTS (SELECT CategoryId FROM [Deviation].Category WHERE ParentCategoryId = @CategoryId)
	BEGIN
		DECLARE Cur_SubCategory CURSOR FOR
		SELECT CategoryId FROM [Deviation].Category WHERE ParentCategoryId = @CategoryId
		OPEN Cur_SubCategory 
		FETCH NEXT FROM Cur_SubCategory INTO @tmpCategoryId
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO @Table VALUES (@tmpCategoryId)
			INSERT INTO @Table 
			SELECT CategoryId FROM [Deviation].[GetSubCategoryIds](@tmpCategoryId);
			FETCH NEXT FROM Cur_SubCategory INTO @tmpCategoryId
		END
		CLOSE Cur_SubCategory 
		DEALLOCATE Cur_SubCategory 
	END
	RETURN ;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetServiceAreas]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetServiceAreas] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT sa.Id, 
		sa.Name, 
		sa.Description, 
		sa.SortOrder, 
		sa.IsDeleted 
	FROM Deviation.ServiceAreas sa
	WHERE (sa.Id = @Id OR @Id IS NULL)
		AND sa.IsDeleted = 0
	ORDER BY sa.SortOrder, sa.Name
END
GO
/****** Object:  StoredProcedure [Deviation].[EditCategory]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[EditCategory]
	@CategoryId INT,
	@ParentCategoryId INT,
	@TopCategoryId INT,
	@Depth INT,
	@Name NVARCHAR(500),
	@Description NVARCHAR(MAX),
	@Cost INT,
	@CategoryType INT,
	@DueDatePeriod INT,
	@Priority INT,
	@KPI INT,
	@KPIPeriod INT,
	@SecGroupId INT,
	@AnonymousSecGroupId INT,
	@IncludePatientInfo BIT,
	@IncludeForwaringOption BIT,
	@AnonymousIsDefault BIT,
	@IncludeServiceArea BIT,
	@ServiceAreaId INT,
	@AccessType INT
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.Category
	SET ParentCategoryId = @ParentCategoryId, TopCategoryId= @TopCategoryId, Depth = @Depth, Name = @Name,
	[Description] = @Description, Cost = @Cost, CategoryType = @CategoryType, DueDatePeriod = @DueDatePeriod, [Priority] = @Priority,
	KPI = @KPI, KPIPeriod = @KPIPeriod, SecGroupId = @SecGroupId, AnonymousSecGroupId = @AnonymousSecGroupId,
	IncludePatientInfo = @IncludePatientInfo, IncludeForwaringOption = @IncludeForwaringOption, AnonymousIsDefault = @AnonymousIsDefault,
	IncludeServiceArea = @IncludeServiceArea, ServiceAreaID = (CASE WHEN @IncludeServiceArea = 1 THEN @ServiceAreaId ELSE NULL END),
	AccessType = @AccessType
	WHERE CategoryId = @CategoryId
END
GO
/****** Object:  StoredProcedure [Deviation].[GetTaskAttachments]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetTaskAttachments]
	@TaskId INT
AS
SET NOCOUNT ON
BEGIN
	SELECT aa.ActionAttachmentId AS DeviationAttachmentId, --For reusing DTO on DataLayer
		aa.DeviationId, 
		aa.Title, 
		aa.[Description], 
		aa.ActionType, 
		aa.BaseActionId, 
		aa.Size, 
		aa.ContentType, 
		aa.Extension, 
		aa.Content, 
		aa.IsDeleted, 
		aa.Removable
	FROM Deviation.ActionAttachment aa 
	WHERE aa.BaseActionId = @TaskId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentLatestApproved]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentLatestApproved]
	@DocumentId INT,
	@Version INT
AS
SET NOCOUNT ON
BEGIN
	SELECT
		iLatestApproved
	FROM
		m136_tblDocument
	WHERE
			iDocumentId = @DocumentId
		AND iVersion = @Version
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentFieldContents]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentFieldContents]
	@DocumentTypeId int,
	@iEntityId int
AS
BEGIN
	SELECT	mi.iInfoTypeId, mi.strName strFieldName, mi.strDescription strFieldDescription,
            InfoId = COALESCE (mit.iMetaInfoTextId, mid.iMetaInfoDateId, mii.iMetaInfoNumberId, mir.iMetaInfoRichTextId),
            NumberValue = mii.value, DateValue = mid.value, TextValue = mit.value, RichTextValue = mir.value,                            
            mi.iMetaInfoTemplateRecordsId, mi.iFieldProcessType, rdi.iMaximized
    FROM		[dbo].m136_tblMetaInfoTemplateRecords mi
                JOIN [dbo].m136_relDocumentTypeInfo rdi ON rdi.iDocumentTypeId = @DocumentTypeId AND rdi.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
                LEFT JOIN [dbo].m136_tblMetaInfoDate mid ON mid.iEntityId = @iEntityId AND mid.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
                LEFT JOIN [dbo].m136_tblMetaInfoNumber mii ON mii.iEntityId = @iEntityId AND mii.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
                LEFT JOIN [dbo].m136_tblMetaInfoText mit ON mit.iEntityId = @iEntityId AND mit.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
                LEFT JOIN [dbo].m136_tblMetaInfoRichText mir ON mir.iEntityId = @iEntityId AND mir.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId
    WHERE rdi.iDeleted = 0
    ORDER BY	rdi.iSort
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentConfirmationDate]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentConfirmationDate]
	@SecurityId INT,
	@EntityId INT
AS
BEGIN
	SELECT TOP 1 dtmConfirm 
	FROM m136_tblConfirmRead 
	WHERE iEmployeeId=@SecurityId 
		AND iEntityId=@EntityId 
END
GO
/****** Object:  StoredProcedure [dbo].[be_CreateReadingList]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_CreateReadingList]
    @Name NVARCHAR(100),
    @Description NVARCHAR(400),
    @IsInactive BIT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        INSERT INTO
            ReadingList
                (Name, Description, IsInactive)
            VALUES
                (@Name, @Description, @IsInactive);
        SELECT SCOPE_IDENTITY()
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[be_DeleteReadingLists]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_DeleteReadingLists]
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    UPDATE
        ReadingList
    SET
        IsDeleted = 1
    WHERE
        ReadingListId IN (SELECT Id FROM @ReadingListIds)
END
GO
/****** Object:  StoredProcedure [Deviation].[AssignDeviationsToDepartment]    Script Date: 10/20/2016 11:39:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AssignDeviationsToDepartment]
	@DepartmentId INT,
	@Deviations AS [Deviation].[IdsTable] READONLY
AS
BEGIN
	SET NOCOUNT ON;	
	UPDATE d 
	SET
	    d.HandledByDepartment = @DepartmentId
	FROM Deviation.Deviation d
	WHERE d.DeviationId IN (SELECT Id FROM @Deviations);
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategoryAlerts]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategoryAlerts]
	@CategoryId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT ca.CategoryAlertId, 
		ca.CategoryID, 
		ca.UserId,
		ca.Email, 
		ca.FirstName, 
		ca.LastName 
    FROM Deviation.CategoryAlerts ca 
    WHERE ca.CategoryID = @CategoryId;
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategory]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategory]
	@PageIndex INT,
	@PageSize INT,
	@Text NVARCHAR(400),
	@IsLoadMore BIT
AS
SET NOCOUNT ON
BEGIN
	WITH categories AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY c.CategoryId DESC),
			c.*,
			SecGroupName = CASE
								WHEN c.SecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.SecGroupId)
								WHEN c.AnonymousSecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.AnonymousSecGroupId)
								ELSE NULL
						   END
		FROM 
			Deviation.Category c
		WHERE
			c.IsDeleted = 0
	)
	SELECT 
		c.*, c.SecGroupName
	FROM 
		categories c
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				Deviation.Category c
			WHERE
				c.IsDeleted = 0	
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategories]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategories]
	@CategoryId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	SELECT c.*
	FROM 
		Deviation.Category c
	WHERE
	((@CategoryId IS NULL AND (c.ParentCategoryId IS NULL OR c.ParentCategoryId = 0)) 
			OR c.ParentCategoryId = @CategoryId)
	AND	c.IsDeleted = 0
END
GO
/****** Object:  StoredProcedure [Deviation].[ConfirmReadNotification]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[ConfirmReadNotification]
	@IdsDataTable AS [dbo].[Items] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE [Deviation].[Notification]
	SET IsRead = 1
	WHERE NotificationId IN (SELECT Id FROM @IdsDataTable)
END
GO
/****** Object:  StoredProcedure [Deviation].[CategoryWiseLoadAll]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CategoryWiseLoadAll]
(
	@CategoryIds AS Deviation.IdsTable READONLY,
	@DeviationState INT = 0,
	@CategoryType INT = NULL,
	@Priority INT = NULL,
	@FromDate DATETIME = null,
	@ToDate DATETIME = null,
	@ReportType INT = 0,
	@RegisteredByDepartment INT = -1,
	@HandledByDepartment INT = -1,
	@IncludeSubDepartment BIT = 0
)	
AS
SET NOCOUNT ON  
BEGIN
DECLARE @Sql NVARCHAR(max)  
DECLARE @SqlIncludeSubDepartment NVARCHAR(max) = ''        
DECLARE @SqlSelectClause NVARCHAR(max)   
DECLARE @CategoryIdTable NVARCHAR(500);      
SET @SqlSelectClause = 'SELECT DISTINCT Deviation.DeviationId,
										Title,
										Deviation.Description,
										CONVERT(VARCHAR(10),DueDate,102) AS DueDate,
										CONVERT(VARCHAR(10),DueDate,104) AS DueDateDisplay,
										CASE WHEN Deviation.Priority = 0 THEN ''None''
											 WHEN Deviation.Priority = 1 THEN ''Lav''
											 WHEN Deviation.Priority = 2 THEN ''Middels''
											 WHEN Deviation.Priority = 3 THEN ''Høy''							
											 END AS Priority,
										Deviation.Priority AS PriorityValue,
										Category.CategoryType AS CategoryType,
										Category.ParentCategoryId AS ParentCategoryId,
										([Deviation].[fGetParentCategoryNameByParentCategoryId](Category.ParentCategoryId)) AS ParentCategoryName,
										Category.CategoryId,
										Category.Name As CategoryName,
										Category.Description AS CategoryDesc,
										CASE WHEN Deviation.State = 1 THEN ''Under registrering''
											 WHEN Deviation.State = 2 THEN ''Ny''
											 WHEN Deviation.State = 4 THEN ''Under behandling''
											 WHEN Deviation.State = 8 THEN ''ChangeResponsible''
											 WHEN Deviation.State = 16 THEN ''Lukket''
											 WHEN Deviation.State = 32 THEN ''Slettet''
											 WHEN Deviation.State = 64 THEN ''Submitted''
											 WHEN Deviation.State = 128 THEN ''Videresendt''
											 END AS DeviationState, 
										(
											SELECT Count(Distinct DeviationId) from [Deviation].[GetDeviationByCategoryId](Category.ParentCategoryId)
										) AS ParentCount,									
										(
											SELECT Count(Distinct DeviationId) from [Deviation].[GetDeviationByCategoryId](Category.CategoryId)
										) AS SubCount,
										Depth,
										(
											SELECT Count(Distinct BaseActionId) from [Deviation].[GetCorrectiveActionByCategoryId](Category.CategoryId)
										) AS CorrectiveActionCount ,
										(
											SELECT Count(Distinct BaseActionId) from [Deviation].[GetPreventiveActionByCategoryId](Category.CategoryId)
										) AS PreventiveActionCount,
										(
											SELECT Count(Distinct BaseActionId) from [Deviation].[GetTaskActionByCategoryId](Category.CategoryId)
										) AS TaskActionCount,
										(
											SELECT Count(Distinct BaseActionId) from [Deviation].[GetCorrectiveActionByCategoryId](Category.ParentCategoryId)
										) AS ParentCorrectiveActionCount ,
										(
											SELECT Count(Distinct BaseActionId) from [Deviation].[GetPreventiveActionByCategoryId](Category.ParentCategoryId)
										) AS ParentPreventiveActionCount,
										KPI, KPIPeriod, CONVERT(VARCHAR(10), Deviation.RegisterDate,102) AS RegisteredDate,
										Deviation.HandledByDepartment as DepartmentId,
										Department.strName as HandledByDepartment'
SET @Sql = ' FROM [Deviation].Deviation Deviation		     
			INNER JOIN [Deviation].Category Category ON Category.CategoryId = Deviation.CategoryId 
			LEFT JOIN dbo.tblEmployee Person ON Person.iEmployeeId = Deviation.ContactPersonId
			LEFT JOIN dbo.tblDepartment Department ON Department.iDepartmentId = Deviation.HandledByDepartment
			WHERE Deviation.DueDate IS NOT NULL AND Category.IsDeleted = 0 AND Deviation.IsDeleted = 0'
SET @sql = @sqlSelectClause + @sql
DECLARE @AppendClause VARCHAR(10)
SET @AppendClause = ' AND '
IF (EXISTS(SELECT * FROM @CategoryIds))
BEGIN 
	SET @Sql = @Sql + @AppendClause + '( Deviation.CategoryId IN (SELECT Id FROM @CategoryIdTable))'
END
IF  (@DeviationState <> 0)
BEGIN
	SET @sql = @sql +  @AppendClause + '(Deviation.State = ' + CAST(@DeviationState AS VARCHAR(100)) + ')'
END
IF (@CategoryType  IS NOT NULL)
BEGIN 
	SET @Sql = @Sql + @AppendClause + '(CategoryType = ' + CAST(@CategoryType AS VARCHAR(100)) + ')'
END
IF  (@Priority IS NOT NULL)
BEGIN
	SET @sql = @sql +  @AppendClause + '(Deviation.Priority = ' + CAST(@Priority AS VARCHAR(100)) + ')'
END
IF (@RegisteredByDepartment <> -1)
BEGIN 
	IF (@IncludeSubDepartment = 0)
	BEGIN
		SET @Sql = @Sql + @AppendClause + ' (Deviation.RegisteredByDepartment = ' + CAST(@RegisteredByDepartment AS VARCHAR(100)) + ')'
	END
	ELSE
	BEGIN
		SET @SqlIncludeSubDepartment = 'DECLARE @DepartmentTable AS TABLE(DepartmentId INT) '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'INSERT INTO @DepartmentTable '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'SELECT iDepartmentId from [dbo].[m136_GetDepartmentsRecursive](' + CAST(@RegisteredByDepartment AS VARCHAR(100)) +') '
		SET @Sql = @Sql + @AppendClause + ' (Deviation.RegisteredByDepartment IN (SELECT DepartmentId FROM @DepartmentTable))'
	END
END
IF (@HandledByDepartment <> -1)
BEGIN 
	IF (@IncludeSubDepartment = 0)
	BEGIN
		SET @Sql = @Sql + @AppendClause + ' (Deviation.HandledByDepartment = ' + CAST(@HandledByDepartment AS VARCHAR(100)) + ')'
	END
	ELSE
	BEGIN
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'DECLARE @DepartmentTable1 AS TABLE(DepartmentId INT) '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'INSERT INTO @DepartmentTable1 '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'SELECT iDepartmentId from [dbo].[m136_GetDepartmentsRecursive](' + CAST(@HandledByDepartment AS VARCHAR(100)) +') '
		SET @Sql = @Sql + @AppendClause + ' (Deviation.HandledByDepartment IN (SELECT DepartmentId FROM @DepartmentTable1))'
	END
END
IF (@ReportType = '5')
	BEGIN
		IF (@FromDate <> ''  AND @FromDate IS NOT NULL)
		BEGIN 
			SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.RegisterDate,102) >= ''' + CONVERT(VARCHAR(10),CAST(@FromDate AS DATETIME),102) + ''')'
		END
		IF (@ToDate <> ''  AND @ToDate IS NOT NULL)
		BEGIN 
			SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.RegisterDate,102) <= ''' + CONVERT(VARCHAR(10),CAST(@ToDate AS DATETIME),102) + ''')'
		END
	END
ELSE
	BEGIN
		IF (@FromDate <> ''  AND @FromDate IS NOT NULL)
		BEGIN 
			SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.DueDate,102) >= ''' + CONVERT(VARCHAR(10),CAST(@FromDate AS DATETIME),102) + ''')'
		END
		IF (@ToDate <> ''  AND @ToDate IS NOT NULL)
		BEGIN 
			SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.DueDate,102) <= ''' + CONVERT(VARCHAR(10),CAST(@ToDate AS DATETIME),102) + ''')'
		END
	END
SELECT @Sql = @Sql + ' ORDER BY Depth,ParentCategoryId,Category.CategoryId, DueDate'
IF (@SqlIncludeSubDepartment <> '')
	BEGIN 
		SET @Sql = @SqlIncludeSubDepartment + @Sql
	END
SET @CategoryIdTable = N'@CategoryIdTable AS Deviation.IdsTable READONLY'
EXEC sp_executesql @sql, @CategoryIdTable , @CategoryIdTable = @CategoryIds
END
GO
/****** Object:  StoredProcedure [Deviation].[CategoryWiseLoadActions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[CategoryWiseLoadActions]
(
	@CategoryIds AS Deviation.IdsTable READONLY,
	@DeviationState INT = 0,
	@CategoryType INT = NULL,
	@Priority INT = null,
	@FromDate DATETIME = null,
	@ToDate DATETIME = null,
	@RegisteredByDepartment INT = -1,
	@HandledByDepartment INT = -1,
	@IncludeSubDepartment BIT = 0
)	
AS
SET NOCOUNT ON  
BEGIN
DECLARE @Sql NVARCHAR(max)       
DECLARE @SqlIncludeSubDepartment NVARCHAR(max) = ''         
DECLARE @SqlSelectClause NVARCHAR(max) 
DECLARE @CategoryIdTable NVARCHAR(500); 
SET @SqlSelectClause = 'SELECT DISTINCT Deviation.DeviationId,
										CONVERT(VARCHAR(10),Action.DueDate,102) AS DueDate,
										CONVERT(VARCHAR(10),Action.DueDate,104) AS DueDateDisplay,
										Deviation.Priority AS PriorityValue,
										Category.CategoryType AS CategoryType,
										Category.ParentCategoryId AS ParentCategoryId,
										Category.CategoryId,
										Category.Name As CategoryName,
										Depth, BaseActionId, ActionType,
										CASE WHEN ActionType = 1 THEN ''Oppgave''
											 WHEN ActionType = 2 THEN ''Korrigerende''
											 WHEN ActionType = 4 THEN ''Forebyggende''							
											 END AS ActionName ' 
SET @Sql = 'FROM [Deviation].Deviation Deviation
			INNER JOIN [Deviation].Category Category ON Category.CategoryId = Deviation.CategoryId 
			INNER JOIN [Deviation].BaseAction Action ON Action.DeviationId = Deviation.DeviationId
			WHERE Deviation.DueDate IS NOT NULL AND Deviation.IsDeleted = 0'
SET @sql = @sqlSelectClause + @sql
DECLARE @AppendClause varchar(10)
SET @AppendClause = ' AND '
IF (EXISTS(SELECT * FROM @CategoryIds))
BEGIN 
	SET @Sql = @Sql + @AppendClause + '( Deviation.CategoryId IN (SELECT Id FROM @CategoryIdTable))'
END
IF  (@DeviationState <> 0)
BEGIN
	SET @sql = @sql +  @AppendClause + '(Deviation.State = ' + CAST(@DeviationState AS VARCHAR(100)) + ')'
END
IF (@CategoryType  IS NOT NULL)
BEGIN 
	SET @Sql = @Sql + @AppendClause + '(CategoryType = ' + CAST(@CategoryType AS VARCHAR(100)) + ')'
END
IF  (@Priority IS NOT NULL)
BEGIN
	SET @sql = @sql +  @AppendClause + '(Deviation.Priority = ' + CAST(@Priority AS VARCHAR(100)) + ')'
END
IF (@RegisteredByDepartment <> -1)
BEGIN 
	IF (@IncludeSubDepartment = 0)
	BEGIN
		SET @Sql = @Sql + @AppendClause + ' (Deviation.RegisteredByDepartment = ' + CAST(@RegisteredByDepartment AS VARCHAR(100)) + ')'
	END
	ELSE
	BEGIN
		SET @SqlIncludeSubDepartment = 'DECLARE @DepartmentTable AS TABLE(DepartmentId INT) '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'INSERT INTO @DepartmentTable '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'SELECT iDepartmentId from [dbo].[m136_GetDepartmentsRecursive](' + CAST(@RegisteredByDepartment AS VARCHAR(100)) +') '
		SET @Sql = @Sql + @AppendClause + ' (Deviation.RegisteredByDepartment IN (SELECT DepartmentId FROM @DepartmentTable))'
	END
END
IF (@HandledByDepartment <> -1)
BEGIN 
	IF (@IncludeSubDepartment = 0)
	BEGIN
		SET @Sql = @Sql + @AppendClause + ' (Deviation.HandledByDepartment = ' + CAST(@HandledByDepartment AS VARCHAR(100)) + ')'
	END
	ELSE
	BEGIN
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'DECLARE @DepartmentTable1 AS TABLE(DepartmentId INT) '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'INSERT INTO @DepartmentTable1 '
		SET @SqlIncludeSubDepartment = @SqlIncludeSubDepartment + 'SELECT iDepartmentId from [dbo].[m136_GetDepartmentsRecursive](' + CAST(@HandledByDepartment AS VARCHAR(100)) +') '
		SET @Sql = @Sql + @AppendClause + ' (Deviation.HandledByDepartment IN (SELECT DepartmentId FROM @DepartmentTable1))'
	END
END
IF (@FromDate <> ''  AND @FromDate IS NOT NULL)
BEGIN 
	SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.DueDate,102) >= ''' + CONVERT(VARCHAR(10),CAST(@FromDate AS DATETIME),102) + ''')'
END
IF (@ToDate <> ''  AND @ToDate IS NOT NULL)
BEGIN 
	SET @Sql = @Sql + @AppendClause + ' (CONVERT(varchar(10),Deviation.DueDate,102) <= ''' + CONVERT(VARCHAR(10),CAST(@ToDate AS DATETIME),102) + ''')'
END
SET @Sql = @Sql + ' ORDER BY Depth,Category.CategoryId, ActionType, DueDate'
IF (@SqlIncludeSubDepartment <> '')
BEGIN 
	SET @Sql = @SqlIncludeSubDepartment + @Sql
END
SET @CategoryIdTable = N'@CategoryIdTable AS Deviation.IdsTable READONLY'
EXEC sp_executesql @sql, @CategoryIdTable , @CategoryIdTable = @CategoryIds
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_UpdateNews]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_UpdateNews]
    @InfoId INT,
    @Title VARCHAR(300),
    @Ingress VARCHAR(800),
    @Body TEXT,
    @Publish DATETIME,
    @Expire DATETIME,
    @AlterId INT,
    @Draft INT
AS
BEGIN
    UPDATE
        m123_tblInfo
    SET
        strTitle = @Title,
        strIngress = @Ingress,
        strBody = @Body,
        dtmChanged = GETDATE(),
        dtmPublish = @Publish,
        dtmExpire = @Expire,
        iAlterId = @AlterId,
        iDraft = @Draft
    WHERE
        iInfoId = @InfoId
END
GO
/****** Object:  StoredProcedure [Risk].[GetRiskAreas]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[GetRiskAreas] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT * FROM Risk.Areas a
    WHERE (a.Id = @Id OR @Id IS NULL)
    AND (a.iDeleted = 0);
END
GO
/****** Object:  Table [dbo].[tblPermissionSet]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPermissionSet](
	[iPermissionSetId] [int] NOT NULL,
	[iPermissionSetTypeId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
 CONSTRAINT [PK__tblPermissionSet_iPermissionSetId] PRIMARY KEY CLUSTERED 
(
	[iPermissionSetId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [Deviation].[RemoveCategoryImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[RemoveCategoryImage]
	@CategoryId INT
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.Category
	SET Icon = NULL
	WHERE CategoryId = @CategoryId
END
GO
/****** Object:  StoredProcedure [Deviation].[GetAttachmentsByFilter]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: MAR 08, 2015
-- Description:	Get deviation attachments
-- =============================================
CREATE PROCEDURE [Deviation].[GetAttachmentsByFilter]
    @Text NVARCHAR(500),
    @UserId INT,
    @Type INT
AS
BEGIN
	SELECT
		da.DeviationAttachmentId, 
		da.DeviationId, 
		da.Title, 
		da.[Description], 
		da.Size, 
		da.ContentType, 
		da.Extension, 
		da.Content, 
		da.IsDeleted,
		da.Removable
	FROM 
		Deviation.DeviationAttachment da
		INNER JOIN Deviation.Deviation d ON d.DeviationId = da.DeviationId
	WHERE
		(@Text IS NULL OR d.Title LIKE '%' + @Text + '%')
	AND
		(@Type IS NULL OR d.[Type] = @Type)
	AND
		(@UserId IS NULL OR d.RegisteredByUser = @UserId)
	AND
		d.IsDeleted = 0
END
GO
/****** Object:  Table [dbo].[tblMenu]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblMenu](
	[iItemId] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[iItemParentId] [int] NOT NULL,
	[iMin] [int] NOT NULL,
	[iMax] [int] NOT NULL,
	[iLevel] [int] NOT NULL,
	[iInformationTypeId] [int] NOT NULL,
	[strName] [varchar](50) NOT NULL,
	[strDescription] [varchar](255) NOT NULL,
	[iSort] [int] NOT NULL,
	[strURL] [varchar](300) NOT NULL,
	[bNewWindow] [smallint] NOT NULL,
	[iChildCount] [int] NOT NULL,
	[dtmDisplay] [datetime] NULL,
	[dtmRemove] [datetime] NULL,
	[iPictureId] [int] NOT NULL,
	[iPictureActiveId] [int] NOT NULL,
	[iPictureSelectedId] [int] NOT NULL,
 CONSTRAINT [PK__tblMenu_iItemId] PRIMARY KEY CLUSTERED 
(
	[iItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMenuGroups]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetMenuGroups] 
    @UserId INT,
    @MenuId INT
AS
BEGIN
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @CurrentDate DATETIME = GETDATE();
	SELECT iItemId INTO #Groups FROM tblMenu WHERE iItemParentId = @MenuId;
    WITH Children AS
	(
			SELECT 
				iItemId, 
				iItemParentId, 
				strName, 
				strDescription,
				iLevel, 
				strURL, 
				dtmDisplay,
				dtmRemove,
				bNewWindow,
				iSort
			FROM 
				[dbo].[tblMenu] 
			WHERE
				iItemId IN (SELECT iItemId FROM #Groups) AND
				dbo.fnSecurityGetPermission(99, 99, @UserId, iItemId) & 1 = 1
		UNION ALL
			SELECT 
				m.iItemId, 
				m.iItemParentId, 
				m.strName, 
				m.strDescription,
				m.iLevel, 
				m.strURL, 
				m.dtmDisplay,
				m.dtmRemove,
				m.bNewWindow,
				m.iSort
			FROM 
				[dbo].[tblMenu] m
                    INNER JOIN Children 
                        ON	m.iItemParentId = Children.iItemId 
            WHERE
                dbo.fnSecurityGetPermission(99, 99, @UserId, m.iItemId) & 1 = 1
	)
	SELECT 
		iItemId, iItemParentId, strName, strDescription, iLevel, strURL, dtmDisplay, dtmRemove, bNewWindow, iSort
	FROM 
		Children
	WHERE @CurrentDate BETWEEN dtmDisplay AND dtmRemove 
			OR (dtmRemove IS NULL AND dtmDisplay IS NULL)
			OR (@CurrentDate> dtmDisplay AND dtmRemove IS NULL)
			OR (dtmDisplay IS NULL AND @CurrentDate < dtmRemove)
	ORDER BY iSort, strName;
	DROP TABLE #Groups;
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateCustomFieldAndItOption]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateCustomFieldAndItOption]
	@CategoryCustomFieldId INT,
	@CategoryId INT,
	@Description NVARCHAR(MAX),
	@IsMandatory BIT,
	@MessageText NVARCHAR(MAX),
	@Name NVARCHAR(500),
	@Type INT,
	@Url NVARCHAR(600),
	@VisibleOnRegistration BIT,
	@CustomFieldOptions AS [Deviation].[CustomFieldOptionTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.CategoryCustomField
	SET CategoryId = @CategoryId, [Description] = @Description, IsMandatory = @IsMandatory, MessageText = @MessageText,
	Name = @Name, [Type] = @Type, URL = @Url, VisibleOnRegistration = @VisibleOnRegistration
	WHERE CategoryCustomFieldId = @CategoryCustomFieldId
	UPDATE Deviation.CategoryCustomFieldOptions
	SET Deviation.CategoryCustomFieldOptions.Name = cfo.Name, Deviation.CategoryCustomFieldOptions.[Description] = cfo.[Description]
	FROM @CustomFieldOptions cfo
	WHERE cfo.OptionId = Deviation.CategoryCustomFieldOptions.OptionId
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationRelatedDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationRelatedDocuments]
	@PageIndex INT,
	@PageSize INT,
	@IsLoadMore BIT,
	@DeviationId INT
AS
SET NOCOUNT ON
BEGIN
	WITH documents AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY dd.DeviationId DESC),
			dd.*,
			do.strName AS DocumentTitle, do.iVersion AS Version, do.iDocumentTypeId
		FROM Deviation.DeviationDocument dd
		LEFT JOIN m136_tblDocument do ON do.iEntityId = dd.DocumentEntityId
		WHERE dd.DeviationId = @DeviationId AND dd.IsDeleted = 0
	)
	SELECT *
	FROM documents
	WHERE (@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT COUNT(*) AS Total
			FROM Deviation.DeviationDocument
			WHERE DeviationId = @DeviationId AND IsDeleted = 0
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [Deviation].[AddFileAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddFileAttachment]
	@DeviationId INT,
    @Title NVARCHAR(400),
	@Description NVARCHAR(MAX),
	@Size INT,
	@ContentType VARCHAR(400),
	@Extension VARCHAR(4),
	@Content IMAGE,
	@Removable BIT
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(DeviationAttachmentId),0) FROM Deviation.DeviationAttachment;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO Deviation.DeviationAttachment(DeviationId, Title, [Description], Size, ContentType, Extension, Content, Removable) 
    VALUES (@DeviationId, @Title, @Description, @Size, @ContentType, @Extension, @Content, @Removable);
    UPDATE Deviation.Deviation
    SET 
        UpdatedDate = GETDATE()
    WHERE DeviationId = @DeviationId;
	SELECT @newId;
END
GO
/****** Object:  StoredProcedure [Deviation].[AddCustomFieldOption]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddCustomFieldOption]
	@CustomFieldOptiosTable AS [Deviation].[CustomFieldOptionTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	INSERT INTO Deviation.CategoryCustomFieldOptions(CategoryId, CategoryCustomFieldId, Name, [Description], Deleted)
	SELECT CategoryId, CategoryCustomFieldId, Name, [Description], 0 FROM @CustomFieldOptiosTable
END
GO
/****** Object:  StoredProcedure [Deviation].[AddCustomField]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddCustomField]
	@CategoryId INT,
	@CreatedByUserIdentityId INT,
	@Description NVARCHAR(MAX),
	@IsMandatory BIT,
	@MessageText NVARCHAR(MAX),
	@Name NVARCHAR(500),
	@Type INT,
	@Url NVARCHAR(600),
	@VisibleOnRegistration BIT,
	@CreatedDate DATETIME
AS
SET NOCOUNT ON
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxID INT = 0;
	SELECT @iMaxID = ISNULL(MAX(CategoryCustomFieldId),0) FROM Deviation.CategoryCustomField;
	DECLARE @newId INT = @iMaxID + 1;
	INSERT INTO Deviation.CategoryCustomField(
		CategoryId, CreatedByUserIdentityId, [Description], IsMandatory, MessageText, Name, [Type],
		URL, VisibleOnRegistration, CreatedDate, Deleted)
    VALUES(
		@CategoryId, @CreatedByUserIdentityId, @Description, @IsMandatory, @MessageText, @Name, @Type,
		@Url, @VisibleOnRegistration, @CreatedDate, 0);
	SELECT @newId;
END
GO
/****** Object:  StoredProcedure [Deviation].[AddCategoryImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[AddCategoryImage]
	@CategoryId INT,
	@Content IMAGE
AS
SET NOCOUNT ON
BEGIN
	UPDATE Deviation.Category
	SET Icon = @Content
	WHERE CategoryId = @CategoryId
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllEditorTemplates]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllEditorTemplates]
AS
BEGIN
	SELECT
        Id, Title, Description, Html, ImageId
    FROM
        EditorTemplate
    WHERE
        Deleted = 0
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMetadataGroups]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: Feb 03, 2015
-- Description:	Create stored procedure for getting metadata-group.
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetMetadataGroups]
(
	@iHandbookId INT
) AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT
		DISTINCT rel.iRegisterItemId,
		regitem.strName AS strTagName,
		reg.strName AS strRegisterName
	FROM m147_relRegisterItemItem rel
		LEFT OUTER JOIN m147_tblRegisterItem regitem ON rel.iRegisterItemId = regitem.iRegisterItemId
		LEFT OUTER JOIN m147_tblRegister reg ON regitem.iRegisterId = reg.iRegisterId
	WHERE
		rel.iModuleId = 136
		AND rel.iRegisterItemId > 0
		AND iItemId IN (SELECT iDocumentId FROM m136_tbldocument d WHERE iHandbookid = @iHandbookId AND d.iDeleted = 0)
	ORDER BY
		strRegisterName ASC,
		strTagName ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFileContents]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFileContents]
	@ItemId INT
AS
BEGIN
	SELECT strFilename,
		   strContentType,
		   imgContent
	FROM [dbo].m136_tblBlob 
	WHERE iItemId = @ItemId
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnPersonHandbookConfirmPercentage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE      FUNCTION [dbo].[m136_fnPersonHandbookConfirmPercentage] (
	@iEmployeeId int,
	@iHandbookId int =0,
	@fromDate datetime = null,
	@toDate dateTime = null)  
RETURNS float AS  
BEGIN
declare @retVal float
declare @allDocs float
declare @allVirtulDocs float
declare @allRealDocs float
set @allRealDocs =  (SELECT count (distinct iDocumentId) 
		FROM
			m136_tblDocument doc
		WHERE
			doc.iHandbookId=@iHandbookId
			AND doc.iDeleted=0
			AND doc.iApproved = 1
			AND doc.iVersion=( 
				SELECT 
					MAX(iVersion) 
				FROM 
					m136_tblDocument
				WHERE 
					m136_tblDocument.iDocumentId=doc.iDocumentId 
					AND m136_tblDocument.iDeleted=0 
					AND m136_tblDocument.iDraft=0 
					AND m136_tblDocument.iApproved in(1 ,4)
			)
		)  		
set @allVirtulDocs = (SELECT count (distinct doc.iDocumentId) 
FROM
	m136_relVirtualRelation virt
	left join m136_tblDocument doc on doc.iDocumentId=virt.iDocumentId
	where virt.iHandbookId = @iHandbookId and doc.iLatestApproved = 1)
set @allDocs = sum(@allRealDocs + @allVirtulDocs)
			--AND Security TODO
declare @confirmed float
declare @confirmedReal float
declare @confirmedVirtual float
set @confirmedReal  = (SELECT COUNT(distinct doc.iDocumentId) FROM m136_tblConfirmRead cr 
	inner join m136_tblDocument doc on cr.iEntityId=doc.iEntityId
WHERE
	cr.iEmployeeId=@iEmployeeId
	AND (doc.iHandbookId=@iHandbookId OR @iHandbookId=0)
	AND (cr.dtmConfirm>@fromDate OR @fromDate is null)
	AND (cr.dtmConfirm<@toDate OR @toDate is null)
	AND doc.iDeleted=0
	AND doc.iApproved=1
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in(1 ,4)
	)
)
set @confirmedVirtual  = (SELECT COUNT(distinct doc.iDocumentId) FROM m136_tblConfirmRead cr 
	inner join m136_tblDocument doc on cr.iEntityId=doc.iEntityId
	inner join m136_relVirtualRelation virt on doc.iDocumentId=virt.iDocumentId
WHERE
	virt.iHandbookId = @iHandbookId
	AND cr.iEmployeeId=@iEmployeeId
	AND (cr.dtmConfirm>@fromDate OR @fromDate is null)
	AND (cr.dtmConfirm<@toDate OR @toDate is null)
	AND doc.iDeleted=0
	AND doc.iApproved=1
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in(1 ,4)
	)
)
set @confirmed = sum(@confirmedReal + @confirmedVirtual)
if @alldocs >0
	set @retVal = @confirmed/@alldocs
else
	set @retVal = 0
return @retVal*100
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateNewsReadCount]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: OCT 22, 2015
-- Description:	update read count for New
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateNewsReadCount]
	@iInfoId INT
AS
SET NOCOUNT ON
BEGIN
	UPDATE dbo.m123_tblInfo
	SET iReadCount = iReadCount + 1
	WHERE iInfoId = @iInfoId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetAttachmentsForDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetAttachmentsForDocuments]
	@DocumentIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @EntityIds TABLE(Id INT);
    INSERT INTO @EntityIds (Id)
    SELECT iEntityId
    FROM m136_tblDocument
    WHERE iDocumentId IN (SELECT Id FROM @DocumentIds) AND iLatestApproved = 1
    SELECT (SELECT iDocumentId FROM m136_tblDocument WHERE iEntityId = r.iEntityId) AS iDocumentId,
        r.iItemId,
		b.strName,
		r.iPlacementId,
		r.iProcessrelationTypeId,
		b.strExtension,
		b.strDescription,
		r.iSort 
	FROM m136_relInfo r 
		JOIN m136_tblBlob b ON r.iItemId = b.iItemId
	WHERE r.iEntityId IN (SELECT Id FROM @EntityIds)
		  AND r.iRelationTypeId = 20
	ORDER BY r.iSort, b.strName;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetRecentDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m136_GetRecentDocuments]
 -- Add the parameters for the stored procedure here
 @iSecurityId int,
 @iItemCount int
AS
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
 SET NOCOUNT ON;
	SELECT TOP (@iItemCount) 
				d.iDocumentId, 
				doc.iHandbookId, 
				doc.strName, 
				doc.iDocumentTypeId
	FROM		m136_tblDocAccessLog AS d 
		INNER JOIN m136_tblDocument doc 
			ON d.iDocumentId = doc.iDocumentId
	WHERE		d.iSecurityId = @iSecurityId 
		AND (doc.iLatestApproved = 1)
	ORDER BY	d.dtmAccessed DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetPDAFieldForDocumentType]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Gets PDA Field For Document Type 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetPDAFieldForDocumentType] 
	-- Add the parameters for the stored procedure here
	@iDocTypeId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @rowCount int = 0;
	select @rowCount = count(*) FROM         m136_relDocumentTypeInfo INNER JOIN
							  m136_tblDocumentType ON m136_relDocumentTypeInfo.iDocumentTypeId = m136_tblDocumentType.iDocumentTypeId
		WHERE     (m136_tblDocumentType.iDocumentTypeId = @iDocTypeId) AND (m136_relDocumentTypeInfo.iShowOnPDA = 1)
	
	IF @rowCount = 1
	    SELECT	m136_relDocumentTypeInfo.iSort-1 AS FieldNumber
		FROM    m136_relDocumentTypeInfo INNER JOIN
				m136_tblDocumentType ON m136_relDocumentTypeInfo.iDocumentTypeId = m136_tblDocumentType.iDocumentTypeId
		WHERE   
			m136_tblDocumentType.iDocumentTypeId = @iDocTypeId
			AND (m136_relDocumentTypeInfo.iShowOnPDA = 1) 	
    ELSE    
        select -1
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_GetParentIdsInTbl]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  function [dbo].[m136_GetParentIdsInTbl]
(
@iChapterId INT
)
RETURNS @retTable TABLE(iHandbookId INT NOT NULL)
AS
BEGIN
	DECLARE @iParentId INT;
	SELECT @iParentId = ISNULL(iParentHandbookId,0) FROM dbo.m136_tblHandbook WHERE iHandbookId = @iChapterId
	IF (@iParentId <> 0 AND @iParentId IS NOT NULL)
	BEGIN
		INSERT INTO @retTable VALUES(@iParentId);
		INSERT INTO @retTable SELECT iHandbookId FROM dbo.m136_GetParentIdsInTbl(@iParentId);
	END
	RETURN;
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_GetRegisterRegisterItemForDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_be_GetRegisterRegisterItemForDocument]
    @UserId INT,
    @DocumentId INT
AS
BEGIN
    DECLARE @HandbookId INT;
    SET @HandbookId = (SELECT TOP 1 iHandbookId FROM m136_tblDocument WHERE iDocumentId = @DocumentId);
    SELECT
        r.strName + ' - ' + ri.strName AS strRegisterRegisterName,
        r.iRegisterId,
        ric.iRegisterItemId
    FROM
        m147_relRegisterItemCategory ric
            INNER JOIN m147_tblRegisterItem ri ON ric.iRegisterItemId = ri.iRegisterItemId
            INNER JOIN m147_tblRegister r ON ri.iRegisterId = r.iRegisterId
    WHERE
        ric.iModuleId = 136
        AND ric.iInheritTypeId IN (1, 2, 3, 5)
        AND ric.iCategoryId IN (SELECT iHandbookId
                                FROM dbo.m136_GetParentidsInTbl(@HandbookId))
        AND dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) & 0x01 = 0x01
    UNION
    SELECT
        r.strName + ' - ' + ri.strname,
        r.iRegisterId,
        ric.iRegisterItemId
    FROM
        m147_relRegisterItemCategory ric
            INNER JOIN m147_tblRegisterItem ri ON ric.iRegisterItemId = ri.iRegisterItemId
            INNER JOIN m147_tblRegister r ON ri.iRegisterId = r.iRegisterId
    WHERE
        iModuleId = 136
        AND iCategoryId = @HandbookId
        AND ric.iInheritTypeId IN (1, 2, 3, 5)
        AND dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) & 0x01 = 0x01
END
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocProcessGroup]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[m136_ListDocProcessGroup]
(
	@iSecurityId int,
	@iHandbookId int,
	@includeSup int = 0,
	@debug int = 0
) AS
BEGIN
--Booktable
declare @bookTbl table(iHandbookId int not null, strName varchar(400) not null, iDepartmentId int not null, iLevelType int not null)
insert into @bookTbl
select
	iHandbookId,
	strName,
	iDepartmentId,
	iLevelType
from
	m136_tblHandbook h
where 
	h.iHandbookId=@iHandbookId
	OR ((h.iHandbookId in (select iHandbookId from dbo.m136_GetParentIdsInTbl(@iHandbookId)) or h.iLevelType=1)
	AND @includeSup=1
	)
	AND iDeleted = 0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1
--DocTable
declare @docTbl table(
	iDocumentTypeId int not null,
	strDocTypeName varchar(200) null,
	strIcon varchar(30) null,
	iVirtual int not null,
	iEntityId int not null,
	iDocumentId int not null,
	iVersion int not null,
	strName varchar(200) null,
	dtmPublishUntil datetime not null,
	dtmApproved datetime not null,
	strDescription varchar(2000) null,
	strChapterName varchar(200) null,
	iHandbookId int not null,
	iDepartmentId int not null,
	iLevelType int not null,
	iSort int not null
)
insert into @docTbl
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	dt.strIcon as strIcon,
	0 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	join @bookTbl h on d.iHandbookId=h.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1
union
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	dt.strIcon as strIcon,
	1 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	inner join m136_relVirtualRelation v on v.iDocumentId=d.iDocumentId
	inner join @bookTbl h on h.iHandbookId=v.iHandbookId
	inner join m136_tblHandbook hhome on hhome.iHandbookId=d.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1


--relTable
declare @relTbl table(iDocumentId int null, iEntityId int null, strName varchar(200) null, iRelItemId int null)
--Proctable
declare @procsTbl table(iDocumentId int null, iEntityId int null, strName varchar(200) null)

-- Check if any document
declare @docCount int
select @docCount=count(iEntityId) from @docTbl

if @docCount>0
	begin
	insert into @relTbl values(null, null, 'Ikke tilknyttet prosess', null)
	insert into @relTbl
	SELECT 
		procs.iDocumentId,
		procs.iEntityId,
		procs.strName,
		rel.iItemId
	FROM
		m136_relInfo rel
	--	left outer join @docTbl doc on doc.iEntityId=rel.iItemId where iRelationType=136
		left outer join m136_tblDocument procs on procs.iEntityId=rel.iEntityId
		left outer join m136_tblDocumentType doctype on procs.iDocumentTypeId=docType.iDocumentTypeId
	where
		rel.iRelationTypeId = 136
		and rel.iItemId in (select iDocumentId from @docTbl)
		and	procs.iDeleted = 0
		and docType.bIsProcess = 1 
		and procs.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = procs.iDocumentId and dd.iDeleted = 0
			and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
			and dd.iDraft = 0)
		and procs.iApproved=1
		and (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, procs.iHandbookId)&1)=1

	--Process table
	insert into @procsTbl
	select distinct iDocumentId, iEntityId, strName from @relTbl

END

if @debug=1
begin
	SELECT * FROM @relTbl
	SELECT * FROM @procsTbl
	select * FROM @docTbl
--	select * FROM @docTbl doc left outer join @relTbl rel on doc.iEntityId=rel.iRelItemId
end
-- xmlstuff
select
	1 as tag,
	null as parent,
	procs.iDocumentId as [proc!1!iDocumentId],
	procs.iEntityId as [proc!1!iEntityId],
	procs.strName as [proc!1!strName],
	null as [doc!2!strDocTypeName],
	null as [doc!2!iVirtual],
	null as [doc!2!iDocumentId],
	null as [doc!2!iVersion],
	null as [doc!2!strDocName],
	null as [doc!2!dtmExpire],
	null as [doc!2!dtmApproved],
	null as [doc!2!strDescription],
	null as [doc!2!strChapterName],
	null as [doc!2!iHandbookId],
	null as [doc!2!dep],
	null as [doc!2!iLevelType],
	null as [doc!2!iSort]
from
	@procsTbl procs
union all
select
	2 as tag,
	1 as parent,
	
	procs.iDocumentId,
	null,
	null,
	doc.strDocTypeName as [doc!2!strDocTypeName],
	doc.iVirtual as [doc!2!iVirtual],
	doc.iDocumentId as [doc!2!iDocumentId],
	doc.iVersion as [doc!2!iVersion],
	doc.strName as [doc!2!strDocName],
	doc.dtmPublishUntil as [doc!2!dtmExpire],
	doc.dtmApproved as [doc!2!dtmApproved],
	doc.strDescription as [doc!2!strDescription],
	doc.strChapterName as [doc!2!strChapterName],
	doc.iHandbookId as [doc!2!iHandbookId],
	doc.iDepartmentId as [doc!2!dep],
	doc.iLevelType  as [doc!2!iLevelType],
	doc.iSort as [doc!2!iSort]
from
	@doctbl doc
	left outer join @relTbl procs on procs.iRelItemId=doc.iDocumentId
--	inner join @procsTbl procs on procs.iEntityId=rel.iEntityId
order by [proc!1!iDocumentId], [doc!2!strDocName]
for xml explicit

END
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocAttachmentTimeValid]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[m136_ListDocAttachmentTimeValid]
(
	@iSecurityId int,
	@iHandbookId int,
	@iDayLimit int,
	@includeSup int = 0
) AS

--Booktable
declare @bookTbl table(iHandbookId int not null, strName varchar(400) not null, iDepartmentId int not null, iLevelType int not null)
insert into @bookTbl
select
	iHandbookId,
	strName,
	iDepartmentId,
	iLevelType
from
	m136_tblHandbook h
where 
	h.iHandbookId=@iHandbookId
	OR ((h.iHandbookId in (select iHandbookId from dbo.m136_GetParentIdsInTbl(@iHandbookId)) or h.iLevelType=1)
	AND @includeSup=1
	)
	AND iDeleted = 0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1
--DocTable
declare @docTbl table(
	iDocumentTypeId int not null,
	strDocTypeName varchar(200) null,
	iVirtual int not null,
	iEntityId int not null,
	iDocumentId int not null,
	iVersion int not null,
	strName varchar(200) null,
	dtmPublishUntil datetime not null,
	dtmApproved datetime not null,
	strDescription varchar(2000) null,
	strChapterName varchar(200) null,
	iHandbookId int not null,
	iDepartmentId int not null,
	iLevelType int not null,
	iSort int not null,
	iDayLimit int null
)
insert into @docTbl
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	0 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort,
	dbo.m136_fnExpireStatus(dtmPublishUntil, getdate(), @iDayLimit)
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	join @bookTbl h on d.iHandbookId=h.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1
union
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	1 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort,
	dbo.m136_fnExpireStatus(dtmPublishUntil, getdate(), @iDayLimit)
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	inner join m136_relVirtualRelation v on v.iDocumentId=d.iDocumentId
	inner join @bookTbl h on h.iHandbookId=v.iHandbookId
	inner join m136_tblHandbook hhome on hhome.iHandbookId=d.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1

--Attachmenttbl
declare @attbl table(iEntityId int not null, iItemId int not null, strName varchar(300) null, strFileType varchar(3) null)
insert into @attbl
SELECT 
	rel.iEntityId,
	rel.iItemId,
	fil.strName,
	right(strFileName, 3)
FROM
	m136_relInfo rel
	left outer join tblFile fil on rel.iItemId=fil.iItemId
where
	iEntityId in (select iEntityId from @docTbl)
	AND iRelationTypeId = 2
--SELECT * FROM @attbl
-- xml-stuff
select 1 as tag,
	null as parent,
	doc.iDayLimit as [t!1!expireId],
	null as [doc!2!iDocTypeId],
	null as [doc!2!strDocTypeName],
	null as [doc!2!iEntityId],
	null as [doc!2!iVirtual],
	null as [doc!2!iDocumentId],
	null as [doc!2!iVersion],
	null as [doc!2!strDocName],
	null as [doc!2!dtmExpire],
	null as [doc!2!dtmApproved],
	null as [doc!2!strDescription],
	null as [doc!2!strChapterName],
	null as [doc!2!iHandbookId],
	null as [doc!2!dep],
	null as [doc!2!iLevelType],
	null as [doc!2!iSort],
	null as [att!3!iItemId],
	null as [att!3!strName],
	null as [att!3!strFileType]
from
	@docTbl doc
union 

select
	2 as tag,
	1 as parent,
	doc.iDayLimit,
	doc.iDocumentTypeId,
	doc.strDocTypeName,
	doc.iEntityId,
	doc.iVirtual,
	doc.iDocumentId,
	doc.iVersion,
	doc.strName,
	doc.dtmPublishUntil,
	doc.dtmApproved,
	doc.strDescription,
	doc.strChapterName,
	doc.iHandbookId,
	doc.iDepartmentId,
	doc.iLevelType,
	doc.iSort,
	null,
	null,
	null
from
	@docTbl doc
union 
select
	3 as tag,
	2 as parent,
	
	doc.iDayLimit,
	null,
	null,
	doc.iEntityId,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	att.iItemId,
	att.strName,
	att.strFileType
from
	@doctbl doc
	inner join @attbl att on att.iEntityId=doc.iEntityId
order by [t!1!expireId], [doc!2!iEntityId], [att!3!strName]
for xml explicit
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocAttachmentDocType]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[m136_ListDocAttachmentDocType]
(
	@iSecurityId int,
	@iHandbookId int,
	@includeSup int = 0
) AS

--Booktable
declare @bookTbl table(iHandbookId int not null, strName varchar(400) not null, iDepartmentId int not null, iLevelType int not null)
insert into @bookTbl
select
	iHandbookId,
	strName,
	iDepartmentId,
	iLevelType
from
	m136_tblHandbook h
where 
	h.iHandbookId=@iHandbookId
	OR ((h.iHandbookId in (select iHandbookId from dbo.m136_GetParentIdsInTbl(@iHandbookId)) or h.iLevelType=1)
	AND @includeSup=1
	)
	AND iDeleted = 0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1
--DocTable
declare @docTbl table(
	iDocumentTypeId int not null,
	strDocTypeName varchar(200) null,
	strIcon varchar(30) null,
	iVirtual int not null,
	iEntityId int not null,
	iDocumentId int not null,
	iVersion int not null,
	strName varchar(200) null,
	dtmPublishUntil datetime not null,
	dtmApproved datetime not null,
	strDescription varchar(2000) null,
	strChapterName varchar(200) null,
	iHandbookId int not null,
	iDepartmentId int not null,
	iLevelType int not null,
	iSort int not null
)
insert into @docTbl
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	dt.strIcon as strIcon,
	0 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	join @bookTbl h on d.iHandbookId=h.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1
union
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	dt.strIcon as strIcon,
	1 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	inner join m136_relVirtualRelation v on v.iDocumentId=d.iDocumentId
	inner join @bookTbl h on h.iHandbookId=v.iHandbookId
	inner join m136_tblHandbook hhome on hhome.iHandbookId=d.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1

--Attachmenttbl
declare @attbl table(iEntityId int not null, iItemId int not null, strName varchar(300) null, strFileType varchar(3) null)
insert into @attbl
SELECT 
	rel.iEntityId,
	rel.iItemId,
	fil.strName,
	right(strFileName, 3)
FROM
	m136_relInfo rel
	left outer join tblFile fil on rel.iItemId=fil.iItemId
where
	iEntityId in (select iEntityId from @docTbl)
	AND iRelationTypeId = 2
--SELECT * FROM @attbl
-- xml-stuff
select 1 as tag,
	null as parent,
	doc.iDocumentTypeId as [dt!1!iDocTypeId],
	doc.strDocTypeName as [dt!1!strDocTypeName],
	doc.strIcon as [dt!1!strIcon],
	null as [doc!2!iEntityId],
	null as [doc!2!iVirtual],
	null as [doc!2!iDocumentId],
	null as [doc!2!iVersion],
	null as [doc!2!strDocName],
	null as [doc!2!dtmExpire],
	null as [doc!2!dtmApproved],
	null as [doc!2!strDescription],
	null as [doc!2!strChapterName],
	null as [doc!2!iHandbookId],
	null as [doc!2!dep],
	null as [doc!2!iLevelType],
	null as [doc!2!iSort],
	null as [att!3!iItemId],
	null as [att!3!strName],
	null as [att!3!strFileType]
from
	@docTbl doc
union 

select
	2 as tag,
	1 as parent,
	null,
	doc.strDocTypeName,
	null,
	doc.iEntityId,
	doc.iVirtual,
	doc.iDocumentId,
	doc.iVersion,
	doc.strName,
	doc.dtmPublishUntil,
	doc.dtmApproved,
	doc.strDescription,
	doc.strChapterName,
	doc.iHandbookId,
	doc.iDepartmentId,
	doc.iLevelType,
	doc.iSort,
	null,
	null,
	null
from
	@docTbl doc
union 
select
	3 as tag,
	2 as parent,
	
	null,
	doc.strDocTypeName,
	null,
	doc.iEntityId,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	att.iItemId,
	att.strName,
	att.strFileType
from
	@doctbl doc
	inner join @attbl att on att.iEntityId=doc.iEntityId
order by [dt!1!strDocTypeName], [doc!2!iEntityId], [att!3!strName]
for xml explicit
GO
/****** Object:  StoredProcedure [dbo].[m136_ListDocAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_ListDocAttachment]
(
	@iSecurityId int,
	@iHandbookId int,
	@includeSup int = 0
)
 AS

--Booktable
declare @bookTbl table(iHandbookId int not null, strName varchar(400) not null, iDepartmentId int not null, iLevelType int not null)
insert into @bookTbl
select
	iHandbookId,
	strName,
	iDepartmentId,
	iLevelType
from
	m136_tblHandbook h
where
	(
		h.iHandbookId=@iHandbookId
		or
		(
			(h.iHandbookId in (select iHandbookId from dbo.m136_GetParentIdsInTbl(@iHandbookId)) or h.iLevelType=1)
			AND @includeSup=1
		)
	)
	AND iDeleted = 0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)&1)=1

--DocTable
declare @docTbl table(
	iDocumentTypeId int not null,
	strDocTypeName varchar(200) null,
	iVirtual int not null,
	iEntityId int not null,
	iDocumentId int not null,
	iVersion int not null,
	strName varchar(200) null,
	dtmPublishUntil datetime not null,
	dtmApproved datetime not null,
	strDescription varchar(2000) null,
	strChapterName varchar(200) null,
	iHandbookId int not null,
	iDepartmentId int not null,
	iLevelType int not null,
	iSort int null
)


declare @tiDocumentTypeId int
declare @tstrDocTypeName nvarchar(100)
declare @tiVirtual int
declare @tiEntityId int
declare @tiDocumentId int
declare @tiVersion int 
declare @tstrName nvarchar(200)
declare @tdtmPublishUntil datetime
declare @tdtmApproved datetime
declare @tstrDescription nvarchar(4000)
declare @tstrChapterName nvarchar(200)
declare @tiHandbookId int
declare @tiDepartmentId int
declare @tiLevelType int


declare cur cursor forward_only
for
select 	iDocumentTypeId, strDocTypeName, iVirtual, iEntityId, iDocumentId,
	iVersion, strName,dtmPublishUntil, dtmApproved,strDescription, strChapterName,
	iHandbookId, iDepartmentId, iLevelType
from (
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	0 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	join @bookTbl h on d.iHandbookId=h.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1
union
select
	dt.iDocumentTypeId,
	dt.strName as strDocTypeName,
	1 as iVirtual,
	d.iEntityId,
	d.iDocumentId,
	d.iVersion,
	d.strName,
	d.dtmPublishUntil,
	d.dtmApproved,
	d.strDescription,
	h.strName as strChapterName,
	h.iHandbookId,
	h.iDepartmentId,
	h.iLevelType,
	d.iSort
from m136_tblDocument d
	join m136_tblDocumentType dt ON dt.iDocumentTypeId = d.iDocumentTypeId 
	inner join m136_relVirtualRelation v on v.iDocumentId=d.iDocumentId
	inner join @bookTbl h on h.iHandbookId=v.iHandbookId
	inner join m136_tblHandbook hhome on hhome.iHandbookId=d.iHandbookId
where 
	d.iDeleted = 0
	and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
		and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
		and dd.iDraft = 0)
	and d.iApproved=1
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, v.iHandbookId)&1)=1
) result
order by result.iSort, result.iHandbookId, result.strName

/* this would be much more elegant using identity(1,1) in @docTabl, but that work to good on 
	sql server 2000, so we have to it the hard way in order to get a correct sortorder		*/
declare @sort int
select @sort = 0
open cur
fetch next from cur into 
@tiDocumentTypeId, @tstrDocTypeName, @tiVirtual, @tiEntityId, @tiDocumentId, @tiVersion, @tstrName,
@tdtmPublishUntil, @tdtmApproved, @tstrDescription, @tstrChapterName, @tiHandbookId, @tiDepartmentId, @tiLevelType
while @@fetch_status=0
begin
	select @sort = @sort + 1
	insert into @docTbl(iDocumentTypeId, strDocTypeName, iVirtual, iEntityId, iDocumentId,
	iVersion, strName, dtmPublishUntil, dtmApproved, strDescription, strChapterName,
	iHandbookId, iDepartmentId, iLevelType, iSort)
		select @tiDocumentTypeId, @tstrDocTypeName, @tiVirtual, @tiEntityId, @tiDocumentId, @tiVersion, @tstrName,
@tdtmPublishUntil, @tdtmApproved, @tstrDescription, @tstrChapterName, @tiHandbookId, @tiDepartmentId, @tiLevelType, @sort

fetch next from cur into @tiDocumentTypeId, @tstrDocTypeName, @tiVirtual, @tiEntityId, @tiDocumentId, @tiVersion, @tstrName, @tdtmPublishUntil, @tdtmApproved, @tstrDescription, @tstrChapterName, @tiHandbookId, @tiDepartmentId, @tiLevelType
end
close cur
deallocate cur


--Attachmenttbl
declare @attbl table(iEntityId int not null, iItemId int not null, strName varchar(300) null, strFileType varchar(3) null, iSort int null)
insert into @attbl
SELECT 
	rel.iEntityId,
	rel.iItemId,
	fil.strName,
	right(strFileName, 3),
	rel.iSort
FROM
	m136_relInfo rel
	left outer join tblFile fil on rel.iItemId=fil.iItemId
where
	iEntityId in (select iEntityId from @docTbl)
	AND iRelationTypeId = 2
order by iSort


-- xml-stuff
select tag, parent, [doc!1!iEntityId], [doc!1!iDocTypeId], [doc!1!strDocTypeName], 
[doc!1!iVirtual], [doc!1!iDocumentId], [doc!1!iVersion], [doc!1!strDocName], [doc!1!dtmExpire],
	[doc!1!dtmApproved], [doc!1!strDescription], [doc!1!strChapterName], [doc!1!iHandbookId],
	[doc!1!dep], [doc!1!iLevelType], [doc!1!iSort],
	[att!2!iItemId], [att!2!strName], [att!2!strFileType],
	[att!2!iSort]
from (
select
	1 as tag,
	null as parent,
	
	doc.iEntityId as [doc!1!iEntityId],
	doc.iDocumentTypeId as [doc!1!iDocTypeId],
	doc.strDocTypeName as [doc!1!strDocTypeName],
	doc.iVirtual as [doc!1!iVirtual],
	doc.iDocumentId as [doc!1!iDocumentId],
	doc.iVersion as [doc!1!iVersion],
	doc.strName as [doc!1!strDocName],
	doc.dtmPublishUntil as [doc!1!dtmExpire],
	doc.dtmApproved as [doc!1!dtmApproved],
	doc.strDescription as [doc!1!strDescription],
	doc.strChapterName as [doc!1!strChapterName],
	doc.iHandbookId as [doc!1!iHandbookId],
	doc.iDepartmentId as [doc!1!dep],
	doc.iLevelType  as [doc!1!iLevelType],
	doc.iSort as [doc!1!iSort],
	null as [att!2!iItemId],
	null as [att!2!strName],
	null as [att!2!strFileType],
	null as [att!2!iSort]
from
	@docTbl doc
union all
select
	2 as tag,
	1 as parent,
	
	doc.iEntityId,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	doc.iSort,
	att.iItemId,
	att.strName,
	att.strFileType,
	att.iSort
from
	@doctbl doc
	inner join @attbl att on att.iEntityId=doc.iEntityId
) tmp
order by [doc!1!iSort], [att!2!iSort]
for xml explicit
GO
/****** Object:  StoredProcedure [dbo].[m136_GetInheritedMetadataOfChapter]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetInheritedMetadataOfChapter]
	@UserId INT,
	@HandbookId INT
AS
BEGIN
	SELECT
        distinct(ric.iRegisterItemId),
		r.iRegisterId,
		r.strName AS strRegisterName,
		ri.strName,
		h.strName AS strChapterName
	FROM
		m147_relRegisterItemCategory AS ric
			INNER JOIN m136_tblHandbook AS h ON ric.iCategoryId = h.iHandbookId
			INNER JOIN m147_tblRegisterItem ri ON ric.iRegisterItemId = ri.iRegisterItemId
			INNER JOIN m147_tblRegister r ON ri.iRegisterId = r.iRegisterId
	WHERE
		ric.iModuleId = 136
		AND ric.iInheritTypeId IN (1, 2, 3, 5)
		AND ric.iCategoryId IN (SELECT
									iHandbookId
								FROM
									dbo.m136_GetParentIdsInTbl(@HandbookId) AS m136_GetParentIdsInTbl_1)
		AND dbo.fnSecurityGetPermission(147, 571, @UserId, r.iRegisterId) & 0x01 = 0x01
	ORDER BY
		iRegisterId, iRegisterItemId, strChapterName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetMostViewedDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m136_GetMostViewedDocuments]
 -- Add the parameters for the stored procedure here
 @iSecurityId int,
 @iAccessedWithinXDays int,
 @iItemCount int
AS
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT TOP (@iItemCount) 
				d.iDocumentId, 
				doc.iHandbookId, 
				d.iAccessedCount, 
				doc.strName, 
				doc.iDocumentTypeId
	FROM		m136_tblDocAccessLog AS d 
		INNER JOIN m136_tblDocument doc 
			ON d.iDocumentId = doc.iDocumentId
	WHERE		d.iSecurityId = @iSecurityId 
		AND (doc.iLatestApproved = 1) 
		AND ((@iAccessedWithinXDays = 0) 
			OR
			(d.iSecurityId = @iSecurityId) AND (DATEDIFF(d, ISNULL(d.dtmAccessed, CONVERT(datetime, '01.01.1970', 104)), GETDATE()) < @iAccessedWithinXDays))
	ORDER BY 
	d.iAccessedCount DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetNewsWithPaging]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetNewsWithPaging]
	@PageIndex INT,
	@PageSize INT,
	@Access INT,
	@ShowInModule INT,
	@CategoryId INT
AS
BEGIN
	DECLARE @today Date;
	SET @today = GETDATE();
	SELECT
		rownumber = ROW_NUMBER() OVER (ORDER BY i.dtmPublish DESC),
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated,
		i.dtmPublish
	INTO #Paging
	FROM 
		dbo.m123_tblInfo i
		JOIN dbo.m123_relInfoCategory ri ON ri.iInfoId = i.iInfoId
		JOIN dbo.m123_tblCategory c ON c.iCategoryId = ri.iCategoryId
	WHERE
		i.iDraft = 0
	AND	i.dtmPublish < @today
	AND i.dtmExpire > @today
	AND c.iAccess & @Access = @Access
	AND (c.iShownIn & @ShowInModule = @ShowInModule)
	AND c.iParentCategoryId = @CategoryId;
	SELECT 
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated,
		i.dtmPublish		
	FROM 
		#Paging i
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber;
	SELECT
		COUNT(*) AS Total
	FROM 
		#Paging i
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetRelatedDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetRelatedDocuments]
	@iEntityId int,
	@ExtendRelatedDoc bit = 1
AS
BEGIN
	SELECT  d.strName, d.iDocumentId
	FROM m136_relInfo r
	JOIN m136_tblDocument d 
		ON r.iItemId = d.iDocumentId 
		AND d.iVersion = (SELECT ISNULL(MAX(iVersion), 0)
			FROM m136_tblDocument
			WHERE iDocumentId = r.iItemId
				AND (@ExtendRelatedDoc = 0 OR (@ExtendRelatedDoc = 1 AND iApproved in (1,4)))
				AND iDeleted = 0)
		AND ((@ExtendRelatedDoc = 0 AND d.iApproved <> 4) OR (@ExtendRelatedDoc = 1 AND d.iApproved = 1))
	WHERE r.iEntityId = @iEntityId AND r.iRelationTypeId = 136
	order by r.iSort
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFormulaImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFormulaImage] 
	@Id INT,
	@DocumentId INT,
	@DocumentVersion INT
AS
BEGIN
	SELECT 
        Id, 
		ImageContent AS imgContent
	FROM
        m136_FormulaImages
	WHERE
        Id = @Id
		AND DocumentId = @DocumentId 
		AND DocumentVersion = @DocumentVersion;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetFlowchartImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetFlowchartImage] 
	@EntityId INT,
	@DocumentId INT,
	@DocumentVersion INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT mfc.Id, 
		mfc.Name AS strFilename, 
		mfc.ContentType AS strContentType, 
		mfc.ImageContent AS imgContent
	FROM dbo.m136_FlowChart mfc
	WHERE mfc.Id = @EntityId 
		AND mfc.DocumentId = @DocumentId 
		AND mfc.DocumentVersion = @DocumentVersion;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateTimeStampForEventLog]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateTimeStampForEventLog]
	@Id INT,
    @EventTime DATETIME
AS
BEGIN
	UPDATE tblEventLog
    SET EventTime = @EventTime
    WHERE Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateSecurityGroup]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 03, 2015
-- Description:	Update role information.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateSecurityGroup]
	@iRoleId INT,
	@strName VARCHAR(50),
	@strDescription VARCHAR(1000)
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE dbo.tblSecGroup
    SET
        dbo.tblSecGroup.strName = @strName,
        dbo.tblSecGroup.strDescription = @strDescription
    WHERE dbo.tblSecGroup.iSecGroupId = @iRoleId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateRelatedInfo]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: 23 SEP, 2015
-- Description:	Update related information.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateRelatedInfo] 
	@iOldEntityId INT,
	@iEntityId INT,
	@EnforceStrictVersionPolicyOnAttachments BIT
AS
BEGIN
	SET NOCOUNT ON;
	-- For related internal attachments.
	DECLARE @iRelationTypeId INT = 20;
    DELETE FROM [dbo].[m136_relInfo] WHERE iEntityId = @iEntityId 
											AND iRelationTypeId = @iRelationTypeId;
    INSERT INTO dbo.m136_relInfo
    (
        iEntityId,
        iItemId,
        iPlacementId,
        iSort,
        iRelationTypeId,
        iNewWindow,
        iProcessRelationTypeId
    )
    SELECT @iEntityId, 
		mri.iItemId, 
		mri.iPlacementId, 
		mri.iSort, 
		@iRelationTypeId, 
		mri.iNewWindow, 
		mri.iProcessRelationTypeId 
    FROM dbo.m136_relInfo mri 
    WHERE mri.iEntityId = @iOldEntityId 
		AND mri.iRelationTypeId = @iRelationTypeId;
    UPDATE dbo.m136_tblBlob
    SET
        bInUse = 1
    WHERE iItemId IN (SELECT mri.iItemId FROM dbo.m136_relInfo mri 
		WHERE mri.iEntityId = @iEntityId AND mri.iRelationTypeId = @iRelationTypeId);
    --For related documents
    SET @iRelationTypeId = 136;
    DELETE FROM [dbo].[m136_relInfo] WHERE iEntityId = @iEntityId
											AND iRelationTypeId = @iRelationTypeId;
    INSERT INTO dbo.m136_relInfo
    (
        iEntityId,
        iItemId,
        iPlacementId,
        iSort,
        iRelationTypeId,
        iNewWindow,
        iProcessRelationTypeId
    )
    SELECT @iEntityId, 
		mri.iItemId, 
		mri.iPlacementId, 
		mri.iSort, 
		@iRelationTypeId, 
		mri.iNewWindow, 
		mri.iProcessRelationTypeId 
    FROM dbo.m136_relInfo mri	
    WHERE mri.iEntityId = @iOldEntityId 
		AND mri.iRelationTypeId = @iRelationTypeId;
    -- For images and internal images
    DELETE FROM [dbo].[m136_relInfo] WHERE iEntityId = @iEntityId
											AND (iRelationTypeId = 5 OR @iRelationTypeId = 50);
	INSERT INTO [dbo].m136_relInfo(
		iEntityId, 
		iItemId, 
		iRelationTypeId, 
		iSort, 
		iNewWindow, 
		iScaleDirId, 
		iSize, 
		iVJustifyId, 
		iHJustifyId, 
		strCaption, 
		strURL, 
		iWidth, 
		iHeight,
		iThumbWidth, 
		iThumbHeight,
		iPlacementId,
		iProcessRelationTypeId)
	SELECT @iEntityId, 
		mri.iItemId, 
		(CASE WHEN @EnforceStrictVersionPolicyOnAttachments = 1 THEN 50
		ELSE 5 END), 
		mri.iSort, 
		mri.iNewWindow, 
		mri.iScaleDirId, 
		mri.iSize, 
		mri.iVJustifyId, 
		mri.iHJustifyId, 
		mri.strCaption,
		mri.strURL,
		mri.iWidth,
		mri.iHeight,
		mri.iThumbWidth,
		mri.iThumbHeight,
		mri.iPlacementId,
		mri.iProcessRelationTypeId		
	FROM dbo.m136_relInfo mri
	WHERE mri.iEntityId = @iOldEntityId 
		AND ((mri.iRelationTypeId = 5 AND @EnforceStrictVersionPolicyOnAttachments = 0) 
		     OR (mri.iRelationTypeId = 50 AND @EnforceStrictVersionPolicyOnAttachments = 1));
	IF (@EnforceStrictVersionPolicyOnAttachments = 1)
	BEGIN
		-- For internal images 
		UPDATE dbo.m136_tblBlob
		SET
		    bInUse = 1
		WHERE iItemId IN (SELECT mri.iItemId FROM dbo.m136_relInfo mri 
		WHERE mri.iEntityId = @iEntityId AND mri.iRelationTypeId = 50);
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeDocumentType]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangeDocumentType]
	@UserId AS INT,
	@DocumentId AS INT,
	@DocumentTypeId AS INT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @OldEntityId INT;
            DECLARE @NewEntityId INT;
            SELECT
                @OldEntityId = iEntityId
            FROM
                dbo.m136_tblDocument
            WHERE
                iDocumentId = @DocumentId 
                AND iLatestVersion = 1
                AND iApproved = 1
            EXEC @NewEntityId = dbo.m136_be_CreateNewDocumentVersionWithDocumetTypeId @UserId, @OldEntityId, @DocumentId, @DocumentTypeId;
            EXEC [dbo].[m136_be_UpdateRelatedInfo] @OldEntityId, @NewEntityId, 1
            INSERT INTO dbo.CacheUpdate (ActionType, EntityId) VALUES (11, @DocumentId);
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateRelatedDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 06, 2015
-- Description:	Update related document
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateRelatedDocument] 
	@iEntityId				INT,
	@iItemId				INT,
	@iRelationTypeId		INT,
	@iProcessRelationTypeId INT,
	@iPlacementId			INT
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE [dbo].m136_relInfo
        SET iProcessRelationTypeId	= @iProcessRelationTypeId,
			iPlacementId			= @iPlacementId
        WHERE iEntityId = @iEntityId
            AND iRelationTypeId = @iRelationTypeId                    
            AND iItemId = @iItemId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateRelatedAttachments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: SEP 25, 2015
-- Description:	Update related attachments.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateRelatedAttachments] 
	@iEntityId				INT,
	@strName				VARCHAR(300),
	@strDescription			VARCHAR(800),
	@iSize					INT,
	@strFileName			VARCHAR(200),
	@strContentType			VARCHAR(100),	
	@strExtension			VARCHAR(10),
	@imgContent				[binary],
	@iItemId				INT,
	@iRelationTypeId		INT,
	@iProcessRelationTypeId INT,
	@iPlacementId			INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [dbo].m136_tblBlob
	SET strName			= @strName,
		strDescription	= @strDescription,
		iSize			= @iSize,
		strFileName		= @strFileName,
		strContentType	= @strContentType,
		strExtension	= @strExtension,
		imgContent		= @imgContent
    WHERE iItemId = @iItemId;

    UPDATE [dbo].m136_relInfo
    SET
		iProcessRelationTypeId	= @iProcessRelationTypeId,
		iPlacementId			= @iPlacementId
	WHERE iEntityId = @iEntityId
		AND iRelationTypeId = @iRelationTypeId                    
        AND iItemId = @iItemId;;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ResetSortingDocumentTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 23, 2015
-- Description:	Reset order of document types
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_ResetSortingDocumentTypes]
	
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE dbo.m136_tblDocumentType
    SET dbo.m136_tblDocumentType.iSort = 0 -- int
        WHERE dbo.m136_tblDocumentType.iDeleted = 0
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ResetFolderDocumentsSorting]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_ResetFolderDocumentsSorting] 
	@iHandbookId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE [dbo].[m136_tblDocument] SET iSort = 0
    WHERE iHandbookId = @iHandbookId;
    
    UPDATE [dbo].[m136_relVirtualRelation] SET iSort = 0
    WHERE iHandbookId = @iHandbookId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ReportHandbookUpdatedOverview]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ReportHandbookUpdatedOverview]
 @SecurityId AS INT,
 @DateFrom datetime = null,
 @DateTo dateTime = null
AS
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
	 SET NOCOUNT ON;
	 DECLARE @EntityId INT
	 DECLARE @resultTable TABLE(iEntityId INT NOT NULL PRIMARY KEY, iDocId INT, iHandbookId INT, strName NVARCHAR(200), iLevelType INT, 
	 strDocName NVARCHAR(200), iVersion INT, DocumentType INT, strChanges NVARCHAR(MAX), strTargetGroup NVARCHAR(MAX))
	 INSERT INTO @resultTable(iEntityId, iDocId, iHandbookId, strName, iLevelType ,strDocName, iVersion, DocumentType  ) 
	 SELECT  d.iEntityId, d.iDocumentId, d.iHandbookId ,  h.strName , h.iLevelType, d.strName, d.iVersion, t.Type
	 FROM m136_tblDocument d
	 INNER JOIN dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	 INNER JOIN m136_tblDocumentType t ON t.iDocumentTypeId = d.iDocumentTypeId
	 WHERE d.iLatestApproved = 1 and d.dtmPublish >= @DateFrom and 
		d.dtmPublish < @DateTo  ;
	 SELECT iMetaInfoTemplateRecordsId into #iMetaInfoTemplateRecordsIds 
	 FROM m136_tblMetaInfoTemplateRecords 
	 WHERE iMetaInfoTemplateRecordsId IN
		(SELECT iMetaInfoTemplateRecordsId 
		  FROM m136_relDocumentTypeInfo 
		  WHERE iDocumentTypeId IN (SELECT iDocumentTypeId FROM m136_tblDocument WHERE iEntityId in (SELECT r.iEntityId FROM @resultTable r)))
		 and strName like '%Målgruppe%'
	 UPDATE r
	 SET r.strTargetGroup = m.value
	 FROM @resultTable r 
	 LEFT JOIN (SELECT Value,iEntityId 
					FROM m136_tblMetaInfoRichText 
					WHERE iMetaInfoTemplateRecordsId in (SELECT iMetaInfoTemplateRecordsId FROM #iMetaInfoTemplateRecordsIds)) as m
		ON m.iEntityId = r.iEntityId
	 SELECT iMetaInfoTemplateRecordsId INTO #iMetaInfoTemplateRecordsIds2 
	 FROM m136_tblMetaInfoTemplateRecords 
	 WHERE iMetaInfoTemplateRecordsId IN 
		(SELECT iMetaInfoTemplateRecordsId 
			FROM m136_relDocumentTypeInfo 
			WHERE iDocumentTypeId in (SELECT iDocumentTypeId FROM m136_tblDocument WHERE iEntityId in (SELECT r.iEntityId FROM @resultTable r)))
		 and strName like '%Endringer fra%'
	 UPDATE r
	 SET r.strChanges = m.value
	 FROM @resultTable r 
	 LEFT JOIN (SELECT Value,iEntityId 
					FROM m136_tblMetaInfoRichText 
					WHERE iMetaInfoTemplateRecordsId in (SELECT iMetaInfoTemplateRecordsId FROM #iMetaInfoTemplateRecordsIds2)) as m
		ON m.iEntityId = r.iEntityId
	 SELECT DocumentType, strDocName AS Dokument, strName AS Mappe, iDocId AS DokId, iVersion AS Versjon, strChanges AS CustomField1, strTargetGroup AS CustomField2  
	 FROM @resultTable 
	 ORDER BY strName, iDocId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertFlowChartImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertFlowChartImage]
	@Name VARCHAR(300),
	@Description VARCHAR(800),
	@ContentType VARCHAR(100),
	@Extension VARCHAR(10),
	@ImageContent IMAGE,
	@JsonContent NVARCHAR(MAX),
    @DocumentId INT,
    @DocumentVersion INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        INSERT INTO
        m136_FlowChart
            (Name, Description, ContentType, Extension, ImageContent, JsonContent, DocumentId, DocumentVersion)
        VALUES
            (@Name, @Description, @ContentType, @Extension, @ImageContent, @JsonContent, @DocumentId, @DocumentVersion)
        SELECT SCOPE_IDENTITY();
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertDocumentTemplate]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertDocumentTemplate]
	-- Add the parameters for the stored procedure here
	@strName VARCHAR(100),
	@strDescription VARCHAR(4000),
	@bIsProcess BIT,
	@bInactive BIT,
	@ViewMode INT,
	@Type INT,
	@HideFieldNumbering BIT,
	@HideFieldName BIT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @iMaxDocumentTypeId INT, @iMaxiSort INT;
	SELECT @iMaxDocumentTypeId = MAX(dt.iDocumentTypeId), @iMaxiSort = MAX(iSort) FROM [dbo].[m136_tblDocumentType] dt;
	DECLARE @NewDocumentTypeId INT = (ISNULL(@iMaxDocumentTypeId, 0) + 1);
	SET IDENTITY_INSERT dbo.m136_tblDocumentType ON;
    INSERT INTO  dbo.m136_tblDocumentType
    (
        iDocumentTypeId, -- this column value is auto-generated
        strName,
        strDescription,
        iDeleted,
        strIcon,
        bIsProcess,
        bInactive,
        ViewMode,
        [Type],
        HideFieldNumbering,
        HideFieldName,
        iSort
    )
    VALUES
    (
        @NewDocumentTypeId,
        @strName, 
        @strDescription, 
        0, 
        '', 
        @bIsProcess, 
        @bInactive, 
        @ViewMode, 
        @Type, 
        @HideFieldNumbering, 
        @HideFieldName, 
        (ISNULL(@iMaxiSort, 0) + 1) 
    );
    SET IDENTITY_INSERT dbo.m136_tblDocumentType OFF;
    SELECT @NewDocumentTypeId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertDocumentField]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertDocumentField]
	-- Add the parameters for the stored procedure here
	@strName VARCHAR(100),
	@strDescription VARCHAR(4000),
	@iInfoTypeId INT,
	@iFlag INT,
	@iFieldProcessType INT,
	@DefaultIntValue INT,
	@DefaultTextValue VARCHAR(7000),
	@DefaultDateValue DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @iMaxDocumentFieldTypeId INT;
	SELECT @iMaxDocumentFieldTypeId = MAX(mtmitr.iMetaInfoTemplateRecordsId) FROM [dbo].[m136_tblMetaInfoTemplateRecords] mtmitr;
	DECLARE @NewDocumentFieldTypeId INT = (ISNULL(@iMaxDocumentFieldTypeId, 0) + 1);
	SET IDENTITY_INSERT dbo.m136_tblMetaInfoTemplateRecords ON;
    INSERT INTO dbo.m136_tblMetaInfoTemplateRecords
    (
        iMetaInfoTemplateRecordsId, -- this column value is auto-generated
        strName,
        strDescription,
        iInfoTypeId,
        DefaultIntValue,
        DefaultTextValue,
        DefaultDateValue,
        iFlag,
        iDeleted,
        iFieldProcessType
    )
    VALUES
    (
        @NewDocumentFieldTypeId, -- iMetaInfoTemplateRecordsId - int
        @strName, -- strName - varchar
        @strDescription, -- strDescription - varchar
        @iInfoTypeId, -- iInfoTypeId - int
        @DefaultIntValue, -- DefaultIntValue - int
        @DefaultTextValue, -- DefaultTextValue - varchar
        @DefaultDateValue, -- DefaultDateValue - datetime
        @iFlag, -- iFlag - int
        0, -- iDeleted - int
        @iFieldProcessType -- iFieldProcessType - int
    )
    SET IDENTITY_INSERT dbo.m136_tblMetaInfoTemplateRecords OFF;
	SELECT @NewDocumentFieldTypeId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateContentFieldsOfChangeTemplateDraft]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateContentFieldsOfChangeTemplateDraft] 
	@MetaInfoIds AS [dbo].[Item] READONLY,
	@EntityId INT,
	@iDocumentTypeId INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @tblMetaInfoNumber AS TABLE(iMetaInfoTemplateRecordsId INT, iEntityId INT, value INT)
	DECLARE @tblMetaInfoText AS TABLE(iMetaInfoTemplateRecordsId INT, iEntityId INT, value VARCHAR(8000))
	DECLARE @tblMetaInfoRichText AS TABLE(iMetaInfoTemplateRecordsId INT, iEntityId INT, value NTEXT)
	DECLARE @tblMetaInfoDate AS TABLE(iMetaInfoTemplateRecordsId INT, iEntityId INT, value DATETIME)
	INSERT INTO @tblMetaInfoNumber (iMetaInfoTemplateRecordsId, iEntityId, value)
		SELECT iMetaInfoTemplateRecordsId, iEntityId, value 
		FROM [dbo].m136_tblMetaInfoNumber 
		WHERE iEntityId = @EntityId;
	INSERT INTO @tblMetaInfoText (iMetaInfoTemplateRecordsId, iEntityId, value)
		SELECT iMetaInfoTemplateRecordsId, iEntityId, value 
		FROM [dbo].m136_tblMetaInfoText 
		WHERE iEntityId = @EntityId;
	INSERT INTO @tblMetaInfoRichText (iMetaInfoTemplateRecordsId, iEntityId, value)
		SELECT iMetaInfoTemplateRecordsId, iEntityId, value 
		FROM [dbo].m136_tblMetaInfoRichText 
		WHERE iEntityId = @EntityId;
	INSERT INTO @tblMetaInfoDate (iMetaInfoTemplateRecordsId, iEntityId, value)
		SELECT iMetaInfoTemplateRecordsId, iEntityId, value 
		FROM [dbo].m136_tblMetaInfoDate 
		WHERE iEntityId = @EntityId;
	DELETE FROM [dbo].m136_tblMetaInfoRichText WHERE iEntityId = @EntityId;
	DELETE FROM [dbo].m136_tblMetaInfoText WHERE iEntityId = @EntityId;
	DELETE FROM [dbo].m136_tblMetaInfoNumber WHERE iEntityId = @EntityId;
	DELETE FROM [dbo].m136_tblMetaInfoDate WHERE iEntityId = @EntityId;
	DECLARE @iMetaRecordId INT, 
		@iInfoTypeId INT, 
		@DefaultTextValue VARCHAR(7000), 
		@DefaultDateValue DATETIME, 
		@DefaultIntValue INT;
	DECLARE Fields CURSOR FOR 
		SELECT DISTINCT 
		    mi.iMetaInfoTemplateRecordsId, 
			mi.iInfoTypeId, 
			mi.DefaultTextValue, 
			mi.DefaultDateValue, 
			mi.DefaultIntValue
		FROM [dbo].m136_tblMetaInfoTemplateRecords mi 
		JOIN [dbo].m136_relDocumentTypeInfo r ON r.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId 
			AND r.iDocumentTypeId = @iDocumentTypeId;
	OPEN Fields; 
	FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF (@iInfoTypeId = 1)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoNumber
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			SELECT @iMetaRecordId,
				   @EntityId, 
				   ISNULL(temp.[Value], @DefaultIntValue)
			FROM
			(SELECT TOP(1)
				  mtmin.[Value]
			FROM @tblMetaInfoNumber mtmin 
			JOIN @MetaInfoIds me ON me.Id = mtmin.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmin.iEntityId = @EntityId) AS temp;
		END
		IF (@iInfoTypeId = 2 OR @iInfoTypeId = 3 OR @iInfoTypeId = 4)
		BEGIN
			DECLARE @ResultText VARCHAR(8000) = ''
			DECLARE @tempValue	VARCHAR(8000) = ''
			DECLARE curvalue CURSOR FOR
			SELECT
				mtmit.[Value]
			FROM @tblMetaInfoText mtmit 
			JOIN @MetaInfoIds me ON me.Id = mtmit.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmit.iEntityId = @EntityId; 	
			OPEN curvalue; 
			FETCH NEXT FROM curvalue INTO @tempValue;
			WHILE @@FETCH_STATUS = 0
				BEGIN	
					IF @ResultText = '' OR @ResultText IS NULL
						BEGIN
							IF @tempValue IS NOT NULL
								SET @ResultText = @tempValue;
						END
					ELSE
						BEGIN
							IF @tempValue IS NOT NULL
								SET @ResultText = @ResultText + '\n' + @tempValue;
						END
				FETCH NEXT FROM curvalue INTO @tempValue;
				END
			CLOSE curvalue;
			DEALLOCATE curvalue;
			INSERT INTO [dbo].m136_tblMetaInfoText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			VALUES(@iMetaRecordId, @EntityId,ISNULL(@ResultText, @DefaultTextValue))
		END
		IF (@iInfoTypeId = 5)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoDate
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			SELECT @iMetaRecordId, 
				@EntityId, 
				ISNULL(temp.[Value], @DefaultDateValue) 
			FROM
				(SELECT TOP(1)
					mtmid.[Value]
					FROM @tblMetaInfoDate mtmid
					JOIN @MetaInfoIds me ON me.Id = mtmid.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
					WHERE mtmid.iEntityId = @EntityId) temp; 
		END
		IF (@iInfoTypeId = 6)
		BEGIN
			DECLARE @ResultRichText NVARCHAR(MAX) = ''
			DECLARE @tempRichValue	NVARCHAR(MAX) = ''
			DECLARE curval CURSOR FOR
			SELECT
				mtmirt.[Value]
			FROM @tblMetaInfoRichText mtmirt 
			JOIN @MetaInfoIds me ON me.Id = mtmirt.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmirt.iEntityId = @EntityId 
			OPEN curval; 
			FETCH NEXT FROM curval INTO @tempRichValue;
			WHILE @@FETCH_STATUS = 0
				BEGIN	
					IF @ResultRichText = '' OR @ResultRichText IS NULL
						BEGIN
							IF @tempRichValue IS NOT NULL
								SET @ResultRichText = @tempRichValue;
						END
					ELSE
						BEGIN
							IF @tempRichValue IS NOT NULL
								SET @ResultRichText = @ResultRichText + '<p></p>' + @tempRichValue;
						END
				FETCH NEXT FROM curval INTO @tempRichValue;
				END
			CLOSE curval;
			DEALLOCATE curval;
			INSERT INTO [dbo].m136_tblMetaInfoRichText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			VALUES(@iMetaRecordId, @EntityId,ISNULL(@ResultRichText, @DefaultTextValue))
		END
		FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
    END
    CLOSE Fields;
	DEALLOCATE Fields;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateContentFieldsOfChangeTemplate]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateContentFieldsOfChangeTemplate] 
	@MetaInfoIds AS [dbo].[Item] READONLY,
	@iOldEntityId INT,
	@iNewEntityId INT,
	@iDocumentTypeId INT
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM [dbo].m136_tblMetaInfoRichText WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoText WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoNumber WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoDate WHERE iEntityId = @iNewEntityId;
	DECLARE @iMetaRecordId INT, 
		@iInfoTypeId INT, 
		@DefaultTextValue VARCHAR(7000), 
		@DefaultDateValue DATETIME, 
		@DefaultIntValue INT;
	DECLARE Fields CURSOR FOR 
		SELECT DISTINCT 
		    mi.iMetaInfoTemplateRecordsId, 
			mi.iInfoTypeId, 
			mi.DefaultTextValue, 
			mi.DefaultDateValue, 
			mi.DefaultIntValue
		FROM [dbo].m136_tblMetaInfoTemplateRecords mi 
		JOIN [dbo].m136_relDocumentTypeInfo r ON r.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId 
			AND r.iDocumentTypeId = @iDocumentTypeId;
	OPEN Fields; 
	FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF (@iInfoTypeId = 1)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoNumber
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			SELECT @iMetaRecordId,
				   @iNewEntityId, 
				   ISNULL(temp.[Value], @DefaultIntValue)
			FROM
			(SELECT TOP(1)
				  mtmin.[Value]
			FROM dbo.m136_tblMetaInfoNumber mtmin 
			JOIN @MetaInfoIds me ON me.Id = mtmin.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmin.iEntityId = @iOldEntityId) AS temp;
		END
		IF (@iInfoTypeId = 2 OR @iInfoTypeId = 3 OR @iInfoTypeId = 4)
		BEGIN
			DECLARE @ResultText VARCHAR(8000) = ''
			DECLARE @tempValue	VARCHAR(8000) = ''
			DECLARE curvalue CURSOR FOR
			SELECT
				mtmit.[Value]
			FROM dbo.m136_tblMetaInfoText mtmit 
			JOIN @MetaInfoIds me ON me.Id = mtmit.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmit.iEntityId = @iOldEntityId; 	
			OPEN curvalue; 
			FETCH NEXT FROM curvalue INTO @tempValue;
			WHILE @@FETCH_STATUS = 0
				BEGIN	
					IF @ResultText = '' OR @ResultText IS NULL
						BEGIN
							IF @tempValue IS NOT NULL
								SET @ResultText = @tempValue;
						END
					ELSE
						BEGIN
							IF @tempValue IS NOT NULL
								SET @ResultText = @ResultText + '\n' + @tempValue;
						END
				FETCH NEXT FROM curvalue INTO @tempValue;
				END
			CLOSE curvalue;
			DEALLOCATE curvalue;
			INSERT INTO [dbo].m136_tblMetaInfoText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			VALUES(@iMetaRecordId, @iNewEntityId,ISNULL(@ResultText, @DefaultTextValue))
		END
		IF (@iInfoTypeId = 5)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoDate
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			SELECT @iMetaRecordId, 
				@iNewEntityId, 
				ISNULL(temp.[Value], @DefaultDateValue) 
			FROM
				(SELECT TOP(1)
					mtmid.[Value]
					FROM dbo.m136_tblMetaInfoDate mtmid
					JOIN @MetaInfoIds me ON me.Id = mtmid.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
					WHERE mtmid.iEntityId = @iOldEntityId) temp; 
		END
		IF (@iInfoTypeId = 6)
		BEGIN
			DECLARE @ResultRichText NVARCHAR(MAX) = ''
			DECLARE @tempRichValue	NVARCHAR(MAX) = ''
			DECLARE curval CURSOR FOR
			SELECT
				mtmirt.[Value]
			FROM dbo.m136_tblMetaInfoRichText mtmirt 
			JOIN @MetaInfoIds me ON me.Id = mtmirt.iMetaInfoTemplateRecordsId AND me.Value = @iMetaRecordId
				WHERE mtmirt.iEntityId = @iOldEntityId 
			OPEN curval; 
			FETCH NEXT FROM curval INTO @tempRichValue;
			WHILE @@FETCH_STATUS = 0
				BEGIN	
					IF @ResultRichText = '' OR @ResultRichText IS NULL
						BEGIN
							IF @tempRichValue IS NOT NULL
								SET @ResultRichText = @tempRichValue;
						END
					ELSE
						BEGIN
							IF @tempRichValue IS NOT NULL
								SET @ResultRichText = @ResultRichText + '<p></p>' + @tempRichValue;
						END
				FETCH NEXT FROM curval INTO @tempRichValue;
				END
			CLOSE curval;
			DEALLOCATE curval;
			INSERT INTO [dbo].m136_tblMetaInfoRichText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			VALUES(@iMetaRecordId, @iNewEntityId,ISNULL(@ResultRichText, @DefaultTextValue))
		END
		FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
    END
    CLOSE Fields;
	DEALLOCATE Fields;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeDocumentTemplate]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangeDocumentTemplate] 
	@DocumentId AS INT,
	@ToDocumentTypeId AS INT,
	@MetaInfoIds AS [dbo].[Item] READONLY,
	@UserId INT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
			DECLARE @iDocumentId INT
			DECLARE @NewEntityId INT
			DECLARE @OldEntityId INT
			SELECT @OldEntityId = iEntityId
			FROM dbo.m136_tblDocument
			WHERE iDocumentId = @DocumentId 
				  AND iLatestVersion = 1
				  AND iApproved = 1
			IF @OldEntityId IS NOT NULL 
            BEGIN
                EXEC @NewEntityId = dbo.m136_be_CreateNewDocumentVersionWithDocumetTypeId @UserId, @OldEntityId, @DocumentId, @ToDocumentTypeId;
                IF @NewEntityId IS NOT NULL AND @NewEntityId != 0
                BEGIN
                    EXEC [dbo].[m136_be_UpdateRelatedInfo] @OldEntityId, @NewEntityId, 1
                    EXEC [dbo].[m136_be_UpdateContentFieldsOfChangeTemplate] @MetaInfoIds, @OldEntityId, @NewEntityId, @ToDocumentTypeId
                END
            END
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (11, @DocumentId);
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
        ROLLBACK;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateContentFields]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: SEP 23, 2015
-- Description:	Update document field contents
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateContentFields] 
	@iOldEntityId INT,
	@iNewEntityId INT,
	@iDocumentTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM [dbo].m136_tblMetaInfoRichText WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoText WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoNumber WHERE iEntityId = @iNewEntityId;
	DELETE FROM [dbo].m136_tblMetaInfoDate WHERE iEntityId = @iNewEntityId;
	
	DECLARE @iMetaRecordId INT, 
		@iInfoTypeId INT, 
		@DefaultTextValue VARCHAR(7000), 
		@DefaultDateValue DATETIME, 
		@DefaultIntValue INT;
		
	DECLARE Fields CURSOR FOR 
		SELECT DISTINCT 
		    mi.iMetaInfoTemplateRecordsId, 
			mi.iInfoTypeId, 
			mi.DefaultTextValue, 
			mi.DefaultDateValue, 
			mi.DefaultIntValue
		FROM [dbo].m136_tblMetaInfoTemplateRecords mi 
		JOIN [dbo].m136_relDocumentTypeInfo r ON r.iMetaInfoTemplateRecordsId = mi.iMetaInfoTemplateRecordsId 
			AND r.iDocumentTypeId = @iDocumentTypeId;
			
	OPEN Fields; 
	FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF (@iInfoTypeId = 1)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoNumber
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			) 
			SELECT @iMetaRecordId, 
				@iNewEntityId, 
				ISNULL([Value], @DefaultIntValue)
			FROM dbo.m136_tblMetaInfoNumber mtmin 
				WHERE mtmin.iEntityId = @iOldEntityId AND mtmin.iMetaInfoTemplateRecordsId = @iMetaRecordId;		
		END
		
		IF (@iInfoTypeId = 2 OR @iInfoTypeId = 3 OR @iInfoTypeId = 4)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			)
			SELECT @iMetaRecordId, 
				@iNewEntityId, 
				ISNULL([Value], @DefaultTextValue)
			FROM dbo.m136_tblMetaInfoText mtmit 
				WHERE mtmit.iEntityId = @iOldEntityId AND mtmit.iMetaInfoTemplateRecordsId = @iMetaRecordId; 	
		END
		
		IF (@iInfoTypeId = 5)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoDate
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			) 
			SELECT @iMetaRecordId, 
				@iNewEntityId, 
				ISNULL([Value], @DefaultDateValue) 
			FROM dbo.m136_tblMetaInfoDate mtmid 
				WHERE mtmid.iEntityId = @iOldEntityId AND mtmid.iMetaInfoTemplateRecordsId = @iMetaRecordId;	
		END
		
		IF (@iInfoTypeId = 6)
		BEGIN
			INSERT INTO [dbo].m136_tblMetaInfoRichText
			(
				iMetaInfoTemplateRecordsId, 
				iEntityId, 
				[value]
			) 
			SELECT @iMetaRecordId, 
				@iNewEntityId, 
				ISNULL([Value], @DefaultTextValue)
			FROM dbo.m136_tblMetaInfoRichText mtmirt 
				WHERE mtmirt.iEntityId = @iOldEntityId AND mtmirt.iMetaInfoTemplateRecordsId = @iMetaRecordId;		
		END
		FETCH NEXT FROM Fields INTO @iMetaRecordId, @iInfoTypeId, @DefaultTextValue, @DefaultDateValue, @DefaultIntValue;
    END
    
    CLOSE Fields;
	DEALLOCATE Fields;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ReopenDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: Nov 18, 2015
-- Description:	Reopen document after document is archived
-- Modified: add transaction
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_ReopenDocument] 
	@DocumentIds AS [dbo].[Item] READONLY,
	@UserId INT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION 
			DECLARE @iDocumentId INT
			DECLARE @Description VARCHAR(2000)
			DECLARE @LogDescription VARCHAR(2000)
			DECLARE @NewEntityId INT
			DECLARE @OldEntityId INT
			DECLARE @Version INT
			DECLARE @DocumentTypeId INT
			DECLARE curDocumentId CURSOR FOR 
				SELECT Id
				FROM @DocumentIds;
			OPEN curDocumentId; 
			FETCH NEXT FROM curDocumentId INTO @iDocumentId;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SELECT @OldEntityId = iEntityId,
					   @Description = strDescription,
					   @Version = iVersion,
					   @DocumentTypeId = iDocumentTypeId
				FROM dbo.m136_tblDocument
				WHERE iDocumentId = @iDocumentId 
					  AND iLatestVersion = 1
				SELECT @LogDescription = [Description]
				FROM dbo.tblEventlog
				WHERE DocumentId = @iDocumentId
					  AND [Version] = @Version
					  AND EventType = 11
					  AND Id = (SELECT MAX(Id) FROM dbo.tblEventlog WHERE DocumentId = @iDocumentId
								  AND [Version] = @Version
								  AND EventType = 11)
				IF @LogDescription IS NOT NULL
				BEGIN
					IF (CHARINDEX(@LogDescription,@Description) = 1)
					BEGIN
						DECLARE @NewDescription VARCHAR(2000)
						SET @NewDescription = SUBSTRING(@Description,LEN(@LogDescription) + 1 ,LEN(@Description))
						UPDATE dbo.m136_tblDocument
						SET strDescription = @NewDescription
						WHERE iEntityId = @OldEntityId
					END
				END
				--Create new version
				IF @OldEntityId IS NOT NULL AND @iDocumentId IS NOT NULL
				BEGIN
					DECLARE @ResultSet table (SelectedValue int)
					INSERT INTO @ResultSet (SelectedValue)
					EXEC [dbo].[m136_be_CreateNewDocumentVersion] @UserId, @OldEntityId, @iDocumentId
					SELECT @NewEntityId = SelectedValue FROM @ResultSet
					IF @NewEntityId IS NOT NULL AND @NewEntityId != 0
					BEGIN
						EXEC [dbo].[m136_be_UpdateRelatedInfo] @OldEntityId, @NewEntityId, 1
						EXEC [dbo].[m136_be_UpdateContentFields] @OldEntityId, @NewEntityId, @DocumentTypeId	
					END
				END
				FETCH NEXT FROM curDocumentId INTO @iDocumentId;
			END
			CLOSE curDocumentId;
			DEALLOCATE curDocumentId;
		COMMIT
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CopyDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: April 14, 2016
-- Description:	Copy Document
-- Modified: add transaction
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_CopyDocument] 
	@DocumentId AS INT,
	@DocumentName AS VARCHAR(200),
	@FolderId AS INT,
	@UserId AS INT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION 
			DECLARE @iDocumentId INT
			DECLARE @NewEntityId INT
			DECLARE @OldEntityId INT
			DECLARE @DocumentTypeId INT
			SELECT @OldEntityId = iEntityId,
				   @DocumentTypeId = iDocumentTypeId
			FROM dbo.m136_tblDocument
			WHERE iDocumentId = @DocumentId 
				  AND iLatestVersion = 1
			DECLARE @MaxEntityId INT;
			SELECT @MaxEntityId = MAX(mtd.iEntityId) FROM dbo.m136_tblDocument mtd;
			SET @NewEntityId = ISNULL(@MaxEntityId,0) + 1;
			DECLARE @CurrentDate DATETIME = GETDATE();
			SET NOCOUNT ON;
			DECLARE @iMaxDocumentId INT = 0, @iMaxEntityId INT = 0, @Sort INT, @LevelType INT;
			SELECT @LevelType = iLevelType FROM dbo.m136_tblHandbook WHERE iHandbookId = @FolderId
			SELECT @iMaxDocumentId = MAX(iDocumentId) FROM dbo.m136_tblDocument;
			DECLARE @iNewDocumentId INT = ISNULL(@iMaxDocumentId,0) + 1;
			SELECT @Sort = ISNULL(MAX(iSort) + 1, 0) FROM (SELECT 0 iSort
					FROM dbo.m136_tblDocument d
					WHERE d.iHandbookId = @FolderId AND d.iDeleted = 0
					AND d.iLatestVersion = 1
				UNION all
					SELECT 1 iSort
					FROM dbo.m136_tblDocument d
					WHERE d.iLatestVersion = 1) Temp
			SET IDENTITY_INSERT dbo.m136_tblDocument ON;
			INSERT INTO	dbo.m136_tblDocument( [iEntityId],[iDocumentId],[iVersion],[iDocumentTypeId],[iHandbookId],[strName],[strDescription],[iCreatedbyId],[dtmCreated],[strAuthor]
								  ,[iAlterId],[dtmAlter],[strAlterer],[iApprovedById],[dtmApproved],[strApprovedBy],[dtmPublish],[dtmPublishUntil],[iStatus],[iSort]
								  ,[iDeleted],[iApproved],[iDraft],[iLevelType],[strHash],[iReadCount],[iCompareToVersion],[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,[iLatestVersion],[iInternetDoc],[strNameReversed],[strDescriptionReversed]
								  )
			SELECT				  @NewEntityId,@iNewDocumentId, 0 ,[iDocumentTypeId],@FolderId,@DocumentName,[strDescription],@UserId,@CurrentDate,[strAuthor]
								  ,@UserId,@CurrentDate,[dbo].fnOrgGetUserName(@UserId, '', 0),0,null,'',[dtmPublish],[dtmPublishUntil],0,@Sort
								  ,0,0,1,@LevelType,[strHash],0,0,[File],[UrlOrFileName],[UrlOrFileProperties]
								  ,1,[iInternetDoc],[strNameReversed],[strDescriptionReversed]
			FROM		dbo.m136_tblDocument d
			WHERE		iEntityId = @OldEntityId; 
			SET IDENTITY_INSERT dbo.m136_tblDocument OFF;
			EXEC [dbo].[m136_be_UpdateRelatedInfo] @OldEntityId, @NewEntityId, 1
			EXEC [dbo].[m136_be_UpdateContentFields] @OldEntityId, @NewEntityId, @DocumentTypeId
			EXEC dbo.m136_SetVersionFlags @iNewDocumentId
			SELECT @iNewDocumentId
		COMMIT
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SortingDocumentTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 23, 2015
-- Description:	Sorting document types.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_SortingDocumentTypes] 
	@DocumentTypes AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	UPDATE dt
	SET
	    dt.iSort = dt1.Value
	FROM dbo.m136_tblDocumentType dt
	INNER JOIN @DocumentTypes dt1 ON dt1.Id = dt.iDocumentTypeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetTemplateMetaInfo]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetTemplateMetaInfo]
	@TemplateId INT
AS
BEGIN
	SELECT  dti.iDocumentTypeInfoId,
		mir.iMetaInfoTemplateRecordsId, 
		mir.strName,	
		mir.strDescription, 
		mir.iInfoTypeId,
		mir.iFlag,
		it.strName AS infoTypeName, 
		it.strDescription AS infoTypeDescription,
		dti.iDeleted,
		dti.iShowOnPDA,
		dti.iMandatory, 
		dti.iMaximized,
		dti.iSort
	FROM [m136_tblMetaInfoTemplateRecords] mir
		INNER JOIN [m136_relDocumentTypeInfo] dti 
			ON dti.iDocumentTypeId = @TemplateId AND dti.iMetaInfoTemplateRecordsId = mir.iMetaInfoTemplateRecordsId
		LEFT JOIN [m136_tblInfoType] it 
			ON mir.iInfoTypeId = it.iInfoTypeId
	ORDER BY dti.iSort, it.strName;	
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetSecurityGroupById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetSecurityGroupById]
	@RoleId INT
AS
BEGIN
    SELECT
        iSecGroupId,
		strName
	FROM
        tblSecGroup
	WHERE
        iSecGroupId = @RoleId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetProcessRelationType]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetProcessRelationType] 
	@iRelationTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT mtprt.* FROM dbo.m136_tblProcessRelationType mtprt
		WHERE mtprt.iRelationTypeId = @iRelationTypeId OR @iRelationTypeId IS NULL;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_MoveFolder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_MoveFolder]
    @FolderId INT,
    @PreviousFolderId INT,
    @ParentFolderId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        IF @PreviousFolderId IS NULL
        BEGIN
            UPDATE m136_tblHandbook
            SET iSort = iSort + 1
            WHERE @ParentFolderId IS NULL OR iParentHandbookId = @ParentFolderId
            UPDATE m136_tblHandbook
            SET iSort = -2147483648, iParentHandbookId = @ParentFolderId
            WHERE iHandbookId = @FolderId
        END
        ELSE
        BEGIN
            DECLARE @PreviousFolderSortOrder INT = (SELECT TOP 1 iSort FROM m136_tblHandbook WHERE iHandbookId = @PreviousFolderId);
            UPDATE m136_tblHandbook
            SET iSort = iSort + 1
            WHERE (@ParentFolderId IS NULL OR iParentHandbookId = @ParentFolderId) AND iSort > @PreviousFolderSortOrder
            UPDATE m136_tblHandbook
            SET iSort = @PreviousFolderSortOrder + 1, iParentHandbookId = @ParentFolderId
            WHERE iHandbookId = @FolderId
        END
    COMMIT TRANSACTION;    
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_MoveDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_MoveDocument]
    @DocumentId INT,
    @IsDocumentVirtual BIT,
    @PreviousDocumentId INT,
    @IsPreviousDocumentVirtual BIT,
    @OldFolderId INT,
    @NewFolderId INT
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        IF @PreviousDocumentId IS NULL
        BEGIN
            UPDATE m136_tblDocument
            SET iSort = iSort + 1
            WHERE iHandbookId = @NewFolderId
            UPDATE m136_relVirtualRelation
            SET iSort = iSort + 1
            WHERE iHandbookId = @NewFolderId
            IF @IsDocumentVirtual = 1
            BEGIN
                UPDATE m136_relVirtualRelation
                SET iSort = -2147483648, iHandbookId = @NewFolderId
                WHERE iHandbookId = @OldFolderId AND iDocumentId = @DocumentId
            END
            ELSE
            BEGIN
                UPDATE m136_tblDocument
                SET iSort = -2147483648, iHandbookId = @NewFolderId
                WHERE iHandbookId = @OldFolderId AND iDocumentId = @DocumentId
            END
        END
        ELSE
        BEGIN
            DECLARE @PreviousDocumentSortOrder INT;
            IF @IsPreviousDocumentVirtual = 1
            BEGIN
                SET @PreviousDocumentSortOrder = (SELECT TOP 1 iSort FROM m136_relVirtualRelation WHERE iHandbookId = @NewFolderId AND iDocumentId = @PreviousDocumentId);
            END
            ELSE
            BEGIN
                SET @PreviousDocumentSortOrder = (SELECT TOP 1 iSort FROM m136_tblDocument WHERE iDocumentId = @PreviousDocumentId);
            END        
            UPDATE m136_tblDocument
            SET iSort = iSort + 1
            WHERE iHandbookId = @NewFolderId AND iSort > @PreviousDocumentSortOrder
            UPDATE m136_relVirtualRelation
            SET iSort = iSort + 1
            WHERE iHandbookId = @NewFolderId AND iDocumentId = @DocumentId AND iSort > @PreviousDocumentSortOrder
            IF @IsDocumentVirtual = 1
            BEGIN
                UPDATE m136_relVirtualRelation
                SET iSort = @PreviousDocumentSortOrder + 1, iHandbookId = @NewFolderId
                WHERE iHandbookId = @OldFolderId AND iDocumentId = @DocumentId
            END
            ELSE
            BEGIN
                UPDATE m136_tblDocument
                SET iSort = @PreviousDocumentSortOrder + 1, iHandbookId = @NewFolderId
                WHERE iDocumentId = @DocumentId
            END
        END
    COMMIT TRANSACTION;    
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_LinkDocumentAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 18, 2015
-- Description:	Link an attachment to a document. 
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_LinkDocumentAttachment]
	@iEntityId				INT,
	@iItemId				INT,
	@iRelationTypeId		INT,
	@iPlacementId			INT,
	@iProcessRelationTypeId	INT
AS
BEGIN
	SET NOCOUNT ON;

    DECLARE @Sort INT;

    SELECT @Sort = ISNULL(MAX(iSort) + 1, 1)
    FROM dbo.m136_relInfo
    WHERE iEntityId = @iEntityId
        AND iRelationTypeId = @iRelationTypeId;

	INSERT INTO [dbo].m136_relInfo
        (iEntityId,
        iItemId,	                
        iProcessRelationTypeId,
        iRelationTypeId,
        iSort,
        iPlacementId)
    VALUES
        (@iEntityId,
        @iItemId,	                
        @iProcessRelationTypeId,
        @iRelationTypeId,
        @Sort,
        @iPlacementId);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_IsDocumentTemplateExpired]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_IsDocumentTemplateExpired]
    @DocumentId INT
AS
BEGIN
    IF EXISTS (
                SELECT 1 
                FROM
                    m136_tblDocument d
                        INNER JOIN m136_tblDocumentType dt ON d.iDocumentTypeId = dt.iDocumentTypeId
                WHERE
                    d.iDocumentId = @DocumentId
                    AND d.iLatestVersion = 1
                    AND dt.Type = 0
                    AND
                    (
                        dt.iDeleted = 1
                        OR dt.bInactive = 1
                    )
            )        
    BEGIN
        SELECT 1
    END
    ELSE
    BEGIN
        SELECT 0
    END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertSecurityGroup]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertSecurityGroup]
	@strName VARCHAR(50),
	@strDescription VARCHAR(1000)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxSecGroupId INT;
	SELECT @iMaxSecGroupId = MAX(tsg.iSecGroupId) FROM  dbo.tblSecGroup tsg;
	DECLARE @NewSecGroupId INT = (ISNULL(@iMaxSecGroupId, 0) + 1);
	INSERT INTO dbo.tblSecGroup
	(
	    iSecGroupId,
	    strName,
	    strDescription
	)
	VALUES
	(
	    @NewSecGroupId, -- iSecGroupId - int
	    @strName, -- strName - varchar
	    @strDescription -- strDescription - varchar
	);
	SELECT @NewSecGroupId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertRelatedDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: OCT 05, 2015
-- Description:	Insert related document
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_InsertRelatedDocument] 
	@iEntityId				INT,
	@iItemId				INT,
	@iProcessRelationTypeId INT,
	@iRelationTypeId		INT,
	@iPlacementId			INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @Sort INT

	SELECT @Sort = ISNULL(MAX(iSort) + 1, 1)
	FROM dbo.m136_relInfo
	WHERE iEntityId = @iEntityId
		AND iRelationTypeId = @iRelationTypeId
	    

	INSERT INTO [dbo].m136_relInfo
		(iEntityId,
		iItemId,	                
		iProcessRelationTypeId,
		iRelationTypeId,
		iSort,
		iPlacementId)
	VALUES
		(@iEntityId,
		@iItemId,
		@iProcessRelationTypeId,
		@iRelationTypeId,
		@Sort,
		@iPlacementId)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertRelatedAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertRelatedAttachment] 
	@RelationTypeId		INT,
	@iItemId			INT,
	@strName			VARCHAR(300),
	@strDescription		VARCHAR(800),
	@iSize				INT,
	@strFileName		VARCHAR(200),
	@strContentType		VARCHAR(100),
	@strExtension		VARCHAR(100),
	@imgContent			[image]
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @MaxId INT;
	SELECT @MaxId = MAX(mtb.iItemId) FROM dbo.m136_tblBlob mtb; 
	SET @iItemId = (ISNULL(@MaxId, 0) + 1);
	SET IDENTITY_INSERT dbo.m136_tblBlob ON;
    INSERT INTO [dbo].m136_tblBlob
        (iItemId,
        iInformationTypeId,
        strName,
        strDescription,
        iSize,
        strFileName,
        strContentType,
        strExtension,
        imgContent,
        bInUse,
        dtmRegistered,
        iWidth,
        iHeight)
    VALUES
        (@iItemId,
        @RelationTypeId,
        @strName,
        @strDescription,
        @iSize,
        @strFileName,
        @strContentType,
        @strExtension,
        @imgContent,
        1,
        GETDATE(),
        0,
        0);
	SET IDENTITY_INSERT dbo.m136_tblBlob OFF;
	SELECT @iItemId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertImage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertImage] 
	@RelationTypeId	INT,
	@strName VARCHAR(300),
	@strDescription VARCHAR(800),
	@iSize INT,
	@strFileName VARCHAR(200),
	@strContentType VARCHAR(100),
	@strExtension VARCHAR(100),
	@ImgContent [image],
    @JsonImageContent NVARCHAR(MAX),
	@iHeight INT,
	@iWidth INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @MaxId INT, @iItemId INT;
	SELECT @MaxId = MAX(mtb.iItemId) FROM dbo.m136_tblBlob mtb; 
	SET @iItemId = (ISNULL(@MaxId, 0) + 1);
	SET IDENTITY_INSERT dbo.m136_tblBlob ON;
    INSERT INTO
        [dbo].m136_tblBlob
            (iItemId, iInformationTypeId, strName, strDescription, iSize, strFileName, strContentType, strExtension, imgContent, JsonImageContent, bInUse, dtmRegistered, iWidth, iHeight)
        VALUES
            (@iItemId, @RelationTypeId, @strName, @strDescription, @iSize, @strFileName, @strContentType, @strExtension, @ImgContent, @JsonImageContent, 1, GETDATE(), @iWidth, @iHeight);
	SET IDENTITY_INSERT dbo.m136_tblBlob OFF;
	SELECT @iItemId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetPositions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 14, 2015
-- Description:	Get positions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetPositions]
	@iPositionId INT,
	@strName VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT tp.* FROM dbo.tblPosition tp
	WHERE ((@iPositionId IS NULL) OR tp.iPositionId = @iPositionId)
	AND (@strName IS NULL OR @strName = '' OR (tp.strName LIKE '%' + @strName + '%'));
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetResponsibleTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 16, 2015
-- Description:	Get responsible types
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetResponsibleTypes]
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT lrt.* FROM dbo.luResponsibleTypes lrt WHERE lrt.Id = @Id OR @Id IS NULL;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetRelatedInfoById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: SEP 25, 2015
-- Description:	Get related information that includes internal attachments, internal images, related documents.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetRelatedInfoById] 
	@iEntityId			INT,
	@iRelationTypeId	INT,
	@iItemId			INT
AS
BEGIN
	SET NOCOUNT ON;

    SET NOCOUNT ON;
	SELECT r.iEntityId AS EntityId, 
		r.iItemId AS ItemId, 
		ISNULL(b.strName, d.strName) AS strName,
		ISNULL(r.iScaleDirId,0) AS iScaleDirId,
		ISNULL(r.iVJustifyId,0) AS iVJustifyId, 
		ISNULL(r.iHJustifyId,0) AS iHJustifyId, 
		ISNULL(r.iSize,0) AS Size,
		ISNULL(r.strCaption,'') AS strCaption, 
		ISNULL(r.iSort,0) AS iSort, 
		ISNULL(r.strURL,'') AS strUrl,
		ISNULL(r.iWidth,0) AS iWidth, 
		ISNULL(r.iHeight,0) AS iHeight, 
		ISNULL(r.iNewWindow,0) AS iNewWindow,
		b.strContentType AS strContentType, 
		CASE WHEN b.strExtension = '' THEN 'ukjent'
			ELSE b.strExtension
		END AS strExtension,
		ISNULL(r.iThumbWidth, 0) AS iThumbWidth, 
		ISNULL(r.iThumbHeight,0) AS iThumbHeight,
		r.iRelationTypeId, 
		r.iProcessrelationTypeId,
		b.imgContent, 
		b.strFileName, 
		ISNULL(b.strDescription, d.strDescription) AS strDescription
	FROM (SELECT *
		FROM [dbo].m136_relInfo
		WHERE iEntityId = @iEntityId
			AND iRelationTypeId = @iRelationTypeId                            
			AND iItemId = @iItemId) r
	LEFT JOIN [dbo].m136_tblBlob b ON r.iItemId = b.iItemId
		AND r.iRelationTypeId IN (20, 50, 55)
	LEFT JOIN dbo.m136_tblDocument d ON r.iItemId = d.iDocumentId
		AND r.iRelationTypeId = 136
		AND d.iLatestVersion = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetNewsWithPaging]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetNewsWithPaging]
	@PageIndex INT,
	@PageSize INT,
	@CategoryId AS INT,
	@ShowInModule INT
AS
BEGIN
	DECLARE @today Datetime;
	SET @today = GETDATE();
	WITH info AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY i.dtmPublish DESC),
			i.iInfoId,
			i.strTopic,
			i.strTitle,
			i.strIngress,
			i.strBody,
			i.dtmCreated,
			i.dtmPublish
		FROM 
			dbo.m123_tblInfo i
                INNER JOIN m123_relInfoCategory ri ON i.iInfoId = ri.iInfoId
		WHERE
			i.iDraft = 0
		AND	i.dtmPublish <= @today
		AND i.dtmExpire >= @today
		AND (ri.iCategoryId = @CategoryId
            OR ri.iCategoryId IN (SELECT iCategoryId FROM m123_tblCategory 
                                  WHERE iParentCategoryId = @CategoryId AND iShownIn & @ShowInModule = @ShowInModule))
	)
	SELECT 
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated,
		i.dtmPublish
	FROM 
		info i
	WHERE 
		(@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1))
	ORDER BY RowNumber;
	SELECT
		COUNT(*) AS Total
	FROM 
		dbo.m123_tblInfo i
	INNER JOIN 
			m123_relInfoCategory ri ON i.iInfoId = ri.iInfoId
	WHERE
		i.iDraft = 0
        AND	i.dtmPublish <= @today
        AND i.dtmExpire >= @today
        AND (ri.iCategoryId = @CategoryId
            OR ri.iCategoryId IN (SELECT iCategoryId FROM m123_tblCategory
                                  WHERE iParentCategoryId = @CategoryId AND iShownIn & @ShowInModule = @ShowInModule));
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentTypes]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @iCount INT;
	SELECT @iCount = COUNT(*) FROM dbo.m136_tblDocumentType mtdt WHERE mtdt.iDeleted = 0;
	
    -- Insert statements for procedure here
	SELECT dt.iDocumentTypeId
		, dt.strName
		, dt.strDescription
		, dt.iDeleted
		, dt.bIsProcess
		, dt.bInactive
		, dt.ViewMode
		, dt.[Type]
		, dt.HideFieldName
		, dt.HideFieldNumbering
		, case when (dt.iSort IS NULL OR dt.iSort = 0) THEN @iCount
		ELSE dt.iSort END AS iSort
		, dt.strIcon
	FROM [dbo].[m136_tblDocumentType] dt 
	WHERE dt.iDeleted = 0
		ORDER BY iSort ASC, LOWER(LTRIM(strName)) COLLATE SQL_Latin1_General_CP1_CI_AS ASC; --Latin1_General_CS_AS
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentTypeById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		em.lam.van.mai
-- Create date: July 09, 2015
-- Description:	Get a specified document type by Id
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDocumentTypeById]
	@DocumentTypeId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    SELECT  
        [iDocumentTypeId],
        [strName],
        [strDescription],
        [iDeleted],
        [Type],
        [HideFieldNumbering],
        [HideFieldName],
        [bIsProcess],
        [bInactive],
        [ViewMode],
        [strIcon],
        [iSort]                            
    FROM 
        [dbo].[m136_tblDocumentType] dt
    WHERE 
        [iDocumentTypeId] = @DocumentTypeId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentEventLog]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentEventLog]
	@iDocumentId INT,
	@PageSize INT,
	@PageIndex INT
AS
BEGIN
	SET NOCOUNT ON; 
	SELECT	elog.Id,
			eLog.DocumentId,
			eLog.[Version],
			eLog.EmployeeId,
			eLog.EventType,
			eLog.FirstName,
			eLog.LastName,
			eLog.[Description],
			eLog.EventTime,
			eLog.LoginName,
			ROW_NUMBER() OVER (ORDER BY elog.EventTime DESC) AS rownumber
	INTO	#Filters	
	FROM	tblEventlog eLog				
	WHERE	eLog.DocumentId = @iDocumentId
	SELECT	elog.Id,
			eLog.DocumentId,
			eLog.[Version],
			eLog.EmployeeId,
			eLog.EventType,
			eLog.FirstName,
			eLog.LastName,
			eLog.[Description],
			eLog.EventTime,
			eLog.LoginName
	FROM	#Filters eLog 
	WHERE	(@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetFieldTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetFieldTypes]
	-- Add the parameters for the stored procedure here
	@iFieldTypeId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT mtit.iInfoTypeId, mtit.strName, mtit.strDescription 
	FROM dbo.m136_tblInfoType mtit
	WHERE mtit.iInfoTypeId = @iFieldTypeId OR @iFieldTypeId IS NULL;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetFields]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetFields]
	-- Add the parameters for the stored procedure here
	@iFieldId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT [iMetaInfoTemplateRecordsId]
		, mitr.[strName]
		, mitr.[strDescription]
		, mitr.[iInfoTypeId]
		, mitr.[DefaultIntValue]
		, mitr.[DefaultTextValue]
		, mitr.[DefaultDateValue]
		, mitr.[iFlag]
		, mitr.[iDeleted]
		, mitr.iFieldProcessType	
		, mtit.strName AS TypeName
	FROM [dbo].[m136_tblMetaInfoTemplateRecords] mitr
	JOIN dbo.m136_tblInfoType mtit ON mtit.iInfoTypeId = mitr.iInfoTypeId
	WHERE mitr.iDeleted = 0
		AND (@iFieldId IS NULL OR mitr.iMetaInfoTemplateRecordsId = @iFieldId);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetCountries]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 14, 2015
-- Description:	Get country
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetCountries]
	@iCountryId INT,
	@strName VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT tc.* FROM dbo.tblCountry tc
    WHERE ((@iCountryId IS NULL) OR tc.iCountryId = @iCountryId)
    AND ((@strName IS NULL OR @strName = '') OR (tc.strName LIKE '%' + @strName + '%'));
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetChildCategoryFromParentCategory]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetChildCategoryFromParentCategory]
    @ParentCategoryId INT
AS
BEGIN
    SELECT
        iCategoryId,
        iParentCategoryId,
        strName,
        iShownIn,
        iAccess
    FROM
        m123_tblCategory
    WHERE
        iParentCategoryId = @ParentCategoryId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetChartJsonContent]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetChartJsonContent] 
	@ItemId INT
AS
BEGIN
    SELECT
        JsonContent
    FROM
        m136_FlowChart
    WHERE
        Id = @ItemId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_spDeleteNewsInCalendar]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m123_spDeleteNewsInCalendar]
	@iNewsId int,
	@iCalendarCategoryId int,
	@dtmStart datetime,
	@dtmStartTime datetime,
	@dtmEnd datetime,
	@dtmEndTime datetime
as
	delete from m123_tblNewsInCalendar
	where
		iNewsId = @iNewsId
	and	iCalendarCategoryId = @iCalendarCategoryId

	return
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangePrintOrientation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangePrintOrientation]
	@DocumentId AS INT,
	@Orientation AS INT
AS
BEGIN
    UPDATE m136_tblDocument
    SET iOrientation = @Orientation
    WHERE
        iDocumentId = @DocumentId
        AND iLatestVersion = 1
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnUserHasConfirmedDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnUserHasConfirmedDocument]
(
	@UserId INT,
    @EntityId INT
) RETURNS BIT
AS
BEGIN
	IF EXISTS (SELECT 1 FROM m136_tblConfirmRead WHERE iEntityId = @EntityId AND iEmployeeId = @UserId)
    BEGIN
        RETURN 1;
    END
    Return 0;
END
GO
/****** Object:  StoredProcedure [dbo].[m123_spUpdateNewsInCalendar]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m123_spUpdateNewsInCalendar]
	@iNewsId int,
	@iCalendarCategoryId int,
	@dtmStart datetime,
	@dtmStartTime datetime,
	@dtmEnd datetime,
	@dtmEndTime datetime
as
	update m123_tblNewsInCalendar
	set
		iNewsId = @iNewsId,
		iCalendarCategoryId = @iCalendarCategoryId,
		dtmStart = @dtmStart,
		dtmStartTime = @dtmStartTime,
		dtmEnd = @dtmEnd,
		dtmEndTime = @dtmEndTime
	where
		iNewsId = @iNewsId and
		iCalendarCategoryId = @iCalendarCategoryId

	return
GO
/****** Object:  StoredProcedure [dbo].[m123_spInsertNewsInCalendar]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m123_spInsertNewsInCalendar]
	@iNewsId int,
	@iCalendarCategoryId int,
	@dtmStart datetime,
	@dtmStartTime datetime,
	@dtmEnd datetime,
	@dtmEndTime datetime
as
	insert into m123_tblNewsInCalendar
	(	
		iNewsId,
		iCalendarCategoryId,
		dtmStart,
		dtmStartTime,
		dtmEnd,
		dtmEndTime
	)
	values
	(
		@iNewsId,
		@iCalendarCategoryId,
		@dtmStart,
		@dtmStartTime,
		@dtmEnd,
		@dtmEndTime
	)
	return
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetActiveNewsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetActiveNewsById]
	@InfoId INT
AS
BEGIN
	DECLARE @Today Datetime;
	SET @Today = GETDATE();
	SELECT
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated
	FROM 
		dbo.m123_tblInfo i
	WHERE
		i.iInfoId  = @InfoId
        AND i.iDraft = 0
        AND	i.dtmPublish <= @Today
        AND i.dtmExpire >= @Today
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetRoleMembers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 23, 2015
-- Description:	Get role members 
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetRoleMembers]
	@RoleId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT te.iEmployeeId
		, te.strFirstName
		, te.strLastName
		, te.strLoginName
		, td.strName AS strDepartment
		, te.strEmail
    FROM dbo.tblEmployee te 
		INNER JOIN dbo.relEmployeeSecGroup resg
			ON resg.iEmployeeId = te.iEmployeeId
		LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = te.iDepartmentId
	WHERE resg.iSecGroupId = @RoleId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetReadingConfirmation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Si.Manh.Nguyen
-- Create date: OCT 16. 2015
-- Description:	Get reading confrim of ducument
-- =============================================

CREATE PROCEDURE [dbo].[m136_be_GetReadingConfirmation]
 @EntityId int
AS
BEGIN
	SELECT	con.iEmployeeId,
			con.strEmployeeName, dep.strName as strDepartment, con.dtmConfirm
	FROM dbo.tblEmployee emp
		INNER JOIN dbo.tblDepartment dep 
			ON emp.iDepartmentId = dep.iDepartmentId 
		INNER JOIN m136_tblConfirmRead con 
			ON emp.iEmployeeId = con.iEmployeeId
	WHERE iEntityId= @EntityId
	ORDER BY strDepartment, strEmployeeName ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetEmployeesByFilter]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetEmployeesByFilter]
    @Text NVARCHAR(100),
	@iEmployeeId INT,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
    SET NOCOUNT ON;
    SELECT te.iEmployeeId, 
		te.iDepartmentId, 
		td.strName AS strDepartment,
		te.strFirstName, 
		te.strLastName, 
		te.strTitle, 
		CASE WHEN te.strAddress1 IS NULL OR te.strAddress1 = '' THEN 
				(CASE WHEN te.strAddress2 IS NULL OR te.strAddress2 = '' THEN 
						te.strAddress3 
					ELSE te.strAddress2 
				END)
			ELSE te.strAddress1 
		END AS [strAddress],
		te.iCountryId, 
		tc.strName AS strCountry,
		te.strPhoneWork, 
		te.strFax, 
		te.strEmail, 
		te.LastLogin,
		te.strExpDep,
		te.strEmployeeNo,
		ROW_NUMBER() OVER (ORDER BY te.strFirstName ASC, te.strLastName ASC) AS RowNumber 
	INTO #Filters
    FROM dbo.tblEmployee te
    LEFT JOIN dbo.tblCountry tc ON tc.iCountryId = te.iCountryId
    LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = te.iDepartmentId
    WHERE (@iEmployeeId IS NULL OR te.iEmployeeId = @iEmployeeId)
    AND ((@Text IS NULL OR @Text = '' OR te.strFirstName LIKE '%' + @Text + '%')
    OR (@Text IS NULL OR @Text = '' OR te.strLastName LIKE '%' + @Text + '%'))
    SELECT *  
    FROM #Filters
    WHERE (@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartmentReponsibles]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDepartmentReponsibles] 
	@iDepartmentId INT = 0,
	@iResponsibleType INT = 0,
	@PageSize INT = 0, -- If @PageSize = 0 we will get all available records.
	@PageIndex INT = 0
AS
BEGIN
	SET NOCOUNT ON;
    SELECT dr.Id,
		e.strLoginName,
		(e.strFirstName + ' ' + e.strLastName) AS strName,
		e.iEmployeeId,
		td.strName AS strDepartmentName,
		lrt.Name AS strResponsibleType,
		lrt.Id AS iResponsibleTypeId,
		dr.DepartmentId AS iDepartmentId,
		td2.strName AS DepartmentResponsibleName,
		e.strEmail,
		ROW_NUMBER() OVER (ORDER BY (e.strFirstName + ' ' + e.strLastName) ASC) AS rownumber
		INTO #Filters
    FROM dbo.DepartmentResponsibles dr
    INNER JOIN dbo.tblEmployee e ON e.iEmployeeId = dr.EmployeeId
    INNER JOIN dbo.tblDepartment td ON td.iDepartmentId = e.iDepartmentId
    LEFT JOIN dbo.tblDepartment td2 ON dr.DepartmentId = td2.iDepartmentId
    INNER JOIN dbo.luResponsibleTypes lrt ON lrt.Id = dr.ResponsibleTypeId
    WHERE (dr.DepartmentId = @iDepartmentId OR @iDepartmentId IS NULL)
		AND (dr.ResponsibleTypeId = @iResponsibleType OR @iResponsibleType IS NULL OR @iResponsibleType = 0);
    SELECT f.* FROM #Filters f 
    WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;            
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateEmployee]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateEmployee]
	@strEmployeeNo		VARCHAR(20),
	@iDepartmentId		INT,
	@strExpDep			VARCHAR(20),
	@strFirstName		VARCHAR(50),
	@strLastName		VARCHAR(50),
	@strTitle			VARCHAR(200),
	@strAddress			VARCHAR(150),
	@iCountryId			INT,
	@strPhoneHome		VARCHAR(30),
	@strPhoneInternal	VARCHAR(30),
	@strPhoneWork		VARCHAR(30),
	@strPhoneMobile		VARCHAR(30),
	@strBeeper			VARCHAR(20),
	@strCallNumber		VARCHAR(20),
	@strFax				VARCHAR(30),
	@strEmail			VARCHAR(100),
	@strLoginName		VARCHAR(100),
	@strLoginDomain		VARCHAR(200),
	@strPassword		VARCHAR(32),
	@strComment			VARCHAR(400)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxEmployeeId INT;
	SELECT @iMaxEmployeeId = MAX(te.iEmployeeId) FROM dbo.tblEmployee te;
	DECLARE @NewEmployeeId INT = ISNULL(@iMaxEmployeeId,0) + 1, @iParentCompanyId INT;
	SELECT @iParentCompanyId = dpt.iCompanyId FROM dbo.tblDepartment dpt WHERE dpt.iDepartmentId = @iDepartmentId;
	SET IDENTITY_INSERT dbo.tblEmployee ON;
    INSERT INTO dbo.tblEmployee
    (
        iEmployeeId,
        strEmployeeNo,
        iDepartmentId,
        strExpDep,
        dtmEmployed,
        strFirstName,
        strLastName,
        strTitle,
        strAddress1,
        strAddress2,
        strAddress3,
        iCountryId,
        strPhoneHome,
        strPhoneInternal,
        strPhoneWork,
        strPhoneMobile,
        strBeeper,
        strCallNumber,
        strFax,
        strEmail,
        strLoginName,
        strLoginDomain,
        strPassword,
        iCompanyId,
        bWizard,
        strComment,
        iImageId,
        bEmailConfirmed,
        strMailPassword,
        ADIdentifier,
        LastLogin,
        PreviousLogin
    )
    VALUES
    (
        @NewEmployeeId, -- iEmployeeId - int
        @strEmployeeNo, -- strEmployeeNo - varchar
        @iDepartmentId, -- iDepartmentId - int
        @strExpDep, -- strExpDep - varchar
        GETDATE(), -- dtmEmployed - smalldatetime
        @strFirstName, -- strFirstName - varchar
        @strLastName, -- strLastName - varchar
        @strTitle, -- strTitle - varchar
        @strAddress, -- strAddress1 - varchar
        '', -- strAddress2 - varchar
        '', -- strAddress3 - varchar
        @iCountryId, -- iCountryId - int
        @strPhoneHome, -- strPhoneHome - varchar
        @strPhoneInternal, -- strPhoneInternal - varchar
        @strPhoneWork, -- strPhoneWork - varchar
        @strPhoneMobile, -- strPhoneMobile - varchar
        @strBeeper, -- strBeeper - varchar
        @strCallNumber, -- strCallNumber - varchar
        @strFax, -- strFax - varchar
        @strEmail, -- strEmail - varchar
        @strLoginName, -- strLoginName - varchar
        @strLoginDomain, -- strLoginDomain - varchar
        @strPassword, -- strPassword - varchar
        @iParentCompanyId, -- iCompanyId - int
        0, -- bWizard - bit
        ISNULL(@strComment, ''), -- strComment - varchar
        0, -- iImageId - int
        0, -- bEmailConfirmed - bit
        '', -- strMailPassword - varchar
        '00000000-0000-0000-0000-000000000000', -- ADIdentifier - uniqueidentifier
        NULL, -- LastLogin - datetime
        NULL -- PreviousLogin - datetime
    );
    SET IDENTITY_INSERT dbo.tblEmployee OFF;
	SELECT @NewEmployeeId;
END
GO
/****** Object:  StoredProcedure [Deviation].[HandleExpiredUnAcceptedDeviation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[HandleExpiredUnAcceptedDeviation]
	@DeviationAcceptancePeriod INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @Deviations TABLE
	(
		DeviationId INT PRIMARY KEY,
		HandledByDepartment INT,
		Title NVARCHAR(400),
		RegisterDate DATETIME,
		DepartmentId INT,
		DepartmentName VARCHAR(80),
		Email VARCHAR(100),
		SecGroupId INT,
		AnonymousSecGroupId INT,
		RegisteredByUser INT
	);
	WITH deviations AS
	(
		SELECT 
			d.DeviationId, d.HandledByDepartment, d.Title, d.RegisterDate, d.HandledByDepartment AS DepartmentId, de.strName AS DepartmentName, d.RegisteredByUser,
			c.SecGroupId, c.AnonymousSecGroupId,
			(SELECT COALESCE(strEmail + ',', '')
			 FROM dbo.tblEmployee 
			 WHERE iEmployeeId IN (SELECT iEmployeeId 
								   FROM dbo.tblEmployee e LEFT JOIN dbo.DepartmentResponsibles dr ON dr.EmployeeId = e.iEmployeeId 
								   WHERE dr.DepartmentId = d.HandledByDepartment)
			 FOR XML PATH ('')) AS Email
		FROM 
			[Deviation].[Deviation] d
		LEFT JOIN 
			[dbo].[tblDepartment] de ON de.iDepartmentId = d.HandledByDepartment
		LEFT JOIN
			[Deviation].[Category] c ON c.CategoryId = d.CategoryId
		WHERE
			GETDATE() > DATEADD(day,@DeviationAcceptancePeriod,d.AssignedDeparementDate)
		AND
			d.OwnerId IS NULL
	)
	INSERT INTO @Deviations
	SELECT *
	FROM deviations
	UPDATE [Deviation].[Deviation]
	SET HandledByDepartment = [Deviation].[fGetHigherClosestDepartmentResponsible](HandledByDepartment), AssignedDeparementDate = GETDATE()
	WHERE DeviationId IN (SELECT DeviationId FROM @Deviations)
	SELECT
		*
	FROM 
		@Deviations
	SELECT 
		d.DeviationId, d.HandledByDepartment, d.Title, d.RegisterDate, d.HandledByDepartment AS DepartmentId, de.strName AS DepartmentName, d.RegisteredByUser,
		c.SecGroupId, c.AnonymousSecGroupId,
		(SELECT COALESCE(strEmail + ',', '')
			 FROM dbo.tblEmployee 
			 WHERE iEmployeeId IN (SELECT iEmployeeId 
								   FROM dbo.tblEmployee e LEFT JOIN dbo.DepartmentResponsibles dr ON dr.EmployeeId = e.iEmployeeId 
								   WHERE dr.DepartmentId = d.HandledByDepartment)
			 FOR XML PATH ('')) AS Email
	FROM 
		[Deviation].[Deviation] d
	LEFT JOIN 
			[dbo].[tblDepartment] de ON de.iDepartmentId = d.HandledByDepartment
	LEFT JOIN
			[Deviation].[Category] c ON c.CategoryId = d.CategoryId
	WHERE
		d.DeviationId IN (SELECT DeviationId FROM @Deviations)
END
GO
/****** Object:  StoredProcedure [Deviation].[GetUnassignedDeviations]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetUnassignedDeviations]
	@iUserId int = 0,
	@iState int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT dr.DepartmentId INTO #LeadersOrCaseworkers FROM dbo.DepartmentResponsibles dr WHERE dr.EmployeeId = @iUserId;
	SELECT d.DeviationId, 
		d.Title, 
		d.[Description], 
		d.DueDate, 
		d.[State], 
		d.StatusId,
		d.[Priority], 
		d.CategoryId,
		c.Name AS CategoryName,
		d.RegisterDate,
		d.RegisteredByDepartment,
		d.HandledByDepartment,
		d.OwnerId,
		c.CategoryType AS [Type],
		(ISNULL(te.strFirstName, '') + ' ' + ISNULL(te.strLastName, '')) AS RegisteredName,
		(ISNULL(te2.strFirstName, '') + ' ' + ISNULL(te2.strLastName, '')) AS OwnerName,
		te2.strEmail AS OwnerEmail,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,1) AS Tasks,
		[Deviation].[fCountCompletedActions](d.DeviationId,8,2) AS Actions,
		[Deviation].[fGetDeviationLogDate](d.DeviationId) AS Updated,
		td.strName AS RegisteredByDepartmentName,
		td2.strName AS HandledByDepartmentName,
		row_number() OVER (ORDER BY d.RegisterDate DESC) AS rownumber
	INTO #Filters 
	FROM Deviation.Deviation d 
	INNER JOIN Deviation.Category c ON c.CategoryId = d.CategoryId
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = d.RegisteredByUser
	LEFT JOIN dbo.tblEmployee te2 ON te2.iEmployeeId = d.OwnerId
	LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = d.RegisteredByDepartment
	LEFT JOIN dbo.tblDepartment td2 ON td2.iDepartmentId = d.HandledByDepartment
	WHERE d.HandledByDepartment IN (SELECT loc.DepartmentId FROM #LeadersOrCaseworkers loc)
	AND (d.State = @iState OR @iState IS NULL)
	AND d.IsDeleted = 0;
	SELECT f.* FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #LeadersOrCaseworkers;
	DROP TABLE #Filters;                                 
END
GO
/****** Object:  Table [dbo].[MessageTemplateLanguage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MessageTemplateLanguage](
	[MessageTemplateLanguageId] [int] IDENTITY(1,1) NOT NULL,
	[Language] [int] NULL,
	[TemplateId] [int] NULL,
	[Subject] [nvarchar](100) NULL,
	[Body] [ntext] NULL,
 CONSTRAINT [MessageTemplateLanguage_Framework_PK] PRIMARY KEY CLUSTERED 
(
	[MessageTemplateLanguageId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Risk].[Analysis]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[Analysis](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AreaId] [int] NOT NULL,
	[Title] [nvarchar](250) NOT NULL,
	[Target] [nvarchar](500) NULL,
	[Background] [nvarchar](500) NULL,
	[Description] [nvarchar](1000) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedDate] [datetime] NULL,
	[Status] [tinyint] NOT NULL,
	[ResultsLocked] [bit] NOT NULL,
	[Conclusion] [nvarchar](max) NULL,
 CONSTRAINT [PK_Risk_Analysis] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Risk].[SearchAnalysises]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[SearchAnalysises] 
	@AnalysisId INT,
    @Text [nvarchar](255),
	@State INT,
	@AreaId INT,
	@RegisteredBy INT,
	@DateFilteredType INT,
	@FromDate [datetime],
	@ToDate [datetime]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT a.Id, a.AreaId, a2.Name AS Area, a.Title, a.[Target], a.Background, 
		a.[Description], a.CreatedBy, (te.strFirstName + ' ' + te.strLastName) AS CreatedName
		, a.CreateDate AS CreatedDate, a.UpdatedBy, (te2.strFirstName + ' ' + te2.strLastName) AS UpdatedName,
		a.UpdatedDate, a.[Status], a.ResultsLocked, a.Conclusion 
	FROM Risk.Analysis a
	JOIN Risk.Areas a2 ON a2.Id = a.AreaId
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = a.CreatedBy
	LEFT JOIN dbo.tblEmployee te2 ON te2.iEmployeeId = a.UpdatedBy
	WHERE (a.Id = @AnalysisId OR @AnalysisId IS NULL)
	AND (a.Title LIKE '%' + @Text + '%' OR a.[Description] LIKE '%' + @Text + '%' OR @Text IS NULL)
	AND (a.[Status] = @State OR @State IS NULL)
	AND (a.AreaId = @AreaId OR @AreaId IS NULL)
	AND (a.CreatedBy = @RegisteredBy OR @RegisteredBy IS NULL)
	AND ((((CASE  @DateFilteredType
		WHEN  1 THEN a.CreateDate 
		WHEN 2 THEN a.UpdatedDate 
		END) <= @ToDate) AND (@FromDate IS NULL AND @ToDate IS NOT NULL)
		) OR (
		(@FromDate IS NOT NULL AND @ToDate IS NOT NULL AND (CASE  @DateFilteredType
		WHEN  1 THEN a.CreateDate 
		WHEN 2 THEN a.UpdatedDate 
		END) BETWEEN @FromDate AND @ToDate)
		) OR (
		@FromDate IS NOT NULL AND @ToDate IS NULL AND (CASE @DateFilteredType
		WHEN  1 THEN a.CreateDate 
		WHEN 2 THEN a.UpdatedDate 
		END) >= @FromDate		
		) OR (@FromDate IS NULL AND @ToDate IS NULL));
END
GO
/****** Object:  StoredProcedure [Risk].[GetWorkingAnalysises]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetWorkingAnalysises] 
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON;
	
    SELECT a.Id, a.AreaId, ar.Name AS Area, 
		a.Title, a.[Target], a.Background, a.[Description], 
		a.CreatedBy, a.CreateDate AS CreatedDate, a.UpdatedBy, a.UpdatedDate, 
		a.[Status], a.ResultsLocked, a.Conclusion 
    FROM Risk.Analysis a
		JOIN Risk.Areas ar ON ar.Id = a.AreaId
    WHERE (a.CreatedBy = @UserId OR @UserId IN (SELECT am.EmployeeId FROM Risk.AnalysisMembers am WHERE am.AnalysisId = a.Id))
		AND a.[Status] = 1;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[GetAnalysisById] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT a.Id, a.AreaId, ar.Name AS Area, a.Title, a.[Target], 
    a.Background, a.[Description], a.CreatedBy, (te.strFirstName + ' ' + te.strLastName) AS CreatedName, 
    a.CreateDate AS CreatedDate, a.UpdatedBy, (te2.strFirstName + ' ' + te2.strLastName) AS UpdatedName, a.UpdatedDate, 
    a.[Status], a.ResultsLocked, a.Conclusion
    FROM Risk.Analysis a 
    JOIN Risk.Areas ar ON ar.Id = a.AreaId
    LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = a.CreatedBy
	LEFT JOIN dbo.tblEmployee te2 ON te2.iEmployeeId = a.UpdatedBy
    WHERE a.Id = @Id;
END
GO
/****** Object:  StoredProcedure [dbo].[GetNumberOfOkReadingListsForUsersOfRole]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNumberOfOkReadingListsForUsersOfRole]
	@RoleId INT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    SELECT
        e.iEmployeeId AS UserId, 
        r.ReadingListId AS ReadingListId, 
        r.Name AS ReadingListName, 
        dbo.AreDocumentsInReadingListConfirmedByUser(e.iEmployeeId, r.ReadingListId) AS IsOK
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId AND rlr.ReaderTypeId = 3 --Role reader
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iSecGroupId
            INNER JOIN tblEmployee e ON esg.iEmployeeId = e.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND sg.iSecGroupId = @RoleId
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
END
GO
/****** Object:  StoredProcedure [dbo].[GetReadingListUserRoleForReport]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetReadingListUserRoleForReport]
    @RoleId INT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    SELECT
        e.iEmployeeId AS UserId,
        e.strFirstName + ' ' + e.strLastName AS EmployeeName,
        d.strName AS DepartmentName,
        COUNT(DISTINCT r.ReadingListId) AS NumberOfReadingLists,
        COUNT(DISTINCT doc.iEntityId) AS NumberOfDocuments,
        COUNT(DISTINCT cr.iEntityId) AS NumberOfOKDocuments
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 3
            INNER JOIN tblSecGroup sg ON rlr.ReaderId = sg.iSecGroupId 
            INNER JOIN relEmployeeSecGroup esg ON sg.iSecGroupId = esg.iSecGroupId
            INNER JOIN tblEmployee e ON esg.iEmployeeId = e.iEmployeeId
            INNER JOIN tblDepartment d ON e.iDepartmentId = d.iDepartmentId
            LEFT JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId AND cr.iEmployeeId = e.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND sg.iSecgroupId = @RoleId
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
    GROUP BY e.iEmployeeId, d.strName, e.strFirstName + ' ' + e.strLastName
    EXEC GetNumberOfOkReadingListsForUsersOfRole @RoleId, @ReadingListIds
END
GO
/****** Object:  StoredProcedure [dbo].[GetReadingListDocumentsOfUser]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetReadingListDocumentsOfUser]
    @UserId INT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @UserDepartmentId TABLE(Id INT);
    DECLARE @UserRoleId TABLE(Id INT);
    INSERT INTO @UserDepartmentId(Id)
    SELECT
        iDepartmentId
    FROM
        tblEmployee
    WHERE
        iEmployeeId = @UserId
    INSERT INTO @UserRoleId(Id)
    SELECT
        iSecGroupId
    FROM
        relEmployeeSecGroup
    WHERE
        iEmployeeId = @UserId
    SELECT DISTINCT 
        rl.Name AS ReadingListName,
        d.iDocumentId AS DocumentId,
        d.strName DocumentName,
        d.iVersion DocumentVersion,
        (SELECT TOP 1 dtmConfirm FROM m136_tblConfirmRead WHERE iEntityId = d.iEntityId AND iEmployeeId = @UserId) AS ConfirmationDate
    FROM 
        ReadingList rl 
            INNER JOIN ReadingListReaders rlr ON rl.ReadingListId = rlr.ReadingListId 
            INNER JOIN ReadingListDocuments rld ON rl.ReadingListId = rld.ReadingListId 
            INNER JOIN m136_tblDocument d ON rld.DocumentId = d.iDocumentId 
    WHERE 
        rl.IsDeleted = 0 
        AND d.iLatestApproved = 1 
        AND ReaderTypeId IN (1,2,3) 
        AND 
        (
            ReaderId = @UserId 
            OR ReaderId IN (SELECT Id FROM @UserDepartmentId) 
            OR ReaderId IN (SELECT Id FROM @UserRoleId)
        )
        AND rl.ReadingListId IN (SELECT Id FROM @ReadingListIds)
END
GO
/****** Object:  StoredProcedure [dbo].[be_GetReadingListDetailsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetReadingListDetailsById]
    @Id INT
AS
BEGIN
    SELECT
        ReadingListId,
        Name,
        Description,
        IsInactive
    FROM
        ReadingList
    WHERE
        ReadingListId = @Id
        
    SELECT
        rld.ReadingListDocumentId,
        rld.ReadingListId,
        rld.DocumentId,
        d.strName AS DocumentName,
        dbo.fn136_GetParentPathEx(d.iHandbookId) AS DocumentPath
    FROM
        ReadingListDocuments rld
            JOIN m136_tblDocument d ON rld.DocumentId = d.iDocumentId
    WHERE
        d.iLatestVersion = 1
        AND ReadingListId = @Id
    
    SELECT
        ReadingListReaderId,
        ReadingListId,
        ReaderTypeId,
        CASE
            WHEN ReaderTypeId = 1 THEN (SELECT strFirstName + ' ' + strLastName FROM tblEmployee WHERE iEmployeeId = ReaderId)
            WHEN ReaderTypeId = 2 THEN (SELECT strName FROM tblDepartment WHERE iDepartmentId = ReaderId)
            WHEN ReaderTypeId = 3 THEN (SELECT strName FROM tblSecGroup WHERE iSecGroupId = ReaderId)
        END AS ReaderName,
        ReaderId
    FROM
        ReadingListReaders
    WHERE
        ReadingListId = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m147_spGetEtype]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m147_spGetEtype]
(
	@eTypeId int = 0
)
AS
BEGIN
	IF @eTypeId = 0
		SELECT * FROM m147_tblEtype
	ELSE
		SELECT * FROM m147_tblEtype WHERE eTypeId = @eTypeId
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnIsAwaitingApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[m136_fnIsAwaitingApproval](
@iDocumentId int
)
returns bit
as
begin

	declare @return bit

	if exists(select 1 from m136_tblDocument d where d.iDocumentId = @iDocumentId
			and d.iDeleted = 0 and d.iApproved = 0
			and d.iVersion = (
				select max(iVersion) from m136_tblDocument where iDocumentId = d.iDocumentId and iDeleted = 0
			))
	begin
		select @return = 1
	end
	else
	begin
		select @return = 0
	end

	return @return
end
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsOnTitleByTotalValue]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Search Documents Based On Total Value
-- =============================================
CREATE PROCEDURE [dbo].[m136_SearchDocumentsOnTitleByTotalValue] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@searchWord varchar(1024) = '',
	@count int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	                    
    select top (@count)  
		r.iDocumentId, r.iVersion, d.iEntityId, d.strName, d.iDocumentTypeId, d.UrlOrFileName, 
		d.iHandbookId, d.UrlOrFileProperties, dt.ViewMode,
        ISNULL(dt.[Type], 0) as [Type], dt.strName as DocumentTemplateName, d.iLevelType, 
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
    from (
            select iDocumentId, max(iVersion) as iVersion, iHandbookId, iApproved
            from m136_tblDocument
            where iDeleted = 0 and iApproved in (1,4) and iDraft = 0
            group by iDocumentId, iHandbookId, iApproved
        ) r join m136_tblDocument d on (r.iDocumentId = d.iDocumentId and r.iVersion = d.iVersion)
		join m136_tblDocumentType dt on d.iDocumentTypeId = dt.iDocumentTypeId
		right join m136x_tblTextIndex RichTextInfo on d.iEntityId=RichTextInfo.iEntityId 
			inner join CONTAINSTABLE (m136x_tblTextIndex, totalvalue, @searchWord) AS KEY_TBL
			on RichTextInfo.iEntityId=KEY_TBL.[KEY]
    where 
		r.iApproved = 1
		AND (
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, r.iHandbookId) & 0x01)>0
		or r.iDocumentId in (select iDocumentId from m136_relVirtualRelation where 
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0)
		)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateDocumentTitle]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 09.12.2013
-- Description:	Update Document Title
-- =============================================
CREATE PROCEDURE [dbo].[m136_UpdateDocumentTitle] 
	-- Add the parameters for the stored procedure here
	@iEntityId int = 0,
	@strTitle nvarchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	UPDATE [dbo].[m136_tblDocument]
        SET strName = @strTitle
        WHERE iEntityId = @iEntityId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_EditNewsCategory]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_EditNewsCategory]
    @ParentCategoryId INT,
    @NewsCategoryId INT,
    @Name VARCHAR(100),
    @Description VARCHAR(1000),
    @Access TINYINT,
    @ShownIn TINYINT
AS
BEGIN
    UPDATE
        m123_tblCategory
    SET
        strName = @Name,
        strDescription = @Description,
        iAccess = @Access,
        iShownIn = @ShownIn
    WHERE
        iCategoryId = @NewsCategoryId
        AND iParentCategoryId = @ParentCategoryId
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnGetVersionStatus]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[m136_fnGetVersionStatus] (@iEntityId AS int, @iDocumentId as int, @iVersion as int, @dtmPublish as datetime, @dtmPublishUntil as datetime, @dtmNow as datetime,  @iDraft as int, @iApproved as int)
RETURNS int AS  
BEGIN 
declare @iStatus as int
declare @iLastVersion as int, @dtmLastPublishDate as datetime, @iLastApproved as int
declare @iValidVersion as int

select @iStatus = 0

select @iStatus = @iStatus | 1 where @iDraft != 0								-- draft
select @iStatus = @iStatus | 2 where @iApproved = 1							-- approved
select @iStatus = @iStatus | 4 where @iApproved = 3							-- hearing
select @iStatus = @iStatus | 16 where @dtmPublish < @dtmNow AND @dtmPublishUntil > @dtmNow	-- valid daterange now

-- get info about last document
select @iLastVersion = d.iVersion, @dtmLastPublishDate = d.dtmPublish, @iLastApproved = d.iApproved
from m136_tblDocument d where iDocumentId=@iDocumentId AND iVersion = (select max(iVersion) from m136_tblDocument where iDocumentId = @iDocumentId)

select @iStatus = @iStatus | 8 where @iLastApproved != 1							-- document beeing revised

select @iValidVersion = max(iVersion) 
from m136_tblDocument d where iDocumentId = @iDocumentId AND dtmPublish <= @dtmNow AND iApproved = 1

select @iStatus = @iStatus | 32 where @iValidVersion = @iVersion						-- the last approved version?
select @iStatus = @iStatus | 64 where @iLastVersion = @iVersion						-- the last version?

select @iStatus = @iStatus | 128 where @iLastApproved = 4

return @iStatus

END
GO
/****** Object:  StoredProcedure [dbo].[m136_spReportDocumentsPerFolderPerStatus]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m136_spReportDocumentsPerFolderPerStatus]
@iParentHandbookId int = 0,
@iSecurityId int = 0
as
begin
/* 
	This stored procedure creates a result set which returns the count of documents with various status.
	Important to note: Rows with iLevel = 1 contains the accumelated sum of documents recursivly for all sub folders beneath this folder 
	And extra row is added to the result set for all iLevel = 1 rows. This row is manipulated so I get iPriority = 2 in the result set.
	All other rows gets iPriority = iLevel. This is so you can separate the two rows, i.e that is the accumulated row from the regular row 
	of the rot level item. In addition the result set will be sorted on iMin, iPriority.
	So the result set will equal the menu listing of the items.
	
*/

declare @iHandbookId int
declare @strName nvarchar(200)
declare @iMin int
declare @iMax int
declare @min int
declare @max int

-- Do we have a specified root or do we assume we will list everything?
if ISNULL(@iParentHandbookId,0) = 0
begin
	select @min=min(iMin) from m136_tblHandbook
	select @max = max(iMax) from m136_tblHandbook
end
else
begin
	select @min=iMin, @max=iMax from m136_tblHandbook where iHandbookId = @iParentHandbookId
end 

/* Declare some temporary tables */
declare @allDocumentsWithStatus table(iEntityId int, iHandbookId int, iDocumentId int, strName nvarchar(200), iVersion int, iApproved int, iDraft int, iStatus int)
declare @allApprovedDocuments table(iDocumentId int, iVersion int)

/* Find all approved documents and latest version */
insert into @allApprovedDocuments(iDocumentId, iVersion)
select doc.iDocumentId, doc.iVersion from m136_tblDocument doc 
join (
select iDocumentId, max(iVersion) as iVersion from m136_tblDocument where iApproved in (1,4) and iHandbookId in (select iHandbookId from m136_tblHandbook where iMin >= @min and iMax <= @max)
and (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0
	group by iDocumentId
) result
on (doc.iDocumentId = result.iDocumentId and doc.iVersion = result.iVersion)
where doc.iApproved = 1
order by doc.iDocumentId 


/* Populate temporary table with status for each document */
insert into @allDocumentsWithStatus(iEntityId, iHandbookId, iDocumentId, strName, iVersion, iApproved, iDraft, iStatus)
select d.iEntityId, d.iHandbookId, d.iDocumentId, d.strName, d.iVersion, d.iApproved, d.iDraft, dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus  
from m136_tblDocument d join @allApprovedDocuments t on (t.iDocumentId = d.iDocumentId and t.iVersion = d.iVersion)
where d.iDeleted = 0 and d.iHandbookId in (select iHandbookId from m136_tblHandbook where iMin >= @min and iMax <= @max)
and (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) & 0x15) > 0

/* Create temporary table to hold the end result */
declare @resultTable table(iHandbookId int, strName nvarchar(200), iLevel int, iMin int, iMax int, ValidDocuments int, InvalidDocuments int, InvalidDocumentsUnderRevision int, TotalDocuments int, Priority int, Folders int)

/* Populate result table with most data including number of valid and invalid documents */
insert into @resultTable(iHandbookId, strName, iLevel, iMin, iMax, TotalDocuments, Priority, Folders, ValidDocuments, InvalidDocuments, InvalidDocumentsUnderRevision)
select s.iHandbookId, h.strName, h.iLevel, h.iMin, h.iMax, 0, 0, 0, sum(dbo.m136_fnIsDocumentValid(s.iStatus))  as ValidDocuments, 
sum(dbo.m136_fnIsDocumentInvalid(s.iStatus, s.iDraft, s.iApproved, s.iDocumentId, s.iVersion)) as InvalidDocuments,
sum(dbo.m136_fnIsDocumentInvalidAndUnderRevision(s.iStatus, s.iDraft, s.iApproved, s.iDocumentId, s.iVersion)) as InvalidDocumentsUnderRevision
from @allDocumentsWithStatus s join
m136_tblHandbook h on s.iHandbookId = h.iHandbookId 
where (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, s.iHandbookId) & 0x15) > 0
group by s.iHandbookId, h.strName, h.iLevel, h.iMin, h.iMax

/* Populate table with all handbooks missing from the result set based on documents */
insert into @resultTable (iHandbookId, strName, iLevel, iMin, iMax, TotalDocuments, Priority, ValidDocuments, InvalidDocuments, InvalidDocumentsUnderRevision)
	select iHandbookId, strName, iLevel, iMin, iMax, 0, 0, 0, 0, 0 from m136_tblHandbook where
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0 and iHandbookId not in (select iHandbookId from @resultTable)
	and iHandbookId in (select iHandbookId from m136_tblHandbook where iMin >= @min and iMax <= @max)
		and (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0

/* Set priority - This is only a helper column for reports. We will insert an extra row for all items with 
level one. This extra row will have priority 1 and the original row will get priority 2
The row with priority 1 will contain a summary of all folders, valid documents, invalid documents etc recursively */
update @resultTable set Priority = case iLevel when 1 then 2 else iLevel end

/* Helper table since we will add more rows to the @resultTable, this helper table is to avoid 
problems with a cursor on the table we will be modifying */
declare @tmpResultTable table(iHandbookId int, strName nvarchar(200), iMin int, iMax int)

/* Populate temp table with all handbooks */
insert into @tmpResultTable(iHandbookId, strName, iMin, iMax) 
	select iHandbookId, strName, iMin, iMax from @resultTable

/* Update resultable with countings of folders */
declare cur cursor for
	select iHandbookId from @tmpResultTable
open cur 
fetch next from cur into @iHandbookId
while @@fetch_status=0
begin
	update @resultTable set Folders = (select count(*) from m136_tblHandbook where iParentHandbookId = @iHandbookId and iDeleted = 0 and
			(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, @iHandbookId) & 0x15) > 0) where iHandbookId = @iHandbookId 
		and Priority > 1
fetch next from cur into @iHandbookId
end
close cur 
deallocate cur

/* Remove all entries in this helper table and repopulate it with handbooks for level 1 only */
delete from @tmpResultTable
insert into @tmpResultTable(iHandbookId, strName, iMin, iMax) 
	select iHandbookId, strName, iMin, iMax from @resultTable where iLevel = 1

-- Create summary columns - Update Priorty 1 records with recursive numbers
declare cur cursor for
	select iHandbookId, strName, iMin, iMax from @tmpResultTable
open cur
fetch next from cur into @iHandbookId, @strName, @iMin, @iMax
while @@fetch_status=0
begin
	insert into @resultTable(iHandbookId, strName, iMin, iMax, iLevel, ValidDocuments, InvalidDocuments, InvalidDocumentsUnderRevision, TotalDocuments, Priority)
		values(@iHandbookId, @strName, @iMin, @iMax, 1, 0, 0, 0, 0, 1)
	update @resultTable set 
		ValidDocuments = (select sum(ValidDocuments) from @resultTable where iMin >= @iMin and iMax <= @iMax),
		InvalidDocuments = (select sum(InvalidDocuments) from @resultTable where iMin >= @iMin and iMax <= @iMax),
		InvalidDocumentsUnderRevision = (select sum(InvalidDocumentsUnderRevision) from @resultTable where iMin >= @iMin and iMax <= @iMax),
		Folders = (select count(*) from m136_tblHandbook where iDeleted = 0 and iMin>@iMin and iMax < @iMax and (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x15) > 0)
		where iHandbookId = @iHandbookId and Priority = 1

fetch next from cur into @iHandbookId, @strName, @iMin, @iMax
end
close cur
deallocate cur

-- Update the total column with final values
update @resultTable set TotalDocuments = ValidDocuments + InvalidDocuments + InvalidDocumentsUnderRevision

-- Return the result
select * from @resultTable order by iMin, Priority
end
GO
/****** Object:  StoredProcedure [dbo].[m136_spGetPersonChapterConfirmsSums]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_spGetPersonChapterConfirmsSums] 
(
	@iSecurityId int = 0,
	@iHandbookId int = 0,
	@fromDate datetime = null,
	@toDate datetime = null,
	@iEmployeeId int = 0,
	@iLatestVersions bit = 1,
	@iUseRegionLeader int = 0,
	@iDepartmentLeaderPositionId int = 0,
	@recursive bit = 0
)
AS
if @toDate<>null
begin
	set @toDate = dateadd(day, 1, @toDate)
END
declare @iMin int
declare @iMax int
if @recursive != 0 and @iHandbookId > 0
begin
	select @iMin = iMin, @iMax = iMax from m136_tblHandbook where iHandbookId = @iHandbookId
end
else
begin
	select @iMin = -1, @iMax = -1
end
declare @iRegionTable table(iDepartmentId int not null)
if @iUseRegionLeader=1
begin
	insert into @iRegionTable select * FROM [dbo].[m136_getRegionleaderDepartmentIds](@iSecurityId)
end 
declare @empTable table(iEmployeeId int null)
--Seg selv
if @iEmployeeId=@iSecurityId
	insert into @empTable(iEmployeeId) SELECT @iEmployeeId
--Regionleder
if (SELECT COUNT(iEmployeeId) FROM @empTable)=0 AND @iUseRegionLeader<>0
	begin
		insert into @empTable
			SELECT iEmployeeId FROM tblEmployee where iDepartmentId in (select iDepartmentId from @iRegionTable) AND iEmployeeId=@iEmployeeId
	end
--Modul-administrator
if (SELECT COUNT(iEmployeeId) FROM @empTable)=0
 	begin
		if (dbo.fnSecurityGetPermission(136, 460, @iSecurityId,0)&2)=2
		begin
			insert into @emptable select @iEmployeeId
		end
	end
--Kan lese kvitteringer pÃ¥ egen org-enhet
if (SELECT COUNT(iEmployeeId) FROM @empTable)=0
 	begin
		if (dbo.fnSecurityGetPermission(136, 460, @iSecurityId,0)&4)=4
		begin
			insert into @emptable
			select iEmployeeId from tblEmployee where iDepartmentId in (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId) AND iEmployeeId=@iEmployeeId
		end
	end
if (SELECT COUNT(iEmployeeId) FROM @empTable)>0
begin
--Mappeutdrag:
declare @bookTable table(iHandbookId int not null, strChapterName varchar(400) null, strParentPath varchar(1000) null, confirmPercent float null, iMin int )
insert into @bookTable
select
	iHandbookId,
	strName,
	REPLACE(dbo.fn136_GetParentPath(iHandbookId),',','/'),
	dbo.m136_fnPersonHandbookConfirmPercentage(@iEmployeeId, iHandbookId,@fromDate, @toDate),
	iMin
from
	m136_tblHandbook
where
	iHandbookId = @iHandbookId
	AND iDeleted=0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0 
if @iMin > -1 and @iMax > -1
begin
	insert into @bookTable
	select
		iHandbookId,
		strName,
		REPLACE(dbo.fn136_GetParentPath(iHandbookId),',','/'),
		dbo.m136_fnPersonHandbookConfirmPercentage(@iEmployeeId, iHandbookId,@fromDate, @toDate),
		iMin
	from
		m136_tblHandbook
	where
		iDeleted=0
		AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0 
		and iMin > @iMin and iMax < @iMax
end
--Dokumentutdrag:
declare @docTable table(iEntityId int null, iDocumentId int null, strName varchar(200) null, iVersion int null, iHandbookId int null, iSort int null, iVirt int not null)
insert into @docTable
select	doc.iEntityId,
	doc.iDocumentId,
	doc.strName,
	doc.iVersion,
	doc.iHandbookId,
	doc.iSort,
	0
from
	@bookTable book
	right join m136_tblDocument doc on doc.iHandbookId=book.iHandbookId
WHERE
	doc.iHandbookId=book.iHandbookId
	AND iApproved=1
	AND doc.iDeleted=0
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4)
	)
--virtual
insert into @docTable
select 	doc.iEntityId,
	virt.iDocumentId,
	doc.strName,
	doc.iVersion,
	virt.iHandbookId,
	virt.iSort,
	1
FROM
	m136_relVirtualRelation virt
	left join m136_tblDocument doc on doc.iDocumentId=virt.iDocumentId
	right join @bookTable book on book.iHandbookId=virt.iHandbookId
WHERE
	doc.iApproved=1
	AND doc.iDeleted=0
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4)
	)
	SELECT
		doc.iDocumentId,
		doc.iEntityId,
		doc.strName,
		doc.iVersion,
		doc.iHandbookId,
		book.strChapterName,
		book.strParentPath,
		book.confirmPercent,
		case when (isdate(cr.dtmConfirm)=1 AND cr.iEmployeeId=@iEmployeeId) then 1 else 0 end as iReadStatus,
		cr.dtmConfirm,
		doc.iVirt,
		dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, 
			details.dtmPublish, details.dtmPublishUntil, getdate(), details.iDraft, details.iApproved) as iVersionStatus,
		details.iApproved,
		details.iDraft
	FROM
		@empTable emp
		cross join @docTable doc 
		left join m136_tblDocument details on details.iEntityId = doc.iEntityId
		left outer join m136_tblConfirmRead cr on doc.iEntityId=cr.iEntityId
			AND emp.iEmployeeId=cr.iEmployeeId
			AND (dtmConfirm>@fromDate OR @fromDate is null OR dtmConfirm is null)
			AND (dtmConfirm<@toDate OR @toDate is null OR dtmConfirm is null)
		left outer join @bookTable book on doc.iHandbookId=book.iHandbookId
	ORDER BY
		book.iMin,
		doc.iSort,
		doc.iDocumentId,
		doc.iVersion desc,
		cr.dtmConfirm desc
end
GO
/****** Object:  StoredProcedure [dbo].[m136_ResetDocumentTypeSortOrder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 12.05.2014
-- Description:	Reset DocumentType Sort Order
-- =============================================
CREATE PROCEDURE [dbo].[m136_ResetDocumentTypeSortOrder] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	Update m136_tblDocumentType set iSort = 0 where bInactive = 0 and iDeleted = 0
	Update m136_tblDocumentType set iSort = 1 where bInactive = 1 and iDeleted = 0
	Update m136_tblDocumentType set iSort = 1000 where iDeleted = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_RemoveHandbookFromFavorites]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_RemoveHandbookFromFavorites]
	@HandbookId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	IF EXISTS(SELECT 1 FROM [dbo].[m136_tblSubscribe] WHERE [iEmployeeId] = @iSecurityId AND [iHandbookId] = @HandbookId AND iEmail <> 0)
		BEGIN
			UPDATE	[dbo].[m136_tblSubscribe]
			SET		[iFrontpage] = 0
			WHERE	[iEmployeeId] = @iSecurityId
				AND	[iHandbookId] = @HandbookId
		END
	ELSE
		BEGIN
			DELETE FROM	[dbo].[m136_tblSubscribe]
			WHERE		[iEmployeeId] = @iSecurityId
				AND		[iHandbookId] = @HandbookId
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_RemoveHandbookFromEmailSubscription]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_RemoveHandbookFromEmailSubscription]
	@HandbookId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	IF EXISTS(SELECT 1 FROM [dbo].[m136_tblSubscribe] WHERE [iEmployeeId] = @iSecurityId AND [iHandbookId] = @HandbookId AND iFrontpage <> 0)
		BEGIN
			UPDATE	[dbo].[m136_tblSubscribe]
			SET		[iEmail] = 0
			WHERE	[iEmployeeId] = @iSecurityId
				AND	[iHandbookId] = @HandbookId
		END
	ELSE
		BEGIN
			DELETE FROM	[dbo].[m136_tblSubscribe]
			WHERE		[iEmployeeId] = @iSecurityId
				AND		[iHandbookId] = @HandbookId
		END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_RemoveDocumentFromFavorites]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_RemoveDocumentFromFavorites]
	@DocumentId INT = NULL,
	@iSecurityId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	DELETE FROM [dbo].[m136_tblSubscriberDocument]
	WHERE [iEmployeeId] = @iSecurityId
	AND [iDocumentId] = @DocumentId
END
GO
/****** Object:  StoredProcedure [dbo].[LinkUpload]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[LinkUpload] 
	@Id INT,
	@iEntityId INT
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE dbo.Uploads
    SET
        iEntityId = @iEntityId
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateSubChaptersOrder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UpdateSubChaptersOrder] 
	@HandbookSortOrder AS [dbo].[HandbookSortOrder] READONLY
AS
BEGIN
    UPDATE
        HandbookTable
    SET
        HandbookTable.iSort = HandbookSortOrder.iSort
    FROM
        m136_tblHandbook HandbookTable
            INNER JOIN @HandbookSortOrder HandbookSortOrder
                ON HandbookTable.iHandbookId = HandbookSortOrder.iHandbookId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateNewsReadCount]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UpdateNewsReadCount]
	@iInfoId INT
AS
SET NOCOUNT ON
BEGIN
	UPDATE dbo.m123_tblInfo
	SET iReadCount = iReadCount + 1
	WHERE iInfoId = @iInfoId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateFavoritesSortOrder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UpdateFavoritesSortOrder]
	@iSecurityId INT,
	@NewSortOrderFolders AS [dbo].[UpdatedFavoriteItemsTable] READONLY,
	@NewSortOrderDocuments AS [dbo].[UpdatedFavoriteItemsTable] READONLY
AS
SET NOCOUNT ON
BEGIN
	UPDATE 
		dbo.m136_tblSubscribe 
	SET 
		iSort = f.iSort
	FROM 
		dbo.m136_tblSubscribe s 
		INNER JOIN @NewSortOrderFolders f
			ON s.iEmployeeId = @iSecurityId AND s.iHandbookId = f.Id
	UPDATE 
		dbo.m136_tblSubscriberDocument 
	SET 
		iSort = d.iSort
	FROM 
		dbo.m136_tblSubscriberDocument s 
		INNER JOIN @NewSortOrderDocuments d
			ON s.iEmployeeId = @iSecurityId AND s.iDocumentId = d.Id
END
GO
/****** Object:  StoredProcedure [dbo].[m136_UpdateExportJob]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_UpdateExportJob]
	@Id	UNIQUEIDENTIFIER,
	@ProcessStatus INT,
	@FilePath VARCHAR(500)
AS
BEGIN
	UPDATE [dbo].[m136_ExportJob] SET ProcessStatus = @ProcessStatus, FilePath = @FilePath WHERE Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SearchDocumentsById]
	@iSecurityId INT,
	@iDocumentId VARCHAR(100),
	@maxCount INT,
	@getTotal BIT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @TopMaxDocs INT
	SET @TopMaxDocs = 20000
	IF @getTotal = 0
		SET @TopMaxDocs = @maxCount
	DECLARE @SearchTable TABLE
	(
		iEntityId INT PRIMARY KEY
	)
	INSERT INTO @SearchTable
	SELECT TOP(@TopMaxDocs)
		doc.iEntityId
	FROM			
		m136_tblDocument doc
	WHERE			
		iLatestApproved = 1
		AND	Doc.iDocumentId LIKE @iDocumentId + '%'
		AND	[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, doc.iHandbookId) = 1
	SELECT
		COUNT(1) AS TotalCount 
	FROM 
		@SearchTable
	SELECT TOP(@maxCount)
		doc.iDocumentId AS Id,
		doc.iHandbookId,
		doc.strName,
		doc.iDocumentTypeId,
		doc.iVersion AS [Version],
		handbook.iLevelType AS LevelType,
		doc.dtmApproved,
		doc.strApprovedBy,
		dbo.fnOrgGetUserName(doc.iCreatedById, '', 0) as Responsible,
		doc.iSort,
		dbo.fn136_GetParentPathEx(doc.iHandbookId) as [Path],
		handbook.strName AS ParentFolderName,
		[dbo].[fnHasDocumentAttachment](doc.iEntityId) as HasAttachment,
		handbook.iLevel as ChapterLevel
	FROM			
		m136_tblDocument doc
		INNER JOIN	m136_tblHandbook handbook 
			ON handbook.iHandbookId = doc.iHandbookId
	WHERE
		doc.iEntityId IN (SELECT iEntityId FROM @SearchTable)
	ORDER BY
		doc.iDocumentId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_SearchDocuments]
	@searchInContent BIT,
	@iSecurityId INT,
	@searchTermTable AS [dbo].[SearchTermTable] READONLY,
	@maxCount INT,
	@getTotal BIT,
	@iDocumentTypeId INT = NULL,
	@fromDate DATE = NULL,
	@toDate DATE = NULL
AS
SET NOCOUNT ON
BEGIN
	DECLARE @SearchString varchar(100)
	SELECT @SearchString = COALESCE(@SearchString + ' AND ', '') + '"' + Term + '*"' FROM @searchTermTable
	DECLARE @ReversedSearchString varchar(100)
	SELECT @ReversedSearchString = COALESCE(@ReversedSearchString + ' AND ', '') + '"' + REVERSE(Term) + '*"' FROM @searchTermTable
	DECLARE @TermsCount AS INT
	SELECT @TermsCount = COUNT(*) FROM @searchTermTable
	DECLARE @TopMaxDocs INT
	SET @TopMaxDocs = 20000
	IF @getTotal = 0
	SET @TopMaxDocs = @maxCount
	DECLARE @TitleSearchTable TABLE
	(
		iEntityId int PRIMARY KEY
	)
	DECLARE @InitialTitleSearchTable TABLE
	(
		iEntityId int PRIMARY KEY,
		strName varchar(200),
		iHandbookId int
	)
	DECLARE @ContentsSearchTable TABLE
	(
		iEntityId int PRIMARY KEY
	)
	DECLARE @SearchTable TABLE
	(
		iEntityId INT
	)
	--
	-- Initial Search in title
	--
	IF(LEN(@SearchString) = 3)
		-- search input is null
		BEGIN
			INSERT INTO @InitialTitleSearchTable
				SELECT
					doc.iEntityId,
					doc.strName,
					doc.iHandbookId
				FROM
					m136_tblDocument doc
				WHERE
						iLatestApproved = 1
					AND
						(@iDocumentTypeId IS NULL OR @iDocumentTypeId = doc.iDocumentTypeId)
					AND
						(@fromDate IS NULL OR doc.dtmApproved >= @fromDate)
					AND
						(@toDate IS NULL OR doc.dtmApproved <= @toDate)
		END
	ELSE
		BEGIN
			INSERT INTO @InitialTitleSearchTable
				SELECT
					doc.iEntityId,
					doc.strName,
					doc.iHandbookId
				FROM
					m136_tblDocument doc
				WHERE
						iLatestApproved = 1
					AND
						(
							CONTAINS(doc.strName, @SearchString) 
							OR 
							CONTAINS(doc.strNameReversed, @ReversedSearchString)
						)
					AND
						(@iDocumentTypeId IS NULL OR @iDocumentTypeId = doc.iDocumentTypeId)
					AND
						(@fromDate IS NULL OR doc.dtmApproved >= @fromDate)
					AND
						(@toDate IS NULL OR doc.dtmApproved <= @toDate)
			 --
			 -- Search in Contents
			 --
			INSERT INTO @ContentsSearchTable
				SELECT TOP (@TopMaxDocs) -- Simple limit in case we don't need the count (popup search)
					doc.iEntityId
				FROM
					m136_tblDocument doc
					LEFT JOIN m136x_tblTextIndex textIndex 
						ON textIndex.iEntityId = doc.iEntityId
				WHERE
						@searchInContent = 1
					AND
						iLatestApproved = 1
					AND	
						CONTAINS(totalvalue, @SearchString)
					AND
						[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, iHandbookId) = 1
					AND
						(@iDocumentTypeId IS NULL OR @iDocumentTypeId = doc.iDocumentTypeId)
					AND
						(@fromDate IS NULL OR doc.dtmApproved >= @fromDate)
					AND
						(@toDate IS NULL OR doc.dtmApproved <= @toDate)
		END
	--
	-- Verification that title search contains only documents with title that has EACH search term
	--
	INSERT INTO @TitleSearchTable
		SELECT TOP (@TopMaxDocs) -- Simple limit in case we don't need the count (popup search)
			doc.iEntityId
		FROM
			@InitialTitleSearchTable doc
			INNER JOIN @searchTermTable terms
				ON @TermsCount = 1 OR doc.strName LIKE '%' + terms.Term + '%'
		WHERE
			[dbo].[fnHandbookHasReadContentsAccess](@iSecurityId, iHandbookId) = 1
		GROUP BY	
			iEntityId
		HAVING 
			COUNT(iEntityId) = @TermsCount
	--
	-- Union both results
	--
	INSERT INTO @SearchTable
		SELECT * FROM @TitleSearchTable
		UNION 
		SELECT * FROM @ContentsSearchTable
	-- Select the total number of search results
	SELECT
		COUNT(1) AS TotalCount 
	FROM 
		@SearchTable
	-- Select the data
	SELECT TOP (@maxCount) 
		iDocumentId AS Id,
		doc.iHandbookId,
		doc.strName,
		doc.iDocumentTypeId,
		doc.iVersion AS [Version],
		handbook.iLevelType AS LevelType,
		doc.dtmApproved,
		doc.strApprovedBy,
		dbo.fnOrgGetUserName(doc.iCreatedById, '', 0) as Responsible,
		NULL AS DepartmentId,
		0 AS Virtual,
		doc.iSort,
		dbo.fn136_GetParentPathEx(doc.iHandbookId) as [Path],
		handbook.strName AS ParentFolderName,
		[dbo].[fnHasDocumentAttachment](doc.iEntityId) as HasAttachment,
		handbook.iLevel as ChapterLevel
		--,title.iEntityId --Test only
	FROM
		m136_tblDocument doc
		INNER JOIN	m136_tblHandbook handbook
				ON handbook.iHandbookId = doc.iHandbookId
		LEFT JOIN @TitleSearchTable title
				ON @searchInContent = 1 AND doc.iEntityId = title.iEntityId
	WHERE
		doc.iEntityId in (SELECT iEntityId FROM @SearchTable)
	ORDER BY
		title.iEntityId DESC, -- Will be null if it's not title
		LevelType ASC,
		strName ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetRecentlyApprovedDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetRecentlyApprovedDocuments] 
	@iDaysLimit int,
	@maxCount int
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Now DATETIME = GETDATE();
	SELECT TOP (@maxCount)
		d.iDocumentId as Id,
		d.iHandbookId,
		d.strName,
		d.iDocumentTypeId,
		d.iVersion as [Version],
		d.dtmApproved,
		d.strApprovedBy,
		dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
		h.strName as ParentFolderName,
		dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
		[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
		h.iLevelType AS LevelType,
		h.iDepartmentId As DepartmentId
	FROM
		m136_tblDocument d
        INNER JOIN m136_tblHandbook h 
			ON d.iHandbookId = h.iHandbookId
   	WHERE 
        d.iLatestApproved = 1
        AND d.iReceiptsCopied = 0
        AND DATEDIFF(d, ISNULL(d.dtmApproved, CONVERT(DATETIME, '01.01.1970', 104)), @Now) <  @iDaysLimit
	ORDER BY
		d.dtmApproved DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetLatestApprovedSubscriptions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetLatestApprovedSubscriptions]
	@iSecurityId INT = 0,
	@iApprovedDocumentCount INT = 0,
	@TreatDepartmentFoldersAsFavorites INT = 0
AS
SET NOCOUNT ON
BEGIN
	DECLARE @iUserDepId INT;
	SELECT @iUserDepId = iDepartmentId FROM tblEmployee WHERE iEmployeeId = @iSecurityId;
	DECLARE @PreviousLogin Datetime;
	SELECT @PreviousLogin = PreviousLogin FROM tblEmployee WHERE iEmployeeId = @iSecurityId;
	-- get list of handbookId which is favorite and have read access
	DECLARE @FavoriteHandbooksWithReadContents TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @FavoriteHandbooksWithReadContents(iHandbookId)
	SELECT 
		iHandbookId 
	FROM 
		[dbo].[m136_fnGetAllFavoritesFoldersWithContentsAccessRecursively](@iSecurityId, @TreatDepartmentFoldersAsFavorites, @iUserDepId);
	-- get list of favorite document
	WITH Documents AS
	(
		SELECT
			iDocumentId
		FROM
			m136_relVirtualRelation
		WHERE iHandbookId IN (SELECT DISTINCT iHandbookId 
							  FROM @FavoriteHandbooksWithReadContents)
		UNION
		SELECT
			iDocumentId
		FROM
			m136_tblSubscriberDocument
		WHERE 
			iEmployeeId = @iSecurityId
	)
	SELECT DISTINCT 
		TOP(@iApprovedDocumentCount) 
		d.iDocumentId AS Id, 
		d.iEntityId, 
		d.strName, 
        dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) AS iAccess, 
		d.iHandbookId, 
        d.dtmApproved, 
		h.strName AS ParentFolderName, 
		d.iVersion AS [Version], 
        d.iDocumentTypeId,
		dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
        (e.strLastName + ' ' + e.strFirstName) AS strApprovedBy, 
        dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible, 
		[dbo].[fnHasDocumentAttachment](d.iEntityId) AS HasAttachment,
		h.iLevelType AS LevelType,
		h.iDepartmentId AS DepartmentId,
        CASE WHEN 
			d.dtmApproved > @PreviousLogin THEN 1
		ELSE 0
		END AS IsNew
	FROM  
		m136_tblDocument d
		JOIN m136_tblHandbook h ON d.iHandbookId = h.iHandbookId
		LEFT JOIN tblEmployee e ON e.iEmployeeId = d.iApprovedById
	WHERE 
		d.iLatestApproved = 1
        AND d.iReceiptsCopied = 0
		AND (		(d.iHandbookId IN (SELECT iHandbookId FROM @FavoriteHandbooksWithReadContents))
				OR	d.iDocumentId IN (SELECT iDocumentId FROM Documents))
	ORDER BY d.dtmApproved DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterItems]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetChapterItems] 
	@iHandbookId INT = NULL,
	@iSecurityId INT,
	@bShowDocumentsInTree BIT
AS
SET NOCOUNT ON
BEGIN
		SELECT	strName as FolderName,
				iParentHandbookId as ParentId,
				dbo.fn136_GetParentPathEx(@iHandbookId) as Path,
				iLevel as Level,
				iViewTypeId as ViewType,
				iLevelType as LevelType,
				iDepartmentId as DepartmentId,
				strDescription
		FROM	m136_tblHandbook
		WHERE	iHandbookId = @iHandbookId AND @iHandbookId IS NOT NULL;
		SELECT	d.iDocumentId as Id,
				d.iEntityId,
				d.iHandbookId,
				d.strName,
				d.iDocumentTypeId,
				d.iVersion as Version,
				h.iLevelType as LevelType,
				d.dtmApproved,
				d.strApprovedBy,
				dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
				h.iDepartmentId as DepartmentId,
				0 as Virtual,
				d.iSort,
				NULL as ParentFolderName,
				NULL as Path,
				[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
				d.iApproved,
				d.iDraft,
				h.iParentHandbookId,
				0 AS iChildCount,
                1 AS IsDocument,
				d.iHandbookId AS VirtualHandbookId
		FROM	m136_tblDocument d
		LEFT JOIN m136_tblHandbook h 
			ON h.iHandbookId = d.iHandbookId
		WHERE	d.iHandbookId = @iHandbookId
			AND d.iLatestApproved = 1
	UNION
		SELECT	v.iDocumentId as Id,
				d.iEntityId,
				d.iHandbookId,
				d.strName,
				d.iDocumentTypeId,
				d.iVersion as Version,
				h.iLevelType as LevelType,
				d.dtmApproved,
				d.strApprovedBy,
				dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
				h.iDepartmentId as DepartmentId,
				1 as Virtual,
				v.iSort,
				h.strName as ParentFolderName,
				dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
				[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
				d.iApproved,
				d.iDraft,
				h.iParentHandbookId,
				0 AS iChildCount,
                1 AS IsDocument,
				v.iHandbookId AS VirtualHandbookId
		FROM	m136_relVirtualRelation v
			INNER JOIN m136_tblDocument d 
				ON d.iDocumentId = v.iDocumentId
			INNER JOIN m136_tblHandbook h
				ON d.iHandbookId = h.iHandbookId
		WHERE	v.iHandbookId = @iHandbookId
			AND d.iLatestApproved = 1
	UNION
		SELECT	h.iHandbookId as Id,
				-1 as iEntityId,
				h.iHandbookId,
				h.strName,
				-1 as iDocumentTypeId,
				NULL as Version,
				iLevelType as LevelType,
				NULL as dtmApproved,
				NULL as strApprovedBy,
				NULL as Responsible,
				h.iDepartmentId as DepartmentId,
				0 as Virtual,
				h.iSort,
				NULL as ParentFolderName,
				NULL as Path,
				0 as HasAttachment,
				NULL as iApproved,
				NULL as iDraft,
				h.iParentHandbookId,
				[dbo].[fn136_GetChildCount] (@iSecurityId, h.iHandbookId, @bShowDocumentsInTree) AS iChildCount,
                0 AS IsDocument,
				h.iHandbookId AS VirtualHandbookId
		FROM	m136_tblHandbook as h
		WHERE	(h.iParentHandbookId = @iHandbookId OR (h.iParentHandbookId IS NULL AND @iHandbookId IS NULL))
			AND h.iDeleted = 0
	ORDER BY IsDocument, iSort, strName;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetApprovedDocumentsByHandbookIdRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:  EM.LAM.VAN.MAI
-- Created date: DEC 05, 2014
-- Description: Get approved documents by handbookId and all documents of sub chapters.
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetApprovedDocumentsByHandbookIdRecursive] 
	@iHandbookId INT = 0,
	@iSecurityId INT = 0
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @AvailableChildren(iHandbookId)
		SELECT 
			iHandbookId 
		FROM 
			[dbo].[m136_GetHandbookRecursive](@iHandbookId, @iSecurityId, 1);
		SELECT DISTINCT 
			d.iDocumentId AS Id, 
			h.iHandbookId,
			d.strName, 
			d.iDocumentTypeId, 
			d.iVersion AS [Version],
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			h.strName AS ParentFolderName,
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			h.iHandbookId AS VirtualHandbookId
		FROM 
			m136_tblDocument d
				JOIN m136_tblHandbook h 
					ON d.iHandbookId = h.iHandbookId
				JOIN @AvailableChildren ac
					ON d.iHandbookId = ac.iHandbookId
		WHERE
			d.iLatestApproved = 1
	UNION       
		SELECT 
			d.iDocumentId AS Id, 
			h.iHandbookId,
			d.strName, 
			d.iDocumentTypeId,
			d.iVersion AS [Version],
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId AS DepartmentId,
			1 AS Virtual,
			virt.iSort,
			h.strName AS ParentFolderName,
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			virt.iHandbookId AS VirtualHandbookId
		FROM 
			m136_relVirtualRelation virt 
				JOIN m136_tblDocument d
					ON virt.iDocumentId = d.iDocumentId
				JOIN m136_tblHandbook h 
					ON d.iHandbookId = h.iHandbookId
				JOIN @AvailableChildren ac
					ON virt.iHandbookId = ac.iHandbookId
		WHERE
			d.iLatestApproved = 1
	ORDER BY 
		iSort, 
		strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetPreviousVersions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_be_GetPreviousVersions]
	@iDocumentId INT,
	@PageSize INT,
	@PageIndex INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  doc.iDocumentId, 
			doc.iEntityId,
			doc.strName,
			doc.iDocumentTypeId,
			doc.iVersion,
			NULL AS LevelType,
			--h.iLevelType AS LevelType,
			doc.dtmApproved,
			doc.strApprovedBy,
			doc.iCreatedById,
			NULL AS iDepartmentId,
			--h.iDepartmentId,
			doc.iSort,
			NULL AS ParentFolderName,
			--h.strName AS ParentFolderName,
			doc.iApproved,
			doc.iDraft,
			doc.iLatestVersion,
			doc.iLatestApproved,
			doc.iReadCount AS ReadCount,
			ROW_NUMBER() OVER (ORDER BY doc.iVersion DESC) AS rownumber
        INTO #Filters
        FROM dbo.m136_tblDocument doc
        --LEFT JOIN dbo.m136_tblHandbook h on doc.iHandbookId = h.iHandbookId 
       	WHERE
			doc.iDeleted = 0
			AND NOT (doc.iApproved = 0 AND doc.iDraft = 0)
			AND doc.iDocumentId = @iDocumentId
	SELECT  doc.iEntityId AS Id,
			doc.strName,
			doc.iDocumentTypeId,
			doc.iVersion AS Version,
			doc.LevelType,
			doc.dtmApproved,
			doc.strApprovedBy,
			dbo.fnOrgGetUserName(doc.iCreatedById, '', 0) AS Responsible,
			doc.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			doc.iSort,
			doc.ParentFolderName,
			NULL AS Path,
			[dbo].[fnHasDocumentAttachment](doc.iEntityId) AS HasAttachment,
			doc.iApproved,
			doc.iDraft,
			doc.iLatestApproved,
			doc.iLatestVersion,
			doc.ReadCount
		FROM #Filters doc 
		WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[GetUserReadingDocumentsList]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUserReadingDocumentsList]
    @UserId INT
AS
BEGIN
    DECLARE @UserDepartmentId TABLE(Id INT);
    DECLARE @UserRoleId TABLE(Id INT);
    DECLARE @UserReadingDocumentsList TABLE
    (
        iDocumentId INT,
        iHandbookId INT,
        strName NVARCHAR(200),
        iDocumentTypeId INT,
        Version INT,
        dtmApproved DATETIME,
        strApprovedBy VARCHAR(200),
        Responsible VARCHAR(100),
        ParentFolderName VARCHAR(100),
        Path NVARCHAR(MAX),
        HasAttachment BIT,
        iReadingListId INT,
        ReadingListName NVARCHAR(100),
        IsConfirmed BIT
    );
    
    -- Insert reading documents from person readers
    INSERT INTO @UserReadingDocumentsList
        (iDocumentId, iHandbookId, strName, iDocumentTypeId, Version, dtmApproved, strApprovedBy, Responsible, ParentFolderName, Path, HasAttachment, iReadingListId, ReadingListName, IsConfirmed)
    SELECT
        d.iDocumentId,
        d.iHandbookId,
        d.strName,
        d.iDocumentTypeId,
        d.iVersion AS Version,
        d.dtmApproved,
        d.strApprovedBy,
        dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
        h.strName AS ParentFolderName,
        dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
        dbo.fnHasDocumentAttachment(d.iEntityId) AS HasAttachment,
        rl.ReadingListId,
        rl.Name,
        dbo.fnUserHasConfirmedDocument(@UserId, d.iEntityId)
    FROM
        m136_tblDocument d
            INNER JOIN m136_tblhandbook h
                ON d.iHandbookId = h.iHandbookId
            INNER JOIN ReadingListDocuments rld
                ON d.iDocumentId = rld.DocumentId
            INNER JOIN ReadingListReaders rlr
                ON rld.ReadingListId = rlr.ReadingListId
            INNER JOIN ReadingList rl
                ON rld.ReadingListId = rl.ReadingListId
    WHERE
        d.iLatestApproved = 1
        AND ReaderTypeId = 1
        AND ReaderId = @UserId
        
    -- Insert reading documents from department readers
    INSERT INTO @UserDepartmentId(Id)
    SELECT
        iDepartmentId
    FROM
        tblEmployee
    WHERE
        iEmployeeId = @UserId
        
    INSERT INTO @UserDepartmentId(Id)
    SELECT
        iDepartmentId
    FROM
        relEmployeeDepartment
    WHERE
        iEmployeeId = @UserId
        
    INSERT INTO @UserReadingDocumentsList
        (iDocumentId, iHandbookId, strName, iDocumentTypeId, Version, dtmApproved, strApprovedBy, Responsible, ParentFolderName, Path, HasAttachment, iReadingListId, ReadingListName, IsConfirmed)
    SELECT
        d.iDocumentId,
        d.iHandbookId,
        d.strName,
        d.iDocumentTypeId,
        d.iVersion AS Version,
        d.dtmApproved,
        d.strApprovedBy,
        dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
        h.strName AS ParentFolderName,
        dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
        dbo.fnHasDocumentAttachment(d.iEntityId) AS HasAttachment,
        rl.ReadingListId,
        rl.Name,
        dbo.fnUserHasConfirmedDocument(@UserId, d.iEntityId)
    FROM
        m136_tblDocument d
            INNER JOIN m136_tblhandbook h
                ON d.iHandbookId = h.iHandbookId
            INNER JOIN ReadingListDocuments rld
                ON d.iDocumentId = rld.DocumentId
            INNER JOIN ReadingListReaders rlr
                ON rld.ReadingListId = rlr.ReadingListId
            INNER JOIN ReadingList rl
                ON rld.ReadingListId = rl.ReadingListId
    WHERE
        d.iLatestApproved = 1
        AND ReaderTypeId = 2
        AND ReaderId IN (SELECT Id FROM @UserDepartmentId)
    
    -- Insert reading documents from role readers
    INSERT INTO @UserRoleId (Id)
    SELECT
        iSecGroupId
    FROM
        relEmployeeSecGroup
    WHERE
        iEmployeeId = @UserId
        
    INSERT INTO @UserReadingDocumentsList
        (iDocumentId, iHandbookId, strName, iDocumentTypeId, Version, dtmApproved, strApprovedBy, Responsible, ParentFolderName, Path, HasAttachment, iReadingListId, ReadingListName, IsConfirmed)
    SELECT
        d.iDocumentId,
        d.iHandbookId,
        d.strName,
        d.iDocumentTypeId,
        d.iVersion AS Version,
        d.dtmApproved,
        d.strApprovedBy,
        dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
        h.strName AS ParentFolderName,
        dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
        dbo.fnHasDocumentAttachment(d.iEntityId) AS HasAttachment,
        rl.ReadingListId,
        rl.Name,
        dbo.fnUserHasConfirmedDocument(@UserId, d.iEntityId)
    FROM
        m136_tblDocument d
            INNER JOIN m136_tblhandbook h
                ON d.iHandbookId = h.iHandbookId
            INNER JOIN ReadingListDocuments rld
                ON d.iDocumentId = rld.DocumentId
            INNER JOIN ReadingListReaders rlr
                ON rld.ReadingListId = rlr.ReadingListId
            INNER JOIN ReadingList rl
                ON rld.ReadingListId = rl.ReadingListId
    WHERE
        d.iLatestApproved = 1
        AND ReaderTypeId = 3
        AND ReaderId IN (SELECT Id FROM @UserRoleId)    
    
    -- get final reading documents
    
    SELECT
        DISTINCT(iDocumentId) AS Id,
        iHandbookId,
        strName,
        iDocumentTypeId,
        Version,
        dtmApproved,
        strApprovedBy,
        Responsible,
        ParentFolderName,
        Path,
        HasAttachment,
        iReadingListId,
        ReadingListName,
        IsConfirmed
    FROM
        @UserReadingDocumentsList
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetSoonToExpiredDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetSoonToExpiredDocuments]
	@iSecurityId INT,
	@ExpireLimit INT,
	@PageSize INT = 10,
	@PageIndex INT = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  d.iDocumentId, 
			d.iEntityId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion,
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			d.iCreatedById,
			h.iDepartmentId,
			d.iSort,
			h.strName as ParentFolderName,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			row_number() OVER (ORDER BY d.dtmCreated DESC) AS rownumber,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iDeleted,
			dbo.fn136_GetParentPathEx(d.iHandbookId) as [Path],
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount
        INTO #Filters
        FROM dbo.m136_tblDocument d 
        LEFT JOIN dbo.m136_tblHandbook h on d.iHandbookId = h.iHandbookId
       	WHERE
			d.iDeleted = 0
		    AND d.iApproved = 1
		    AND d.iLatestVersion = 1
		    AND ((dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) & 16) = 16 
		        OR (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) & 4) = 4)
		    AND (d.iApprovedById = @iSecurityId OR d.iCreatedById = @iSecurityId)
		    AND (DATEDIFF(d, GETDATE(), d.dtmPublishUntil) < @ExpireLimit OR d.dtmPublishUntil < GETDATE());
	SELECT  d.iDocumentId AS Id,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion AS Version,
			d.LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
			d.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			d.ParentFolderName,
			d.[Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) AS HasAttachment,
			d.iApproved,
			d.dtmPublishUntil,
			d.iDraft,
            d.iInternetDoc,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iAccess,
			d.iCreatedbyId,
			d.iVersionStatus,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount AS ReadCount
		FROM #Filters d 
		WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetOtherWorkingDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetOtherWorkingDocuments]
	@iSecurityId int = 1,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  d.iDocumentId, 
			d.iEntityId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			d.iCreatedById,
			h.iDepartmentId,
			d.iSort,
			h.strName as ParentFolderName,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			row_number() OVER (ORDER BY d.dtmCreated DESC) AS rownumber,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus
        INTO #Filters
        FROM dbo.m136_tblDocument d 
        LEFT JOIN dbo.m136_tblHandbook h on d.iHandbookId = h.iHandbookId
       	WHERE
       		d.iDeleted = 0
			AND d.iApproved NOT IN (1, 4)
		    AND d.iVersion = 0
		    AND d.iDraft = 1
		    AND d.iDeleted = 0
		    AND d.iCreatedById <> @ISecurityId
		    AND d.iLatestVersion = 1;
        SELECT  d.iDocumentId as Id,
				d.strName,
				d.iDocumentTypeId,
				d.iVersion as Version,
				d.LevelType,
				d.dtmApproved,
				d.strApprovedBy,
				dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
				d.iDepartmentId as DepartmentId,
				0 as Virtual,
				d.iSort,
				d.ParentFolderName,
				NULL as Path,
				[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
				d.iApproved,
				d.iDraft,
                d.iInternetDoc,
				d.dtmPublish,
				d.dtmPublishUntil,
				d.iAccess,
				d.iCreatedbyId,
				d.iVersionStatus
            FROM #Filters d 
            WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
            SELECT COUNT(*) FROM #Filters;
            DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetMyWorkingDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetMyWorkingDocuments]
	@iSecurityId int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  d.iDocumentId, 
			d.iEntityId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion,
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			d.iCreatedById,
			h.iDepartmentId,
			d.iSort,
			h.strName as ParentFolderName,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			row_number() OVER (ORDER BY d.dtmCreated DESC) AS rownumber,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iDeleted,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as [Path],
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount
        INTO #Filters
        FROM dbo.m136_tblDocument d 
        LEFT JOIN dbo.m136_tblHandbook h on d.iHandbookId = h.iHandbookId
       	WHERE
			d.iDeleted = 0
			AND (d.iApproved not in (1, 3, 4))
            AND not (d.iApproved = 0 and d.iDraft = 0)
			AND d.iCreatedById = @ISecurityId
			AND d.iLatestVersion = 1
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) & 3) = 3;
	SELECT  d.iDocumentId AS Id,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion AS [Version],
			d.LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
			d.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			d.ParentFolderName,
			d.[Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) AS HasAttachment,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iAccess,
			d.iCreatedbyId,
			d.iVersionStatus,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount AS ReadCount
		FROM #Filters d 
		WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetMyDocumentsSentToApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetMyDocumentsSentToApproval] 
	@iSecurityId int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  d.iDocumentId, 
			d.iEntityId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion,
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			d.iCreatedById,
			h.iDepartmentId,
			d.iSort,
			h.strName AS ParentFolderName,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			row_number() OVER (ORDER BY d.dtmCreated DESC) AS rownumber,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, GETDATE(), d.iDraft, d.iApproved) iVersionStatus,
			d.iDeleted,
			dbo.fn136_GetParentPathEx(d.iHandbookId) as [Path],
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount
		INTO #Filters
		FROM m136_tblDocument d
			JOIN m136_tblHandbook h on d.iHandbookId = h.iHandbookId
		WHERE d.iDeleted = 0
			AND d.iLatestVersion = 1 
			AND d.iDraft = 0
			AND d.iApproved = 0
			AND (d.iCreatedById = @iSecurityId OR d.iAlterId = @iSecurityId);  
	SELECT  d.iDocumentId AS Id,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion AS [Version],
			d.LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
			d.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			d.ParentFolderName,
			d.[Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) AS HasAttachment,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iAccess,
			d.iCreatedbyId,
			d.iVersionStatus,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount AS ReadCount
		FROM #Filters d 
		WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;                                 
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentsByHandbookIdRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentsByHandbookIdRecursive] 
	@iHandbookId INT = 0,
	@iSecurityId INT = 0
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AvailableChildren TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	INSERT INTO @AvailableChildren(iHandbookId)
		SELECT 
			iHandbookId 
		FROM 
			[dbo].[m136_GetHandbookRecursive](@iHandbookId, @iSecurityId, 1);
		SELECT DISTINCT 
			d.iDocumentId AS Id, 
			d.iEntityId,
			h.iHandbookId,
			d.strName, 
			d.iDocumentTypeId, 
			d.iVersion AS [Version],
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			h.strName AS ParentFolderName,
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			d.iCreatedbyId,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			0 AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			h.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount
		FROM 
			m136_tblDocument d
				JOIN m136_tblHandbook h 
					ON d.iHandbookId = h.iHandbookId
				JOIN @AvailableChildren ac
					ON d.iHandbookId = ac.iHandbookId
		WHERE
			d.iLatestVersion = 1
	UNION       
		SELECT 
			d.iDocumentId AS Id, 
			d.iEntityId,
			h.iHandbookId,
			d.strName, 
			d.iDocumentTypeId,
			d.iVersion AS [Version],
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId AS DepartmentId,
			1 AS Virtual,
			virt.iSort,
			h.strName AS ParentFolderName,
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS [Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			d.iCreatedbyId,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			0 AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			virt.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount			
		FROM 
			m136_relVirtualRelation virt 
				JOIN m136_tblDocument d
					ON virt.iDocumentId = d.iDocumentId
				JOIN m136_tblHandbook h 
					ON d.iHandbookId = h.iHandbookId
				JOIN @AvailableChildren ac
					ON virt.iHandbookId = ac.iHandbookId
		WHERE
			d.iLatestVersion = 1
	ORDER BY 
		iSort, 
		strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentsByDocumentIds]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentsByDocumentIds] 
	@DocumentIds AS [dbo].[Item] READONLY
AS
BEGIN
	SELECT	d.iEntityId, 
			d.iDocumentId, 
			d.iVersion, 
			d.iDocumentTypeId, 
			d.iHandbookId, 
			d.strName, 
			d.strDescription, 
			d.UrlOrFileName,
			d.strApprovedBy,
			d.iApproved,
			d.iDraft, 
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) strCreatedBy, 
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iLevelType,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iReadCount,
			h.iLevel,
			te.strEmail AS strCreatedByEmail,
			d.strAuthor,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File],
			d.iCompareToVersion	,
			d.iInternetDoc,
			d.iDeleted,
			d.iCreatedbyId			
	FROM	@DocumentIds d1
	JOIN	m136_tblDocument d ON d.iDocumentId = d1.Id
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId 
	WHERE d.iLatestVersion = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentsAwaitingMyApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentsAwaitingMyApproval] 
	@iSecurityId int = 0,
	@PageSize int = 10,
	@PageIndex int = 0
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  d.iDocumentId, 
			d.iEntityId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion,
			h.iLevelType AS LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			d.iCreatedById,
			h.iDepartmentId,
			d.iSort,
			h.strName as ParentFolderName,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			row_number() OVER (ORDER BY d.dtmCreated DESC) AS rownumber,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iDeleted,
			dbo.fn136_GetParentPathEx(d.iHandbookId) as [Path],
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount			
		INTO #Filters
		FROM dbo.m136_tblDocument d
			JOIN m136_tblHandbook h ON d.iHandbookId = h.iHandbookId
			LEFT JOIN m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
		WHERE d.iLatestVersion = 1
			AND sfa.iEmployeeId = @iSecurityId
			AND d.iDraft = 0
			AND d.iApproved = 0
			AND d.iDeleted = 0
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) & 17) = 17;
	SELECT  d.iDocumentId AS Id,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion AS [Version],
			d.LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) AS Responsible,
			d.iDepartmentId AS DepartmentId,
			0 AS Virtual,
			d.iSort,
			d.ParentFolderName,
			d.[Path],
			[dbo].[fnHasDocumentAttachment](d.iEntityId) AS HasAttachment,
			d.iApproved,
			d.iDraft,
            d.iInternetDoc,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iAccess,
			d.iCreatedbyId,
			d.iVersionStatus,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			d.iReadCount AS ReadCount
		FROM #Filters d 
		WHERE (@PageSize = 0 OR rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	SELECT COUNT(*) FROM #Filters;
	DROP TABLE #Filters;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentInformationHaveVersion]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentInformationHaveVersion]
	@DocumentId INT,
    @Version INT
AS
BEGIN
	DECLARE @iVersions INT;
	SELECT @iVersions = COUNT(1) FROM dbo.m136_tblDocument mtd WHERE mtd.iDocumentId = @DocumentId;
	SELECT	d.iEntityId, 
			d.iDocumentId, 
			d.iVersion, 
			d.iDocumentTypeId, 
			d.iHandbookId, 
			d.strName, 
			d.strDescription, 
			d.UrlOrFileName,
			d.strApprovedBy,
			d.iApproved,
            dbo.fnDocumentCanBeApproved(d.iEntityId) AS bCanBeApproved,
			d.iDraft,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) strCreatedBy, 
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iLevelType,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iReadCount,
			h.iLevel,
			te.strEmail AS strCreatedByEmail,
			d.strAuthor,
			@iVersions AS iVersionsCount,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File],
			d.iCompareToVersion	,
			d.iInternetDoc,
			d.iDeleted,
			d.iCreatedbyId,
			rel.iEmployeeId AS empApproveOnBehalfId,
			CASE WHEN rel.iEmployeeId IS NOT NULL THEN  dbo.fnOrgGetUserName(rel.iEmployeeId, '', 0) ELSE '' END AS strEmpApproveOnBehalf,
            CASE WHEN EXISTS(SELECT 1 FROM m136_tblDocumentLock WHERE iEntityId = d.iEntityId) THEN 1 ELSE 0 END AS bIsLocked,
            dbo.fnOrgGetUserName((SELECT TOP 1 iEmployeeId FROM m136_tblDocumentLock WHERE iEntityId = d.iEntityId), '', 0) strLockedBy
	FROM	m136_tblDocument d
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId
	LEFT JOIN dbo.m136_relSentEmpApproval rel 
		ON d.iEntityId = rel.iEntityId 
		AND rel.dtmSentToApproval = (SELECT MAX(dtmSentToApproval) FROM dbo.m136_relSentEmpApproval WHERE iEntityId = d.iEntityId)
	WHERE	d.iDocumentId = @DocumentId	AND 
        @Version = d.iVersion
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentInformationByEntityId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentInformationByEntityId] 
	@EntityId INT = NULL
AS
BEGIN
	DECLARE @iVersions INT;
	SELECT @iVersions = COUNT(1) FROM dbo.m136_tblDocument mtd WHERE mtd.iDocumentId IN 
		(SELECT iDocumentId FROM dbo.m136_tblDocument mtd2 WHERE mtd2.iEntityId = @EntityId);
	SELECT	d.iEntityId, 
			d.iDocumentId, 
			d.iVersion, 
			d.iDocumentTypeId, 
			d.iHandbookId, 
			d.strName, 
			d.strDescription, 
			d.UrlOrFileName,
			d.strApprovedBy,
			d.iApproved,
            dbo.fnDocumentCanBeApproved(d.iEntityId) AS bCanBeApproved,
			d.iDraft,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) strCreatedBy, 
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iLevelType,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iReadCount,
			h.iLevel,
			te.strEmail AS strCreatedByEmail,
			d.strAuthor,
			@iVersions AS iVersionsCount,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File],
			d.iCompareToVersion	,
			d.iInternetDoc,
			d.iDeleted,
			d.iCreatedbyId,
			rel.iEmployeeId AS empApproveOnBehalfId,
			CASE WHEN rel.iEmployeeId IS NOT NULL THEN  dbo.fnOrgGetUserName(rel.iEmployeeId, '', 0) ELSE '' END AS strEmpApproveOnBehalf,
            iOrientation
	FROM	m136_tblDocument d
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId
	LEFT JOIN dbo.m136_relSentEmpApproval rel 
		ON d.iEntityId = rel.iEntityId 
		AND rel.dtmSentToApproval = (SELECT MAX(dtmSentToApproval) FROM dbo.m136_relSentEmpApproval WHERE iEntityId = d.iEntityId) 
	WHERE	d.iEntityId = @EntityId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentInformation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentInformation]
	@DocumentId INT = NULL
AS
BEGIN
	DECLARE @iVersions INT;
	SELECT @iVersions = COUNT(1) FROM dbo.m136_tblDocument mtd WHERE mtd.iDocumentId = @DocumentId;
	SELECT	d.iEntityId, 
			d.iDocumentId, 
			d.iVersion, 
			d.iDocumentTypeId, 
			d.iHandbookId, 
			d.strName, 
			d.strDescription, 
			d.UrlOrFileName,
			d.strApprovedBy,
			d.iApproved,
            dbo.fnDocumentCanBeApproved(d.iEntityId) AS bCanBeApproved,
			d.iDraft,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) strCreatedBy, 
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iLevelType,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iReadCount,
			h.iLevel,
			te.strEmail AS strCreatedByEmail,
			d.strAuthor,
			@iVersions AS iVersionsCount,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.[File],
			d.iCompareToVersion	,
			d.iInternetDoc,
			d.iDeleted,
			d.iCreatedbyId,
			rel.iEmployeeId AS empApproveOnBehalfId,
			CASE WHEN rel.iEmployeeId IS NOT NULL THEN  dbo.fnOrgGetUserName(rel.iEmployeeId, '', 0) ELSE '' END AS strEmpApproveOnBehalf,
            CASE WHEN EXISTS(SELECT 1 FROM m136_tblDocumentLock WHERE iEntityId = d.iEntityId) THEN 1 ELSE 0 END AS bIsLocked,
            dbo.fnOrgGetUserName((SELECT TOP 1 iEmployeeId FROM m136_tblDocumentLock WHERE iEntityId = d.iEntityId), '', 0) strLockedBy,
            iOrientation,
            CASE WHEN EXISTS (SELECT 1 FROM m136_tblCopyConfirms WHERE iEntityId = d.iEntityId) THEN 1 ELSE 0 END AS IsCopyReadingReceiptFromResponsible
	FROM	m136_tblDocument d
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId
	LEFT JOIN dbo.m136_relSentEmpApproval rel 
		ON d.iEntityId = rel.iEntityId 
		AND rel.dtmSentToApproval = (SELECT MAX(dtmSentToApproval) FROM dbo.m136_relSentEmpApproval WHERE iEntityId = d.iEntityId)
	WHERE	d.iDocumentId = @DocumentId	AND 
			d.iLatestVersion = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetChapterItems]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetChapterItems]
	@iHandbookId INT = NULL,
	@iSecurityId INT,
	@bShowDocumentsInTree BIT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT	strName as FolderName,
				iParentHandbookId as ParentId,
				dbo.fn136_GetParentPathEx(@iHandbookId) as Path,
				iLevel as Level,
				iViewTypeId as ViewType,
				iLevelType as LevelType,
				iDepartmentId as DepartmentId,
				strDescription,
				[dbo].[fn136_be_GetChildCount] (@iSecurityId, iHandbookId, @bShowDocumentsInTree) AS iChildCount
		FROM	m136_tblHandbook
		WHERE	iHandbookId = @iHandbookId AND @iHandbookId IS NOT NULL;
		SELECT	d.iDocumentId as Id,
				d.iEntityId,
				d.iHandbookId,
				d.strName,
				d.iDocumentTypeId,
				d.iVersion as Version,
				h.iLevelType as LevelType,
				d.dtmApproved,
				d.strApprovedBy,
				dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
				h.iDepartmentId as DepartmentId,
				0 as Virtual,
				d.iSort,
				NULL as ParentFolderName,
				NULL as Path,
				[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
				d.iApproved,
				d.iDraft,
				d.dtmPublish,
				d.dtmPublishUntil,
				dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
				d.iCreatedbyId,
                d.iInternetDoc,
				dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
				h.iHandbookId AS iParentHandbookId,
				CAST(0 as INT) AS iChildCount,
				d.iDeleted,
				d.dtmCreated,
				d.dtmAlter,
				1 AS IsDocument,
				d.iHandbookId AS VirtualHandbookId,
				d.iReadCount AS ReadCount
		FROM	m136_tblDocument d
		LEFT JOIN m136_tblHandbook h 
			ON h.iHandbookId = d.iHandbookId
		WHERE	d.iHandbookId = @iHandbookId
			AND d.iLatestVersion = 1 AND d.iDeleted = 0
	UNION
		SELECT	v.iDocumentId as Id,
				d.iEntityId,
				d.iHandbookId,
				d.strName,
				d.iDocumentTypeId,
				d.iVersion as Version,
				h.iLevelType as LevelType,
				d.dtmApproved,
				d.strApprovedBy,
				dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
				h.iDepartmentId as DepartmentId,
				1 as Virtual,
				v.iSort,
				h.strName as ParentFolderName,
				dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
				[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
				d.iApproved,
				d.iDraft,
				d.dtmPublish,
				d.dtmPublishUntil,
				dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
				d.iCreatedbyId,
                d.iInternetDoc,
				dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
				h.iHandbookId AS iParentHandbookId,
				CAST(0 as INT) AS iChildCount,
				d.iDeleted,
				d.dtmCreated,
				d.dtmAlter,
				1 AS IsDocument,
				v.iHandbookId AS VirtualHandbookId,
				d.iReadCount AS ReadCount
		FROM	m136_relVirtualRelation v
			INNER JOIN m136_tblDocument d 
				ON d.iDocumentId = v.iDocumentId
			INNER JOIN m136_tblHandbook h
				ON d.iHandbookId = h.iHandbookId
		WHERE	v.iHandbookId = @iHandbookId
			AND d.iLatestVersion = 1 AND d.iDeleted = 0
	UNION
		SELECT	h.iHandbookId as Id,
				-1 as iEntityId,
				h.iHandbookId,
				h.strName,
				-1 as iDocumentTypeId,
				NULL as Version,
				iLevelType as LevelType,
				NULL as dtmApproved,
				NULL as strApprovedBy,
				NULL as Responsible,
				h.iDepartmentId as DepartmentId,
				0 as Virtual,
				h.iSort,
				NULL as ParentFolderName,
				NULL as Path,
				0 as HasAttachment,
				NULL as iApproved,
				NULL as iDraft,
				NULL as dtmPublish,
				NULL as dtmPublishUntil,
				dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) as iAccess,
				h.iCreatedbyId,
                0 as iInternetDoc,
				NULL as iVersionStatus,
				h.iParentHandbookId,
				[dbo].[fn136_be_GetChildCount] (@iSecurityId, h.iHandbookId, @bShowDocumentsInTree) AS iChildCount,
				h.iDeleted,
				NULL AS dtmCreated,
				NULL AS dtmAlter,
				0 AS IsDocument,
				h.iHandbookId AS VirtualHandbookId,
				0 AS ReadCount
		FROM	m136_tblHandbook as h
		WHERE	(h.iParentHandbookId = @iHandbookId OR (h.iParentHandbookId IS NULL AND @iHandbookId IS NULL))
			AND h.iDeleted = 0
	ORDER BY IsDocument, iSort, d.strName;
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_fnGetItemValue]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: Feb 05, 2015
-- Description:	Get all handbookId of sub folders.
-- =============================================
CREATE  FUNCTION [dbo].[m136_fnGetItemValue]
(
	@iAutoId INT
)
RETURNS VARCHAR(200)
AS
BEGIN
	DECLARE @retval VARCHAR(200)
	IF @iAutoId IS NULL
	BEGIN
		SET @retval = NULL;
	END
	ELSE
	BEGIN
		SET @retval = (
			SELECT
			CASE regitem.eTypeId
				WHEN 1 THEN ''
				WHEN 2 THEN CAST(a.ValueTall AS VARCHAR)
				WHEN 3 THEN regval.RegisterValue
				WHEN 4 THEN CONVERT(VARCHAR, a.ValueDate, 104)
				WHEN 5 THEN a.ValueText
				WHEN 6 THEN regval.RegisterValue
				ELSE ''
			END
			FROM m147_relRegisterItemItem a
				INNER JOIN m147_tblRegisterItem regitem ON a.iRegisterItemId = regitem.iRegisterItemId
				INNER JOIN m147_tblRegister c ON c.iRegisterId = regitem.iRegisterId
				LEFT OUTER JOIN m147_tblRegisterItemValue regval ON regval.iRegisterItemValueId = a.iRegisterItemValueId
			WHERE 
				iAutoId = @iAutoId
		)
	END
	RETURN @retval
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentMetatags]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentMetatags]
	@iHandbookId int = 0,
	@iRegisterItemId int = 0,
	@bRecursive BIT = 0,
	@bIncludeLevel1 BIT = 0
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AvailableHandbooks TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	IF (@bRecursive = 1)
	BEGIN
		INSERT INTO @AvailableHandbooks 
			SELECT iHandbookId FROM [dbo].[m136_GetHandbookRecursive] (@iHandbookId, NULL, 0);
	END
	ELSE
	BEGIN
		INSERT INTO @AvailableHandbooks SELECT @iHandbookId
	END
	IF (@bIncludeLevel1 = 1)
	BEGIN
		DECLARE @TmpHandbooks TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
		INSERT INTO @TmpHandbooks
		SELECT iHandbookId 
			FROM @AvailableHandbooks
		INSERT INTO @AvailableHandbooks 
			SELECT iHandbookId 
			FROM [dbo].[m136_tblHandbook] 
			WHERE iLevelType = 1 
				  AND iDeleted = 0
				  AND iHandbookId NOT IN (SELECT iHandbookId FROM @TmpHandbooks)
	END
	SELECT * 
	INTO #resultTable
	FROM (
		SELECT
			d.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			d.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			h.iParentHandbookId,
			0 AS iChildCount,
            1 AS IsDocument,
			d.iHandbookId AS VirtualHandbookId,
			dbo.m136_fnGetItemValue(dt.iAutoId) AS MetatagValue
		FROM 
			m136_tblDocument d
            JOIN m136_tblHandbook h on d.iHandbookId = h.iHandbookId
			JOIN m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId 
				AND (dt.iRegisterItemId = @iRegisterItemId AND dt.iModuleId = 136)
		WHERE d.iLatestApproved = 1
			AND d.iHandbookId in (SELECT iHandbookId FROM @AvailableHandbooks)
	UNION
		SELECT 
			d.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			d.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			h.iParentHandbookId,
			0 AS iChildCount,
            1 AS IsDocument,
			virt.iHandbookId AS VirtualHandbookId,
			dbo.m136_fnGetItemValue(dt.iAutoId) AS MetatagValue
		FROM 
			m136_relVirtualRelation virt
			JOIN m136_tblDocument d on virt.iDocumentId = d.iDocumentId
			JOIN m136_tblHandbook h on d.iHandbookId = h.iHandbookId AND h.iHandbookId <> @iHandbookId
			JOIN m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId 
				AND (dt.iRegisterItemId = @iRegisterItemId AND dt.iModuleId = 136) 					
		WHERE 	
			d.iLatestApproved = 1
			AND virt.iHandbookId in (SELECT iHandbookId FROM @AvailableHandbooks)
	) r
	ORDER BY r.MetatagValue DESC, r.iSort
	SELECT * FROM #resultTable WHERE #resultTable.MetatagValue IS NOT NULL;
	SELECT d.Id AS iDocumentId,
        r.iItemId,
		b.strName,
		r.iPlacementId,
		r.iProcessrelationTypeId,
		b.strExtension,
		b.strDescription,
		r.iSort 
	FROM m136_relInfo r 
		JOIN (SELECT DISTINCT iEntityId, Id FROM #resultTable) d ON r.iEntityId = d.iEntityId
		JOIN m136_tblBlob b ON r.iItemId = b.iItemId
	WHERE r.iRelationTypeId = 20
	ORDER BY r.iSort, b.strName;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentMetatags]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentMetatags]
	-- Add the parameters for the stored procedure here
	@iHandbookId int = 0,
	@iRegisterItemId int = 0,
	@bRecursive BIT = 0,
	@bIncludeLevel1 BIT = 0,
	@iSecurityId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @AvailableHandbooks TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
	IF (@bRecursive = 1)
	BEGIN
		INSERT INTO @AvailableHandbooks 
			SELECT iHandbookId FROM [dbo].[m136_GetHandbookRecursive] (@iHandbookId, NULL, 0);
	END
	ELSE
	BEGIN
		INSERT INTO @AvailableHandbooks SELECT @iHandbookId
	END
	IF (@bIncludeLevel1 = 1)
	BEGIN
		DECLARE @TmpHandbooks TABLE(iHandbookId INT NOT NULL PRIMARY KEY);
		INSERT INTO @TmpHandbooks
		SELECT iHandbookId 
			FROM @AvailableHandbooks
		INSERT INTO @AvailableHandbooks 
			SELECT iHandbookId 
			FROM [dbo].[m136_tblHandbook] 
			WHERE iLevelType = 1 
				  AND iDeleted = 0
				  AND iHandbookId NOT IN (SELECT iHandbookId FROM @TmpHandbooks)
	END
	SELECT * 
	INTO #resultTable
	FROM (
		SELECT
			d.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			d.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			d.iCreatedbyId,
            d.iInternetDoc,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			CAST(0 as INT) AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			1 AS IsDocument,
			d.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount,
			dbo.m136_fnGetItemValue(dt.iAutoId) AS MetatagValue
		FROM 
			m136_tblDocument d
            JOIN m136_tblHandbook h on d.iHandbookId = h.iHandbookId
			JOIN m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId 
				AND (dt.iRegisterItemId = @iRegisterItemId AND dt.iModuleId = 136)
		WHERE d.iLatestVersion = 1
			AND d.iHandbookId in (SELECT iHandbookId FROM @AvailableHandbooks)
	UNION
		SELECT 
			virt.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			1 as Virtual,
			virt.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess,
			d.iCreatedbyId,
            d.iInternetDoc,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			CAST(0 as INT) AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			1 AS IsDocument,
			virt.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount,
			dbo.m136_fnGetItemValue(dt.iAutoId) AS MetatagValue
		FROM 
			m136_relVirtualRelation virt
			JOIN m136_tblDocument d on virt.iDocumentId = d.iDocumentId
			JOIN m136_tblHandbook h on d.iHandbookId = h.iHandbookId AND h.iHandbookId <> @iHandbookId
			JOIN m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId 
				AND (dt.iRegisterItemId = @iRegisterItemId AND dt.iModuleId = 136) 					
		WHERE 	
			d.iLatestVersion = 1
			AND virt.iHandbookId in (SELECT iHandbookId FROM @AvailableHandbooks)
	) r
	ORDER BY r.MetatagValue DESC, r.iSort
	SELECT * FROM #resultTable WHERE #resultTable.MetatagValue IS NOT NULL;
	SELECT d.Id AS iDocumentId,
        r.iItemId,
		b.strName,
		r.iPlacementId,
		r.iProcessrelationTypeId,
		b.strExtension,
		b.strDescription,
		r.iSort 
	FROM m136_relInfo r 
		JOIN (SELECT DISTINCT iEntityId, Id FROM #resultTable) d ON r.iEntityId = d.iEntityId
		JOIN m136_tblBlob b ON r.iItemId = b.iItemId
	WHERE r.iRelationTypeId = 20
	ORDER BY r.iSort, b.strName;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsOnTitleWithChapterInfo]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Search Documents Based On Title
-- =============================================
CREATE PROCEDURE [dbo].[m136_SearchDocumentsOnTitleWithChapterInfo] 
	-- Add the parameters for the stored procedure here
	@includeNonApprovedDocuments int = 0,
	@iSecurityId int = 0,
	@searchWord varchar(900) = '',
	@maxResults int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	declare @KEYWORD table(strKeyWord varchar(900) not null PRIMARY KEY)
	insert into @KEYWORD
	select Value from fn_Split(@searchWord, ',')
	
	DECLARE @KEYWORDCOUNT as INT
	SELECT @KEYWORDCOUNT = COUNT(*) FROM @Keyword

select top (@maxResults)
		d.iDocumentId, d.iVersion, d.strName, d.iEntityId, d.iDocumentTypeId, d.UrlOrFileName, 
		d.iHandbookId, d.UrlOrFileProperties, dt.ViewMode,
		ISNULL(dt.[Type], 0) as [Type], dt.strName as DocumentTemplateName, d.iLevelType,
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath, d.iApproved,  d.iDraft,
		dbo.fnSecurityGetPermission(136, 462, 1, d.iHandbookId) as iAccess,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), 
		d.iDraft, d.iApproved) iVersionStatus,		
		(select strName from m136_tblHandbook where iHandbookId = d.iHandbookId) as strChapterName,
		case
			when (select iLevelType from m136_tblHandbook where iHandbookId = d.iHandbookId)=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId 
					AND iDepartmentId=(select iDepartmentId from m136_tblHandbook where iHandbookId = d.iHandbookId)) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon
    from 
        m136_tblDocument d
		join m136_tblDocumentType dt on dt.iDocumentTypeId = d.iDocumentTypeId
    where 
		d.iDeleted = 0 AND
		d.iLatestApproved = 1		  AND
		d.iEntityId in (SELECT iEntityId
					FROM 
						m136_tblDocument doc 
						INNER JOIN @Keyword k
					   ON doc.strName like '%' + k.strKeyWord + '%'	
					   WHERE 	doc.iDeleted = 0 AND
		doc.iLatestApproved = 1			 
					 GROUP BY 
					  iEntityId
					 HAVING COUNT(iEntityId) = @KEYWORDCOUNT)
          AND  (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) & 0x01)>0
    ORDER BY d.iLevelType ASC, d.strName ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsOnTitle]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Search Documents Based On Title
-- =============================================
CREATE PROCEDURE [dbo].[m136_SearchDocumentsOnTitle] 
	-- Add the parameters for the stored procedure here
	@includeNonApprovedDocuments int = 0,
	@iSecurityId int = 0,
	@searchWord varchar(900) = '',
	@maxResults int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	declare @KEYWORD table(strKeyWord varchar(900) not null PRIMARY KEY)
	insert into @KEYWORD
	select Value from fn_Split(@searchWord, ',')
	
	DECLARE @KEYWORDCOUNT as INT
	SELECT @KEYWORDCOUNT = COUNT(*) FROM @Keyword

select top (@maxResults) 
		d.iDocumentId, d.iVersion, d.strName, d.iEntityId, d.iDocumentTypeId, d.UrlOrFileName, 
		d.iHandbookId, d.UrlOrFileProperties, dt.ViewMode,
		ISNULL(dt.[Type], 0) as [Type], dt.strName as DocumentTemplateName, d.iLevelType,
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath, d.iApproved,  d.iDraft,
		dbo.fnSecurityGetPermission(136, 462, 1, d.iHandbookId) as iAccess,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), 
		d.iDraft, d.iApproved) iVersionStatus
    from 
        m136_tblDocument d
		join m136_tblDocumentType dt on dt.iDocumentTypeId = d.iDocumentTypeId
    where 
		d.iDeleted = 0 
		AND
				((@includeNonApprovedDocuments = 1 AND (d.iLatestVersion = 1))
				OR
				(@includeNonApprovedDocuments = 0 AND (d.iLatestApproved = 1)))	
		AND d.iEntityId in (SELECT iEntityId
					FROM 
						m136_tblDocument doc 
						INNER JOIN @Keyword k
					   ON doc.strName like '%' + k.strKeyWord + '%'	
					   WHERE 	doc.iDeleted = 0 AND		
						((@includeNonApprovedDocuments = 1 AND (doc.iLatestVersion = 1))
						OR
						(@includeNonApprovedDocuments = 0 AND (doc.iLatestApproved = 1)))		 
					 GROUP BY 
					  iEntityId
					 HAVING COUNT(iEntityId) = @KEYWORDCOUNT) 
		  --d.strName like '%testis%'	AND
          AND  (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) & 0x01)>0
    ORDER BY d.iLevelType ASC, d.strName ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsBasedOnDocumentIdWithChapterInfo]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Search Documents Based On DocumentId
-- =============================================
CREATE PROCEDURE [dbo].[m136_SearchDocumentsBasedOnDocumentIdWithChapterInfo] 
	-- Add the parameters for the stored procedure here
	@includeNonApprovedDocuments int = 0,
	@iSecurityId int = 0,
	@iDocumentId varchar(1024) = '',
	@maxResults int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    select top (@maxResults) 
		r.iDocumentId, r.iVersion, d.iEntityId, d.strName, d.iHandbookId, 
		d.iDocumentTypeId, d.UrlOrFileName, d.UrlOrFileProperties, dt.ViewMode,  d.iApproved, d.iDraft,
		ISNULL(dt.[Type], 0) as [Type], dt.strName as DocumentTemplateName, d.iLevelType, 
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath,
		1 as iAccess,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,		
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon
    from (
        select 
			iDocumentId, max(iVersion) as iVersion
        from m136_tblDocument
        where iDeleted = 0 
            and ((iApproved in (1,4) and iDraft = 0) or (@includeNonApprovedDocuments = 1 and iApproved = 0))
        group by iDocumentId) r 
		join m136_tblDocument d on (r.iDocumentId = d.iDocumentId and r.iVersion = d.iVersion)
		join m136_tblDocumentType dt on (d.iDocumentTypeId = dt.iDocumentTypeId)
		join m136_tblHandbook h on d.iHandbookId = h.iHandbookId
    where 
		cast(r.iDocumentId as varchar(10)) like @iDocumentId
		and (
        (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) & 0x01)>0
            or r.iDocumentId in (select iDocumentId from m136_relVirtualRelation where 
            (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0)
        )
		and (d.iApproved = 1 or (@includeNonApprovedDocuments = 1 and d.iApproved in (0,1)))
    order by d.iLevelType, r.iDocumentId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_SearchDocumentsBasedOnDocumentId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Search Documents Based On DocumentId
-- =============================================
CREATE PROCEDURE [dbo].[m136_SearchDocumentsBasedOnDocumentId] 
	-- Add the parameters for the stored procedure here
	@includeNonApprovedDocuments int = 0,
	@iSecurityId int = 0,
	@iDocumentId varchar(1024) = '',
	@maxResults int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    select top (@maxResults) 
		r.iDocumentId, r.iVersion, d.iEntityId, d.strName, d.iHandbookId, 
		d.iDocumentTypeId, d.UrlOrFileName, d.UrlOrFileProperties, dt.ViewMode,  d.iApproved, d.iDraft,
		ISNULL(dt.[Type], 0) as [Type], dt.strName as DocumentTemplateName, d.iLevelType, 
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath,
		1 as iAccess,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus
    from (
        select 
			iDocumentId, max(iVersion) as iVersion
        from m136_tblDocument
        where iDeleted = 0 
            and ((iApproved in (1,4) and iDraft = 0) or (@includeNonApprovedDocuments = 1 and iApproved = 0))
        group by iDocumentId) r 
		join m136_tblDocument d on (r.iDocumentId = d.iDocumentId and r.iVersion = d.iVersion)
		join m136_tblDocumentType dt on (d.iDocumentTypeId = dt.iDocumentTypeId)
    where 
		cast(r.iDocumentId as varchar(10)) like @iDocumentId
		and (
        (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) & 0x01)>0
            or r.iDocumentId in (select iDocumentId from m136_relVirtualRelation where 
            (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0)
        )
		and (d.iApproved = 1 or (@includeNonApprovedDocuments = 1 and d.iApproved in (0,1)))
    order by d.iLevelType, r.iDocumentId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_rptGetPersonChapterConfirmsSums]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_rptGetPersonChapterConfirmsSums]
(
	@iSecurityId INT = 0,
	@iHandbookId INT = 0,
	@fromDate DATETIME = NULL,
	@toDate DATETIME = NULL,
	@iEmployeeId INT = 0,
	@iLatestVersions BIT = 1,
	@recursive BIT = 0
)
AS
BEGIN
	SET NOCOUNT ON;
	IF @toDate <> NULL
	BEGIN
		set @toDate = DATEADD(DAY, 1, @toDate)
	END
	DECLARE @empTable TABLE(iEmployeeId INT NULL)
	--Seg selv
	IF @iEmployeeId = @iSecurityId
		INSERT INTO @empTable(iEmployeeId) SELECT @iEmployeeId
	--Modul-administrator
	IF (SELECT COUNT(iEmployeeId) FROM @empTable)=0
	BEGIN
		IF (dbo.fnSecurityGetPermission(136, 460, @iSecurityId,0) & 2) = 2
		BEGIN
			INSERT INTO @emptable SELECT @iEmployeeId
		END
	END
	--Kan lese kvitteringer pÃ¥ egen org-enhet
	IF (SELECT COUNT(iEmployeeId) FROM @empTable) = 0
	BEGIN
		IF (dbo.fnSecurityGetPermission(136, 460, @iSecurityId, 0) & 4) = 4
		BEGIN
			INSERT INTO @emptable
			SELECT iEmployeeId FROM tblEmployee WHERE iDepartmentId 
			IN (SELECT iDepartmentId FROM tblEmployee WHERE iEmployeeId = @iSecurityId) AND iEmployeeId = @iEmployeeId
		END
	END
	IF (SELECT COUNT(iEmployeeId) FROM @empTable) > 0
	BEGIN
		--Mappeutdrag:
		DECLARE @bookTable TABLE(iHandbookId INT NOT NULL, 
			strChapterName VARCHAR(400) NULL, 
			strParentPath VARCHAR(1000) NULL, 
			confirmPercent FLOAT NULL, iMin INT )
		INSERT INTO @bookTable
		SELECT
			iHandbookId,
			strName,
			dbo.fn136_GetParentPath(iHandbookId),
			dbo.m136_fnPersonHandbookConfirmPercentage(@iEmployeeId, iHandbookId, @fromDate, @toDate),
			iMin
		FROM
			m136_tblHandbook
		WHERE
			(iHandbookId = @iHandbookId OR 
			(@recursive = 1 AND iHandbookId IN (SELECT iHandbookId FROM dbo.m136_GetHandbookRecursive(@iHandbookId, @iSecurityId, 1))))
			AND iDeleted = 0
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01) > 0 
		--Dokumentutdrag:
		DECLARE @docTable TABLE(iEntityId INT NULL, 
			iDocumentId INT NULL, 
			strName varchar(200) NULL, 
			iVersion INT NULL, 
			iHandbookId INT NULL, 
			iSort INT NULL, 
			iVirt INT not NULL);
		INSERT INTO @docTable
		SELECT	doc.iEntityId,
			doc.iDocumentId,
			doc.strName,
			doc.iVersion,
			doc.iHandbookId,
			doc.iSort,
			0
		FROM
			@bookTable book
			RIGHT JOIN m136_tblDocument doc ON doc.iHandbookId = book.iHandbookId
		WHERE
			doc.iHandbookId = book.iHandbookId
			AND iLatestApproved = 1;
		--virtual
		INSERT INTO @docTable
		SELECT 	doc.iEntityId,
			virt.iDocumentId,
			doc.strName,
			doc.iVersion,
			virt.iHandbookId,
			virt.iSort,
			1
		FROM
			m136_relVirtualRelation virt
			left join m136_tblDocument doc on doc.iDocumentId=virt.iDocumentId
			right join @bookTable book on book.iHandbookId=virt.iHandbookId
		WHERE
			doc.iLatestApproved = 1;
		SELECT
			doc.iDocumentId,
			doc.iEntityId,
			doc.strName,
			doc.iVersion,
			doc.iHandbookId,
			book.strChapterName,
			book.strParentPath,
			book.confirmPercent,
			CASE WHEN (ISDATE(cr.dtmConfirm) = 1 AND cr.iEmployeeId = @iEmployeeId) THEN 1 ELSE 0 END AS iReadStatus,
			cr.dtmConfirm,
			doc.iVirt,
			dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, 
				details.dtmPublish, details.dtmPublishUntil, GETDATE(), details.iDraft, details.iApproved) AS iVersionStatus,
			details.iApproved,
			details.iDraft
		FROM
			@empTable emp
			CROSS JOIN @docTable doc 
			LEFT JOIN m136_tblDocument details ON details.iEntityId = doc.iEntityId
			LEFT OUTER JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId
				AND emp.iEmployeeId = cr.iEmployeeId
				AND (dtmConfirm > @fromDate OR @fromDate IS NULL OR dtmConfirm IS NULL)
				AND (dtmConfirm < @toDate OR @toDate IS NULL OR dtmConfirm IS NULL)
			LEFT OUTER JOIN @bookTable book ON doc.iHandbookId=book.iHandbookId
		ORDER BY
			doc.iSort,
			doc.iDocumentId,
			doc.iVersion DESC,
			cr.dtmConfirm DESC
	END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfSoonToExpireDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Soon To Expire Documents
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfSoonToExpireDocuments] 
	-- Add the parameters for the stored procedure here
	@iExpiresCount int = 0,
	@iExpiresLimit int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&16)=16
		
	select top (@iExpiresCount) 
        0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        3 as iAccess, 
        d.iHandbookId,
        d.dtmPublishUntil,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon, 
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
	where
		d.iLatestApproved = 1
		AND d.iApproved=1
		AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
		AND (datediff(d, getdate(), d.dtmPublishUntil) < @iExpiresLimit
				OR d.dtmPublishUntil<getdate() )
	order by
		d.dtmPublishUntil ASC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfProcessDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of My Work Documents
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfProcessDocuments] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@entityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	                   
    
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
			WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1

	select 
		0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        5 as iAccess, 
        d.iHandbookId, 
        ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon,
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        join m136_relInfo rel on d.iDocumentId = rel.iItemId
	where rel.iRelationTypeId = 136
		and d.iLatestApproved = 1
        and d.iDraft = 0
        AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
        and d.iApproved = 1
        and rel.iEntityId = @entityId
	order by rel.iSort
		
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfMyWorkDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of My Work Documents
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfMyWorkDocuments] 
	-- Add the parameters for the stored procedure here
	@iMyLatestDocumentCount int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
			WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&3)=3
	
	select top (@iMyLatestDocumentCount) 
        0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        3 as iAccess, 
        d.iHandbookId, 
        ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon, 
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
        left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
        left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId 
		where
		d.iLatestVersion = 1
		AND (d.iApproved not in (1,4))
        AND not (d.iApproved = 0 and d.iDraft = 0)
		AND d.iCreatedById=@iSecurityId
        AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
	order by
		d.dtmCreated DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfMyDocumentsSentToApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of My Documents Sent To Approval
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfMyDocumentsSentToApproval] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT 
        0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        5 as iAccess, 
        d.iHandbookId, 
        ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon,
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType,
        case
            when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
            else ''
        end as strSentToBeApprovedBy,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById        
        left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
    where
        d.iDeleted = 0
        and d.iLatestVersion = 1 
        and d.iDraft = 0
        and d.iApproved = 0
        and (d.iCreatedById = @iSecurityId or d.iAlterId = @iSecurityId)                      
                
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfLatestApprovedSubscriptions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents By Latest Approved Subscriptions
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfLatestApprovedSubscriptions] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iApprovedDocumentCount int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @iUserDepId int
	select @iUserDepId=iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId     

	declare @iHandbookId int
    declare @iMin int
    declare @iMax int
    declare @iLevel int
    declare @subTableSubscribe table(iHandbookId int not null PRIMARY KEY, iMin int, iMax int, iLevel int)
    declare cur cursor for
    select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iDeleted = 0 AND iHandbookId in (SELECT iHandbookId FROM m136_tblSubscribe WHERE iEmployeeId=@iSecurityId AND iFrontpage=1 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1)

    open cur
    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    while @@fetch_status=0
    begin
        insert into @subTableSubscribe(iHandbookId, iMin, iMax, iLevel)
            select iHandbookId, iMin, iMax, iLevel from m136_tblHandbook where iDeleted = 0 AND iMin >= @iMin and iMax <= @iMax and iHandbookId not in (select iHandbookId from @subTableSubscribe)

    fetch next from cur into @iHandbookId, @iMin, @iMax, @iLevel
    end
    close cur
    deallocate cur
    
    declare @subTableRelation table(iDocumentId int not null PRIMARY KEY)
	insert into @subTableRelation
	select distinct iDocumentId from m136_relVirtualRelation where iHandbookId in 
		        (SELECT iHandbookId FROM @subTableSubscribe)
		        
	insert into @subTableRelation
	select iDocumentId 
	from m136_tblSubscriberDocument 
	where iEmployeeId = @iSecurityId 
		AND iDocumentId not in  (select iDocumentId from @subTableRelation)
		        		        
    declare @tmpBooks table(iHandbookId int not null PRIMARY KEY)
    insert into @tmpBooks
    select iHandbookId
    from m136_tblHandbook
    where (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&32)=32 AND 
		(dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1 AND iDeleted = 0
		
	
	SELECT top (@iApprovedDocumentCount)
        0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        dbo.fnSecurityGetPermission(136, 462, 1, d.iHandbookId) as iAccess, 
        d.iHandbookId, 
        d.dtmApproved,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon, 
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
		join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
    WHERE
		d.iLatestApproved = 1
		AND d.iApproved = 1
		and d.dtmApproved <= GETDATE()
		AND h.iDeleted = 0
		AND (
            (d.iHandbookId in (SELECT iHandbookId FROM @subTableSubscribe))
		    OR 
            (h.iDepartmentId=@iUserDepId)
            OR
            d.iDocumentId in (select iDocumentId from @subTableRelation)
            OR 
            d.iHandbookId in (SELECT iHandbookId from @tmpBooks)
        )
	order by
		d.dtmApproved DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsUnderWorkByOthers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents Under Work By Others
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsUnderWorkByOthers] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@iOtherVersionZeroDocumentCount int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&5)=5

	select top (@iOtherVersionZeroDocumentCount) 
        0 as Virtual,
        d.iDocumentId, 
        d.iEntityId,
        d.strName, 
        5 as iAccess, 
        d.iHandbookId, 
        ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
        d.iVersion,
        dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
        d.iApproved, 
        d.iDraft,
        LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
        d.UrlOrFileName,
        d.iDocumentTypeId,
        t.strName as DocumentTemplateName,
        t.strIcon as DocumentTemplateIcon,
        ISNULL(t.Type, 0) as DocumentFileType,
        h.iLevelType,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
	where
		d.iLatestVersion = 1
		AND d.iApproved not in (1,4)
		AND d.iVersion = 0
		AND d.iDraft = 1
		AND d.iCreatedById<>@iSecurityId
		AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
	order by
		d.dtmCreated DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsOnReview]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents On Review
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsOnReview] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 17) = 17

	SELECT 
        0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
    where
        d.iLatestVersion = 1
        and d.iDraft = 0
        and d.iApproved = 3
        AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)                
                
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsBySearchDynamic]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents By Dynamic Search
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsBySearchDynamic] 
	-- Add the parameters for the stored procedure here
	@iHandbookId int = 0,
	@iSecurityId int = 0,
	@iDepartmentId int = 0,
	@iDateFilterId int = 0,
	@dtmFrom Datetime = NULL,
	@dtmTo Datetime = NULL,
	@iDocTypeId int = 0,
	@strSearchString varchar(1024) = ''	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	
	declare @permissionToHandbook table(iHandbookId int not null PRIMARY KEY)
	
	insert into @permissionToHandbook
	select iHandbookId FROM m136_tblHandbook  
		WHERE iDeleted=0 AND (dbo.fnSecurityGetPermission(136, 462,  @iSecurityId, iHandbookId) & 0x01)>0 

	
	SELECT DISTINCT 
        0 as Virtual,
		d.iDocumentId, 
		d.iEntityId,
		d.strName, 
		1 as iAccess, 
		d.iHandbookId,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
		d.iVersion,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
		d.iApproved, 
		d.iDraft,
		d.UrlOrFileName,
		d.iDocumentTypeId,
		t.strName as DocumentTemplateName,
		t.strIcon as DocumentTemplateIcon, 
		ISNULL(t.Type, 0) as DocumentFileType,
		h.iLevelType
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
		left join m136_tblMetaInfoRichText RichTextInfo on RichTextInfo.iEntityId=d.iEntityId 
		left join m136_tblMetaInfoText TextInfo on TextInfo.iEntityId=d.iEntityId 
	WHERE 
		d.iApproved=1 
        AND iLatestApproved=1
        AND (
            ((@iDateFilterId > 0 AND (@dtmFrom IS NOT NULL OR @dtmTo IS NOT NULL))
            AND (
                -- 0 - None, 1 - Created, 2 - Modified, 3 - Approved, 4 - Expired
                (@iDateFilterId = 1 AND (d.dtmCreated >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmCreated <= @dtmTo OR @dtmTo IS NULL))
                OR
                (@iDateFilterId = 2 AND d.dtmAlter IS NOT NULL AND (d.dtmAlter >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmAlter <= @dtmTo OR @dtmTo IS NULL))
                OR
                (@iDateFilterId = 3 AND d.dtmApproved IS NOT NULL AND (d.dtmApproved >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmApproved <= @dtmTo OR @dtmTo IS NULL))
                OR
                (@iDateFilterId = 4 AND d.dtmPublishUntil IS NOT NULL AND (d.dtmPublishUntil >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmPublishUntil <= @dtmTo OR @dtmTo IS NULL))
            )) OR @iDateFilterId = 0 OR @iDateFilterId IS NULL
        )
		AND((@iDepartmentId < 0) AND h.iLevelType=1 )
        AND d.iDraft=0 
        and (
            @iDocTypeId=0
            or d.iDocumentTypeId=@iDocTypeId
        )
        AND d.iHandbookId in (select iHandbookId from @permissionToHandbook)				
		AND (
			RichTextInfo.value LIKE @strSearchString
			OR TextInfo.value LIKE @strSearchString
			OR d.strName LIKE @strSearchString
			OR d.strDescription LIKE @strSearchString
	    ) 
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsBySearch]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents By Search
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsBySearch] 
	-- Add the parameters for the stored procedure here
	@iHandbookId int = 0,
	@iSecurityId int = 0,
	@iDepartmentId int = 0,
	@iDateFilterId int = 0,
	@dtmFrom Datetime = NULL,
	@dtmTo Datetime = NULL,
	@iDocTypeId int = 0,
	@strSearchString varchar(1024) = '',
	@likeSearchWords varchar(900) = ''	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    declare @min int
    declare @max int

    select @min = 0, @max = 2147483647
    select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @iHandbookId

    declare @iUserDepartmentId int
    select @iUserDepartmentId=iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId
    
    declare @HandbookMinMax table(iHandbookId int not null PRIMARY KEY)	
	insert into @HandbookMinMax
	select iHandbookId from m136_tblHandbook where iMin >= @min and iMax <= @max
	
	declare @DocIdVirtualRel table(iDocumentId int not null PRIMARY KEY)	
	insert into @DocIdVirtualRel
	select DISTINCT iDocumentId from m136_relVirtualRelation where iHandbookId in (select iHandbookId from @HandbookMinMax)

    declare @richInfo table(iEntityId int not null PRIMARY KEY, RANK int not null)
    if @strSearchString = ''
		begin
			insert into @richInfo
			select iEntityId,10 
			from m136_tblDocument doc 
			where 
				doc.iDeleted=0 
				and doc.iApproved=1
				and	(@iHandbookId=0
					or (
						doc.iHandbookId in (select iHandbookId from @HandbookMinMax)
						or doc.iDocumentId in (select iDocumentId from @DocIdVirtualRel)
					))
					and (
						@iDocTypeId=0
						or doc.iDocumentTypeId=@iDocTypeId
					)
		end
    else
		begin
			declare @KEYWORD table(strKeyWord varchar(900) not null PRIMARY KEY)
			insert into @KEYWORD
			select Value from fn_Split(@likeSearchWords, ',')
			
			DECLARE @KEYWORDCOUNT as INT
			SELECT @KEYWORDCOUNT = COUNT(*) FROM @Keyword
	
			insert into @richInfo
            select iEntityId
                ,1000 AS RANK
            FROM
                m136_tblDocument doc
            where
				(
				  @KEYWORDCOUNT = 0 
				  OR 
				  doc.iEntityId in (SELECT iEntityId
							FROM 
								m136_tblDocument doc 
								INNER JOIN @Keyword k
							   ON doc.strName like '%' + k.strKeyWord + '%'					 
							 GROUP BY 
							  iEntityId
							 HAVING COUNT(iEntityId) = @KEYWORDCOUNT))
				AND
                (@iHandbookId=0
                or (
	                doc.iHandbookId in (select iHandbookId from @HandbookMinMax)
					or doc.iDocumentId in (select iDocumentId from @DocIdVirtualRel)
                ))
                and (
	                @iDocTypeId=0
	                or doc.iDocumentTypeId=@iDocTypeId		
	                )
		
		
			insert into @richInfo
            select RichTextInfo.iEntityId
                ,RANK
            FROM
                m136_tblDocument doc right join 
                m136x_tblTextIndex RichTextInfo on doc.iEntityId=RichTextInfo.iEntityId 
                inner join CONTAINSTABLE (m136x_tblTextIndex, totalvalue, @strSearchString) AS KEY_TBL
                on RichTextInfo.iEntityId=KEY_TBL.[KEY]
            where
				doc.iEntityId not in (select iEntityId from @richInfo)
				AND
                (@iHandbookId=0
                or (
	                doc.iHandbookId in (select iHandbookId from @HandbookMinMax)
					or doc.iDocumentId in (select iDocumentId from @DocIdVirtualRel)
                ))
                and (
	                @iDocTypeId=0
	                or doc.iDocumentTypeId=@iDocTypeId
                )
    end

	declare @permissionToHandbook table(iHandbookId int not null PRIMARY KEY)

	insert into @permissionToHandbook
	select iHandbookId FROM m136_tblHandbook  
		WHERE iDeleted=0 AND (dbo.fnSecurityGetPermission(136, 462,  @iSecurityId, iHandbookId) & 0x01)>0 

    SELECT DISTINCT 	
		case
			when h.iLevelType=1 then isnull(RichTextInfo.Rank, 500)+ 100000
			when h.iDepartmentId=@iUserDepartmentId then isnull(RichTextInfo.Rank, 500)+ 10000
			when h.iLevelType=1 AND h.iDepartmentId=@iUserDepartmentId then isnull(RichTextInfo.Rank, 500)+ 110000
			else isnull(RichTextInfo.Rank, 500)
		end Rank,
		0 as Virtual,
		d.iDocumentId, 
		d.iEntityId,
		d.strName, 
		1 as iAccess, 
		d.iHandbookId,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
		d.iVersion,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
		d.iApproved, 
		d.iDraft,
		d.UrlOrFileName,
		d.iDocumentTypeId,
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath,
		t.strName as DocumentTemplateName,
		t.strIcon as DocumentTemplateIcon, 
		ISNULL(t.Type, 0) as DocumentFileType,
		h.iLevelType
	FROM 
		m136_tblDocument d
		join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
		join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
		left outer join @richInfo RichTextInfo on RichTextInfo.iEntityId=d.iEntityId
	WHERE 
		d.iApproved=1 
		AND iLatestApproved=1
		AND (
			((@iDateFilterId > 0 AND (@dtmFrom IS NOT NULL OR @dtmTo IS NOT NULL))
			AND (
				-- 0 - None, 1 - Created, 2 - Modified, 3 - Approved, 4 - Expired
				(@iDateFilterId = 1 AND (d.dtmCreated >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmCreated <= @dtmTo OR @dtmTo IS NULL))
				OR
				(@iDateFilterId = 2 AND d.dtmAlter IS NOT NULL AND (d.dtmAlter >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmAlter <= @dtmTo OR @dtmTo IS NULL))
				OR
				(@iDateFilterId = 3 AND d.dtmApproved IS NOT NULL AND (d.dtmApproved >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmApproved <= @dtmTo OR @dtmTo IS NULL))
				OR
				(@iDateFilterId = 4 AND d.dtmPublishUntil IS NOT NULL AND (d.dtmPublishUntil >= @dtmFrom OR @dtmFrom IS NULL) AND (d.dtmPublishUntil <= @dtmTo OR @dtmTo IS NULL))
			)) OR @iDateFilterId = 0 OR @iDateFilterId IS NULL
		)
		AND d.iDraft=0 
		and (
			@iDocTypeId=0
			or d.iDocumentTypeId=@iDocTypeId
		)
		AND d.iHandbookId in (select iHandbookId from @permissionToHandbook)
		AND (
			(h.iLevelType=1 AND @iDepartmentId=-1)
			or (h.iDepartmentId=@iDepartmentId AND @iDepartmentId>0)
			or @iDepartmentId=0
			)
		AND (
			Rank>0
			) 
	order by Rank desc
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsByAdminSearch]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents By Admin Search
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsByAdminSearch] 
	-- Add the parameters for the stored procedure here
	@iMine int = 0,
	@iInternet int = 0,
	@iSecurityId int = 0,
	@iHandbookId int = 0,
	@iApprovalStatus int = 0,
	@iCreatorId int = 0,
	@iDocTypeId int = 0,
	@iDays int = 0,
	@useFullText int = 0,
	@iApproverId int = 0,
	@dtmFrom DateTime = NULL,
	@dtmTo DateTime = NULL,
	@iDocumentId int = 0,
	@strSearchText varchar(1024) = '',
	@likeSearchWords varchar(900) = '',
	@iDateFilterId int = 0,
	@dtmFilterFrom Datetime = NULL,
	@dtmFilterTo Datetime = NULL		
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON; 
               
    declare @iApproved int
    declare @iDraft int
    declare @iDeleted int
    
    if @iDays>=0
		BEGIN
			set @iApprovalStatus = 1
		END

    if @iApprovalStatus>=0
        begin
        SELECT @iApproved =
            case @iApprovalStatus
            -- Avventer godkjenning:
            when 0 then 0
            -- Godkjent:
            when 1 then 1
            -- Avvist:
            when 2 then 2
            -- Hoering:
            when 3 then 3
            -- Arkivert:
            when 4 then 4
            else -1
            end
        SELECT @iDraft =
            case @iApprovalStatus
            -- Kladd
            when 2 then 1
            when 5 then -1
            when 6 then 1
            else 0
            end

        SELECT @iDeleted=
            case @iApprovalStatus
            -- Slettet
            when 5 then 1
    --		when 6 then -1
            else 0
            end
        end

    declare @iMin int
    declare @iMax int
    if @iHandbookId <> 0
        begin
            select @iMin=iMin FROM m136_tblHandbook where iHandbookId=@iHandbookId
            select @iMax=iMax FROM m136_tblHandbook where iHandbookId=@iHandbookId
        end
    else
        begin
            set @iMin = 0
            set @iMax = 0
        end
	                        
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	
	insert into @HandbookPermissions
	select 
		iHandbookId 
	FROM 
		m136_tblHandbook 
	WHERE 
		iDeleted = 0 AND 
		(
			((dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 30) > 0 and (@iApproved<>0 or @iApprovalStatus<0) )
			or ((dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 17) = 17 and @iApproved=0)
			or ((dbo.fnSecurityGetPermission(136, 460, @iSecurityId, 0) & 1) = 1 and (@iApproved<>0 or @iApprovalStatus<0))
		)
	                        
	declare @richInfo table(iEntityId int not null, RANK int not null)
    
    if len(ltrim(rtrim(@strSearchText)))>0
		BEGIN
			if @useFullText=1
			begin
				declare @KEYWORD table(strKeyWord varchar(900) not null PRIMARY KEY)
				insert into @KEYWORD
				select Value from fn_Split(@likeSearchWords, ',')
				
				DECLARE @KEYWORDCOUNT as INT
				SELECT @KEYWORDCOUNT = COUNT(*) FROM @Keyword
			
				insert into @richInfo
				select iEntityId
					,1000 AS RANK
				FROM
					m136_tblDocument doc
				where
					(
					  @KEYWORDCOUNT = 0 
					  OR 
					  doc.iEntityId in (SELECT iEntityId
								FROM 
									m136_tblDocument doc 
									INNER JOIN @Keyword k
								   ON doc.strName like '%' + k.strKeyWord + '%' COLLATE Danish_Norwegian_CI_AS					 
								 GROUP BY 
								  iEntityId
								 HAVING COUNT(iEntityId) = @KEYWORDCOUNT))
			
				insert into @richInfo
				select iEntityId
					,RANK
				FROM
					m136x_tblTextIndex RichTextInfo 
					inner join CONTAINSTABLE (m136x_tblTextIndex, totalvalue, @strSearchText) AS KEY_TBL
					on RichTextInfo.iEntityId=KEY_TBL.[KEY]
				WHERE iEntityId not in (select iEntityId from @richInfo)
			end
			else
			begin
				insert into @richInfo
				select iEntityId, 1
				from m136_tblMetaInfoRichText
				where 
					value LIKE '%'+ @strSearchText +'%' COLLATE Danish_Norwegian_CI_AS

				insert into @richInfo
				select iEntityId, 1
				from m136_tblMetaInfoText
				where 
					value LIKE '%'+ @strSearchText +'%' COLLATE Danish_Norwegian_CI_AS
			end
			
			    
		
			insert into @richInfo
					select iEntityId,0 
					from m136_tblDocument d 
					where 
						d.iEntityId not in (select iEntityId from @richInfo)
						AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
						AND (CONTAINS(*, @strSearchText))
		END
	else
		begin
			insert into @richInfo
			select iEntityId,10 
			from m136_tblDocument doc 
			where 
			(
				doc.iHandbookId in (select iHandbookId from @HandbookPermissions)
			)
		end 
	                   
    Select 
        distinct rank, 
        0 as Virtual,
		d.iDocumentId, 
		d.iEntityId,
		d.strName, 
		d.strDescription,
		dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
		d.iHandbookId,
		h.strName as strChapterName,
		case
			when h.iLevelType=1 then 'book_blue1.gif'
			when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
			else 'book_blue.gif'
		end as strChapterIcon,
		d.iVersion,
		dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
		d.iApproved, 
		d.iDraft,
		d.iDocumentTypeId,
		t.strName as DocumentTemplateName,
		t.strIcon as DocumentTemplateIcon,
		ISNULL(t.Type, 0) as DocumentFileType,
		h.iLevelType,
		d.iDeleted, 
		dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
	FROM 
		m136_tblDocument d
        join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
        join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        join @richInfo RichTextInfo on RichTextInfo.iEntityId=d.iEntityId
        left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
    where       
		d.iHandbookId in (select iHandbookId from @HandbookPermissions)
		AND (
			(d.iLatestApproved = 1 AND @iApprovalStatus=1) 
			OR 
			(d.iLatestVersion = 1 AND @iApprovalStatus<>1)
			OR
			(@iDeleted = 1 AND 
			iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId))
		)
		--Internett dokumenter
		AND (
			@iInternet = 0 OR			
            (d.iInternetDoc=1)
		)
        --Mine dokumenter:
        AND (
            @iMine = 0 OR
            (d.iCreatedById=@iSecurityId)
        )
        --Bok, rekursiv
        AND  (
            @iHandbookId = 0 OR
            (d.iHandbookId = @iHandbookId OR (	h.iMin>@iMin
		                        AND h.iMax<@iMax)
            )
        )
        --Godkjenningsstatus
        AND (
            (@iApprovalStatus<0 AND d.iDeleted=0) OR
            (
                (d.iApproved=@iApproved OR @iApproved<0)
                AND (d.iDraft = @iDraft OR @iDraft<0)
                AND (d.iDeleted = @iDeleted OR @iDeleted<0)
            )
        )
        --Søketekst
        AND  (
            @useFullText=1 OR
            (
				len(ltrim(rtrim(@strSearchText)))=0 OR
				(
					( 
						(isnull(rank, 0)>0
						OR d.strName LIKE '%'+ replace(@strSearchText, 'AND ', '') +'%' COLLATE Danish_Norwegian_CI_AS
						OR d.strDescription LIKE '%'+ replace(@strSearchText, 'AND ', '') +'%' COLLATE Danish_Norwegian_CI_AS
						)
					)
				)	
            )	
        )
        --DokumentId
        AND(
            @iDocumentId = 0 OR d.iDocumentId = @iDocumentId
        )
        -- Eier / journalist
        AND (
            @iCreatorId=0 OR
            (
                d.iCreatedById = @iCreatorId
            )
        )
        -- Dokumenttype
        AND (
            @iDocTypeId=0 OR
            (
                d.iDocumentTypeId=@iDocTypeId
            )
        )
        -- Utløper

        AND (
            (@dtmFrom IS NULL AND @dtmTo IS NULL AND (
                @iDays=-1 OR
                (
                    d.dtmPublishUntil< dateadd(day, @iDays , getdate())  AND @iDays>0
                )
                OR (@iDays=0 AND d.dtmPublishUntil<getdate())
            )) OR
            @dtmFrom IS NOT NULL AND @dtmTo IS NOT NULL AND d.dtmPublishUntil BETWEEN @dtmFrom and @dtmTo
        )
        -- Godkjenner        
        AND	(	
			@iApproverId=0 
			OR
			(@iApprovalStatus = 0 AND sfa.iEmployeeId = @iApproverId)
			OR
			(@iApprovalStatus <> 0 AND d.iApprovedById = @iApproverId)
			)
        -- Date Filter
        AND (
			((@iDateFilterId > 0 AND (@dtmFilterFrom IS NOT NULL OR @dtmFilterTo IS NOT NULL))
			AND (
				-- 0 - None, 1 - Created, 2 - Modified, 3 - Approved, 4 - Expired
				(@iDateFilterId = 1 AND (d.dtmCreated >= @dtmFilterFrom OR @dtmFilterFrom IS NULL) AND (d.dtmCreated <= @dtmFilterTo OR @dtmFilterTo IS NULL))
				OR
				(@iDateFilterId = 2 AND d.dtmAlter IS NOT NULL AND (d.dtmAlter >= @dtmFilterFrom OR @dtmFilterFrom IS NULL) AND (d.dtmAlter <= @dtmFilterTo OR @dtmFilterTo IS NULL))
				OR
				(@iDateFilterId = 3 AND d.dtmApproved IS NOT NULL AND (d.dtmApproved >= @dtmFilterFrom OR @dtmFilterFrom IS NULL) AND (d.dtmApproved <= @dtmFilterTo OR @dtmFilterTo IS NULL))
				OR
				(@iDateFilterId = 4 AND d.dtmPublishUntil IS NOT NULL AND (d.dtmPublishUntil >= @dtmFilterFrom OR @dtmFilterFrom IS NULL) AND (d.dtmPublishUntil <= @dtmFilterTo OR @dtmFilterTo IS NULL))
			)) OR @iDateFilterId = 0 OR @iDateFilterId IS NULL
		)

    order by rank desc, iHandbookId, iDocumentId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsAwaitingMyApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents Awaiting My Approval
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsAwaitingMyApproval] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 17) = 17
		
	select 
        0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            case
                when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
                else ''
            end as strSentToBeApprovedBy,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
            left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
        where
        d.iLatestVersion = 1
        and sfa.iEmployeeId = @iSecurityId
        and d.iDraft = 0
        and d.iApproved = 0
        AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfDocumentsAwaitingApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Documents Awaiting Approval
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfDocumentsAwaitingApproval] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 17) = 17
		
	SELECT 
        0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            case
                when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
                else ''
            end as strSentToBeApprovedBy,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
            left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
    where
        d.iLatestVersion = 1
        and d.iApproved = 0        
        and (isnull(sfa.iEmployeeId, 0) in (@iSecurityId,0))
        and d.iDraft = 0
        AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedOrNewNotYetApprovedDocumentsByHandbookId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Or New Not Yet Approved Documents By HandbookId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedOrNewNotYetApprovedDocumentsByHandbookId] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@handbookId int = 0,
	@iRegsterItemId int = 0,
	@recursive int = 0,
	@extendRelatedDoc int =  0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	                    
    declare @min int
    declare @max int
    select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

    declare @tmp table(handbookId int not null PRIMARY KEY)
    
    insert into @tmp(handbookId)
    select iHandbookId from m136_tblHandbook where iDeleted = 0 AND ((@recursive = 1 and iMin > @min and iMax < @max) or iHandbookId = @handbookId)
	                
	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	
	insert into @HandbookPermissions
	select handbookId FROM @tmp 
			WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, handbookId)&1)=1

	select * from (
		select distinct
			0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
		where 
			d.iDeleted = 0
			AND
				((@extendRelatedDoc = 1 AND (d.iApproved <> 4))
				OR
				(@extendRelatedDoc = 0 AND (d.iApproved = 1)))		
			and d.iLatestVersion = 1
			and d.dtmPublish <= getDate()
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)		
			AND 
            (
				(@handbookId = 0 or d.iHandbookId = @handbookId)
				or 
				(
					@recursive = 1
                    and
                    @handbookId > 0
					and
					d.iHandbookId in (select handbookId from @tmp)
				)
			)	
	union
		select 
			1 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId
		where
			@handbookId > 0
			and
			d.iDeleted = 0
			AND
				((@extendRelatedDoc = 1 AND (d.iApproved <> 4))
				OR
				(@extendRelatedDoc = 0 AND (d.iApproved = 1)))	
			
			and d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
	) r 
	order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByMetatagIdRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By MetatagId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByMetatagIdRecursive] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@handbookId int = 0,
	@iRegsterItemId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	                    
    declare @min int
    declare @max int
    select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

    declare @tmp table(handbookId int not null PRIMARY KEY)
    insert into @tmp(handbookId)
        select iHandbookId from m136_tblHandbook where iDeleted = 0 AND ((iMin > @min and iMax < @max) or iHandbookId = @handbookId)


    declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select handbookId FROM @tmp 
		WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, handbookId)&1)=1
   

	select * from (
		select
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
            0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
            d.dtmCreated,
            ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
            d.dtmPublishUntil,
            datediff(d, getdate(), d.dtmPublishUntil) iDays,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.iApprovedById,
            d.iCreatedById,
            d.iAlterId,
            case
                when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
                else ''
            end as strApprovedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
            ISNULL(d.strAuthor,'') as strAuthor,
            d.UrlOrFileName,
            d.UrlOrFileProperties,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            ISNULL(t.ViewMode, 1) as ViewMode,
            h.iLevelType,
            d.strDescription,
            sfa.dtmSentToApproval,
            case
                when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
                else ''
            end as strSentToBeApprovedBy,
            d.iSort,
            h.iMin,
            h.iMax
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
            left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
            left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
            left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 				
		where d.iHandbookId in (select handbookId from @tmp) 
			and d.iLatestApproved = 1
			and d.dtmPublish <= getDate()
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			and d.iApproved=1	
	union
		select 
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
			1 as Virtual,
			d.iDocumentId, 
			d.iEntityId,
			d.strName, 
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
			d.iHandbookId, 
			d.dtmApproved,
			ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
			d.dtmCreated,
			ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
			d.dtmPublishUntil,
			datediff(d, getdate(), d.dtmPublishUntil) iDays,
			--[dbo].[fn136_GetParentPathEx](d.iHandbookId) as chapterPath,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
			d.iVersion,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iApproved, 
			d.iDraft,
			d.iApprovedById,
			d.iCreatedById,
			d.iAlterId,
			case
				when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
				else ''
			end as strApprovedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
			ISNULL(d.strAuthor,'') as strAuthor,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.iDocumentTypeId,
			t.strName as DocumentTemplateName,
			t.strIcon as DocumentTemplateIcon, 
			t.bIsProcess,
			ISNULL(t.Type, 0) as DocumentFileType,
			ISNULL(t.ViewMode, 1) as ViewMode,
			h.iLevelType,
			d.strDescription,
			sfa.dtmSentToApproval,
			case
				when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
				else ''
			end as strSentToBeApprovedBy,
			d.iSort,
			h.iMin,
			h.iMax
		FROM 
			m136_tblDocument d
			join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
			join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
			left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
			left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId

			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId				
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 					
		where 	
			virt.iHandbookId in (select handbookId from @tmp)
			and d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			and d.iApproved=1		
	) r 
	order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByMetatagIdNonRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By MetatagId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByMetatagIdNonRecursive] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@handbookId int = 0,
	@iRegsterItemId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	   
	select * from (
		select
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
            0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
            d.dtmCreated,
            ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
            d.dtmPublishUntil,
            datediff(d, getdate(), d.dtmPublishUntil) iDays,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.iApprovedById,
            d.iCreatedById,
            d.iAlterId,
            case
                when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
                else ''
            end as strApprovedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
            ISNULL(d.strAuthor,'') as strAuthor,
            d.UrlOrFileName,
            d.UrlOrFileProperties,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            ISNULL(t.ViewMode, 1) as ViewMode,
            h.iLevelType,
            d.strDescription,
            sfa.dtmSentToApproval,
            case
                when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
                else ''
            end as strSentToBeApprovedBy,
            d.iSort,
            h.iMin,
            h.iMax
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
            left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
            left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
            left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 				
		where  
			(
				(@handbookId = 0 or d.iHandbookId = @handbookId)
			)
			and d.iLatestApproved = 1
			and d.dtmPublish <= getDate()
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1
			and d.iApproved=1	
	union
		select 
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
			1 as Virtual,
			d.iDocumentId, 
			d.iEntityId,
			d.strName, 
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
			d.iHandbookId, 
			d.dtmApproved,
			ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
			d.dtmCreated,
			ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
			d.dtmPublishUntil,
			datediff(d, getdate(), d.dtmPublishUntil) iDays,
			--[dbo].[fn136_GetParentPathEx](d.iHandbookId) as chapterPath,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
			d.iVersion,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iApproved, 
			d.iDraft,
			d.iApprovedById,
			d.iCreatedById,
			d.iAlterId,
			case
				when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
				else ''
			end as strApprovedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
			ISNULL(d.strAuthor,'') as strAuthor,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.iDocumentTypeId,
			t.strName as DocumentTemplateName,
			t.strIcon as DocumentTemplateIcon, 
			t.bIsProcess,
			ISNULL(t.Type, 0) as DocumentFileType,
			ISNULL(t.ViewMode, 1) as ViewMode,
			h.iLevelType,
			d.strDescription,
			sfa.dtmSentToApproval,
			case
				when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
				else ''
			end as strSentToBeApprovedBy,
			d.iSort,
			h.iMin,
			h.iMax
		FROM 
			m136_tblDocument d
			join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
			join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
			left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
			left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId

			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 					
		where 			 
			virt.iHandbookId = @handbookId
			and d.iLatestApproved = 1
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1
			and d.iApproved=1		
	) r 
	order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByMetatagId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By MetatagId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByMetatagId] 
	-- Add the parameters for the stored procedure here
	@iSecurityId int = 0,
	@handbookId int = 0,
	@iRegsterItemId int = 0,
	@recursive int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @min int
    declare @max int
    select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

    declare @tmp table(handbookId int not null PRIMARY KEY)
    insert into @tmp(handbookId)
        select iHandbookId from m136_tblHandbook where iDeleted = 0 AND ((@recursive = 1 AND iMin > @min and iMax < @max) or iHandbookId = @handbookId)


    declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select handbookId FROM @tmp 
		WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, handbookId)&1)=1
	
	select * from (
		select
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
            0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
            d.dtmCreated,
            ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
            d.dtmPublishUntil,
            datediff(d, getdate(), d.dtmPublishUntil) iDays,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.iApprovedById,
            d.iCreatedById,
            d.iAlterId,
            case
                when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
                else ''
            end as strApprovedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
            LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
            ISNULL(d.strAuthor,'') as strAuthor,
            d.UrlOrFileName,
            d.UrlOrFileProperties,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            ISNULL(t.ViewMode, 1) as ViewMode,
            h.iLevelType,
            d.strDescription,
            sfa.dtmSentToApproval,
            case
                when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
                else ''
            end as strSentToBeApprovedBy,
            d.iSort,
            h.iMin,
            h.iMax
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
            left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
            left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
            left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 				
		where d.iHandbookId in (select handbookId from @tmp) 
			and d.iLatestApproved = 1
			and d.dtmPublish <= getDate()
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			and d.iApproved=1	
	union
		select 
			dbo.m147_fnGetItemValue(dt.iAutoId) as MetatagValue,
			1 as Virtual,
			d.iDocumentId, 
			d.iEntityId,
			d.strName, 
			dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
			d.iHandbookId, 
			d.dtmApproved,
			ISNULL(d.dtmAlter, d.dtmCreated) as dtmAlter,
			d.dtmCreated,
			ISNULL(d.dtmPublish, d.dtmApproved) as dtmPublish,
			d.dtmPublishUntil,
			datediff(d, getdate(), d.dtmPublishUntil) iDays,
			--[dbo].[fn136_GetParentPathEx](d.iHandbookId) as chapterPath,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
			d.iVersion,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.iApproved, 
			d.iDraft,
			d.iApprovedById,
			d.iCreatedById,
			d.iAlterId,
			case
				when d.iApprovedById != 0 then LTRIM(ISNULL(employeeApproved.strFirstName,'') + ' ' + ISNULL(employeeApproved.strLastName,''))
				else ''
			end as strApprovedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strCreatedBy,
			LTRIM(ISNULL(employeeCreated.strFirstName,'') + ' ' + ISNULL(employeeCreated.strLastName,'')) as strModifiedBy,
			ISNULL(d.strAuthor,'') as strAuthor,
			d.UrlOrFileName,
			d.UrlOrFileProperties,
			d.iDocumentTypeId,
			t.strName as DocumentTemplateName,
			t.strIcon as DocumentTemplateIcon, 
			t.bIsProcess,
			ISNULL(t.Type, 0) as DocumentFileType,
			ISNULL(t.ViewMode, 1) as ViewMode,
			h.iLevelType,
			d.strDescription,
			sfa.dtmSentToApproval,
			case
				when ISNULL(sfa.iEmployeeId,0) > 0 then sfa.strSentToBeApprovedBy
				else ''
			end as strSentToBeApprovedBy,
			d.iSort,
			h.iMin,
			h.iMax
		FROM 
			m136_tblDocument d
			join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
			join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			left join tblEmployee employeeApproved on employeeApproved.iEmployeeId = d.iApprovedById
			left join tblEmployee employeeCreated on employeeCreated.iEmployeeId = d.iCreatedById
			left join m136_vSentForApproval sfa on sfa.iEntityId = d.iEntityId

			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId				
			left outer join m147_relRegisterItemItem dt ON d.iDocumentId = dt.iItemId and (dt.iRegisterItemId=@iRegsterItemId and dt.iModuleId=136) 					
		where 	
			virt.iHandbookId in (select handbookId from @tmp)
			and d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			and d.iApproved=1		
	) r 
	order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByHandbookIdRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By HandbookId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByHandbookIdRecursive] 
	-- Add the parameters for the stored procedure here
	@handbookId int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    declare @min int
    declare @max int
    select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

    declare @tmp table(handbookId int not null PRIMARY KEY)
    insert into @tmp(handbookId)
        select iHandbookId from m136_tblHandbook where iDeleted = 0 AND ((iMin > @min and iMax < @max) or iHandbookId = @handbookId)


    declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select handbookId FROM @tmp 
		WHERE (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, handbookId)&1)=1
   

    select * from (
        select distinct 
			0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon,  
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        where
			d.iApproved = 1
			AND 
			d.iDraft = 0
			AND d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			AND 
			(
				(@handbookId = 0 or d.iHandbookId = @handbookId)
				or 
				(
					@handbookId > 0
					and
					d.iHandbookId in (select handbookId from @tmp)
				)
			)			
			AND
			(
				(d.iVersion > 0)
				or
				(
					d.dtmPublish <= getDate()
				)
			)
    union       
        select 
			1 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            virt.iHandbookId,
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId
        where
			@handbookId > 0
			AND d.iApproved = 1
			AND d.iDraft = 0
			AND d.iLatestApproved = 1
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1
			AND
			(
				(d.iVersion > 0)
				or
				(
					d.dtmPublish <= getDate()
				)
			)
	) 
	r order by r.iSort, r.strName
END

PRINT 'Update [m136_GetListOfApprovedDocumentsByHandbookIdNonRecursive]'
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByHandbookIdNonRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By HandbookId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByHandbookIdNonRecursive] 
	-- Add the parameters for the stored procedure here
	@handbookId int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	  

        declare @min int
        declare @max int
        select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

        declare @tmp table(handbookId int not null PRIMARY KEY)
        insert into @tmp(handbookId)
            select iHandbookId from m136_tblHandbook where iHandbookId = @handbookId

    select * from (
        select distinct 
			0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon,  
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        where
			d.iApproved = 1
			AND 
			d.iDraft = 0
			AND d.iLatestApproved = 1
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1
			AND 
			(
				(@handbookId = 0 or d.iHandbookId = @handbookId)
			)			
			AND
			(
				(d.iVersion > 0)
				or
				(
					d.dtmPublish <= getDate()
				)
			)
    union       
        select 
			1 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            virt.iHandbookId,
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId
        where
			@handbookId > 0
			AND d.iApproved = 1
			AND d.iDraft = 0
			AND d.iLatestApproved = 1
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId)&1)=1			
			AND
			(
				(d.iVersion > 0)
				or
				(
					d.dtmPublish <= getDate()
				)
			)
	) 
	r order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfApprovedDocumentsByHandbookId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Get List Of Approved Documents By HandbookId
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfApprovedDocumentsByHandbookId] 
	-- Add the parameters for the stored procedure here
	@handbookId int = 0,
	@iSecurityId int = 0,
	@recursive int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	

    declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
    
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
		WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1
   

        declare @min int
        declare @max int
        select @min = iMin, @max = iMax from m136_tblHandbook where iHandbookId = @handbookId

        declare @tmp table(handbookId int not null PRIMARY KEY)
        insert into @tmp(handbookId)
            select iHandbookId from m136_tblHandbook where (@recursive = 1 and iMin > @min and iMax < @max) or iHandbookId = @handbookId

    select * from (
        select distinct 
			0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon,  
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
        where
			d.iApproved = 1
			AND 
			d.iDraft = 0
			AND d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			AND 
			(
				(@handbookId = 0 or d.iHandbookId = @handbookId)
				or 
				(
					@recursive = 1
					and
					@handbookId > 0
					and
					d.iHandbookId in (select handbookId from @tmp)
				)
			)
    union       
        select 
			1 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            virt.iHandbookId,
            d.dtmApproved,
            d.dtmPublishUntil,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            t.bIsProcess,
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
            d.iSort,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
			join m136_relVirtualRelation virt on virt.iDocumentId = d.iDocumentId
			join @tmp tmp on tmp.handbookId = virt.iHandbookId
        where
			@handbookId > 0
			AND d.iApproved = 1
			AND d.iDraft = 0
			AND d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
	) 
	r order by r.iSort, r.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetListOfAllDocumentsApprovedWithinXDays]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Atle Solberg
-- Create date: 22.10.2013
-- Description:	Gets List Of All Documents Approved Within X Days] 
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetListOfAllDocumentsApprovedWithinXDays] 
	-- Add the parameters for the stored procedure here
	@iApprovedWithinXDays int = 0,
	@iSecurityId int = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @HandbookPermissions table(iHandbookId int not null PRIMARY KEY)
	
	insert into @HandbookPermissions
	select iHandbookId FROM m136_tblHandbook 
			WHERE iDeleted = 0 AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId)&1)=1

	select 
            0 as Virtual,
            d.iDocumentId, 
            d.iEntityId,
            d.strName, 
            dbo.fnSecurityGetPermission(136, 462, @iSecurityId, d.iHandbookId) as iAccess, 
            d.iHandbookId, 
            d.dtmApproved,
			h.strName as strChapterName,
			case
				when h.iLevelType=1 then 'book_blue1.gif'
				when exists (select iDepartmentId from tblEmployee where iEmployeeId=@iSecurityId AND iDepartmentId=h.iDepartmentId) then 'book_green.gif'
				else 'book_blue.gif'
			end as strChapterIcon,
            d.iVersion,
            dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
            d.iApproved, 
            d.iDraft,
            d.UrlOrFileName,
            d.iDocumentTypeId,
            t.strName as DocumentTemplateName,
            t.strIcon as DocumentTemplateIcon, 
            ISNULL(t.Type, 0) as DocumentFileType,
            h.iLevelType,
        dbo.fn136_GetParentPathEx(d.iHandbookId) as ParentPath
		FROM 
			m136_tblDocument d
            join m136_tblDocumentType t on d.iDocumentTypeId = t.iDocumentTypeId
            join m136_tblHandbook h on d.iHandbookId=h.iHandbookId
   		where
			d.iDraft = 0
			AND d.iLatestApproved = 1
			AND d.iHandbookId in (select iHandbookId from @HandbookPermissions)
			AND datediff(d,isnull(d.dtmApproved, convert(datetime, '01.01.1970', 104)),getdate()) <  @iApprovedWithinXDays
		order by
			d.dtmApproved DESC
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentInformation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentInformation]
	@DocumentId INT = NULL
AS
SET NOCOUNT ON
BEGIN
	SELECT	d.iEntityId, 
			d.iDocumentId, 
			d.iVersion, 
			d.iDocumentTypeId, 
			d.iHandbookId, 
			d.strName, 
			d.strDescription, 
			d.UrlOrFileName,
			d.strApprovedBy,
			d.iApproved,
			d.iDraft, 
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) strCreatedBy, 
			dbo.fn136_GetParentPathEx(d.iHandbookId) AS Path,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iReadCount,
			d.strAuthor,
			d.strAlterer,
			d.dtmApproved,
			d.iLatestVersion,
            d.iOrientation,
            d.iInternetDoc
	FROM	m136_tblDocument d
	WHERE	d.iDocumentId = @DocumentId	AND 
			d.iLatestApproved = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapters]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_GetChapters]
	@iSecurityId int,
	@iRootId int,
	@iLevelType int,
	@iDepartmentId int,
	@WithDocuments int



AS
begin
SELECT
	h.iHandbookId,
	h.strName,
	h.strDescription,
	h.iMin,
	h.iMax,
	h.iLevelType,
	h.iDepartmentId,
	dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) iAccessGroup,
	iAccessDocument = 
		case @WithDocuments
			when 1 then dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId)
			else 0
		end,
	(
		SELECT
			COUNT(dd.iDocumentId)
		FROM
			m136_tblDocument dd
		WHERE
			dd.iHandbookId = h.iHandbookId
			AND dd.iDeleted = 0 
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, h.iHandbookId) & 0x01) = 0x01
			AND ((dbo.m136_fnGetVersionStatus (dd.iEntityId, dd.iDocumentId, dd.iVersion, dd.dtmPublish, dd.dtmPublishUntil, getdate(),  dd.iDraft, dd.iApproved)&160)=32)
	) iDocumentCount,
	(
		SELECT
			COUNT(dv.iDocumentId) 
		FROM
			m136_tblDocument dv
		JOIN
			m136_relVirtualRelation r ON r.iDocumentId = dv.iDocumentId 
		WHERE
			r.iHandbookId = h.iHandbookId 
			AND dv.iDeleted = 0
			AND dv.iApproved = 1 AND dv.dtmPublish <= getDate()
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, r.iHandbookId) & 0x01) > 0
	) iVirtualDocumentCount,
	(
		SELECT
			COUNT(hh.iHandbookId)
		FROM
			m136_tblHandbook hh
		WHERE
			hh.iParentHandbookId=h.iHandbookId
			AND hh.iDeleted=0
			AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, hh.iHandbookId) & 0x01) > 0
	) iChapterCount
FROM
	m136_tblHandbook h
WHERE
	h.iDeleted = 0
	AND (dbo.fnSecurityGetPermission(136, 461, @iSecurityId, h.iHandbookId) & 0x11) > 0
	AND (case @iDepartmentId
			when 0 then 0
			else h.iDepartmentId
		end) = @iDepartmentId
	AND (		case @iLevelType
			when 0 then 0
			else h.iLevelType
		end) = @iLevelType

	AND isnull(h.iParentHandbookId, 0)=@iRootId 
ORDER BY iMin
end
GO
/****** Object:  Table [dbo].[m123_tblNewsMedia]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[m123_tblNewsMedia](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InfoId] [int] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[MimeType] [nvarchar](50) NOT NULL,
	[Value] [varchar](max) NOT NULL,
 CONSTRAINT [PK_InfoNewsMedia] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[m136_fe_GetParents]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_fe_GetParents] 
	@iHandbookId INT
AS
BEGIN
	SET NOCOUNT ON;

	WITH Parents AS
	(
		SELECT
			iHandbookId, 
			iParentHandbookId,
			strName
		FROM 
			[dbo].[m136_tblHandbook] 
		WHERE
			iHandbookId = 285
		UNION ALL
		SELECT 
			h.iHandbookId,
			h.iParentHandbookId,
			h.strName
		FROM 
			[dbo].[m136_tblHandbook] h
			INNER JOIN Parents
				ON	h.iHandbookId = Parents.iParentHandbookId 
	)
	SELECT
		iHandbookId,
		strName,
		iParentHandbookId
	FROM
		Parents 
	ORDER BY iHandbookId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_spGetEmployeeDocumentConfirms]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE                 PROCEDURE [dbo].[m136_spGetEmployeeDocumentConfirms]
(
	@iDocumentId int,
	@iSecurityId int = 0,
	@iDepartmentId int = 0,
	@fromDate datetime = null,
	@toDate dateTime = null,
	@iUseRegionLeader int = 0,
	@iDepartmentLeaderPositionId int = 0
)
 AS


if @toDate<>null
begin
	set @toDate = dateadd(day, 1, @toDate)
END
declare @iDepIdTable table(iDepartmentId int null)
if @iUseRegionLeader=1
begin
	insert into @iDepIdTable select * FROM [dbo].[m136_getRegionleaderDepartmentIds](@iSecurityId)
end


--Rettigheter
declare @modulePermission int
set @modulePermission = dbo.fnSecurityGetPermission(136, 460, @iSecurityId,0)

if (@modulePermission&6)>0
begin
	insert into @iDepIdTable
	select
		iDepartmentId 
	from 
		tblEmployee
	where
		(	iEmployeeId=@iSecurityId 
			OR (@modulePermission&2)=2
		)
		AND iDepartmentId=@iDepartmentId
		AND iDepartmentId not in (select iDepartmentId from @iDepIdTable)
end

declare @docTable table(iEntityId int null, iDocumentId int null, strName varchar(200) null, iVersion int null, iHandbookId int null)
insert into @docTable
select iEntityId, iDocumentId, strName as strDocumentName, iVersion, iHandbookId from m136_tblDocument WHERE iDocumentId=@iDocumentId AND iApproved=1

--Ansatt-utdrag
declare @empTable table(iEmployeeId int null, strFirstName varchar(100) null, strLastName varchar(100) null, iDepartmentId int null)
insert into @empTable
	select
		iEmployeeId,
		strFirstName,
		strLastName,
		iDepartmentId
	from
		tblEmployee
	where
		iDepartmentId = @iDepartmentId
		AND iDepartmentId in (select iDepartmentId FROM @iDepIdTable)
		
		
--Confirm-table utdrag
declare @cTable table(iEntityId int not null, iEmployeeId int, dtmConfirm datetime)
insert into @cTable
select
	iEntityId, iEmployeeId, dtmConfirm
from
	m136_tblConfirmRead
where
	iEntityId in (select iEntityId from @docTable)
	AND (dtmConfirm>@fromDate OR @fromDate is null)
	AND (dtmConfirm<@toDate OR @toDate is null)

declare @persons table(DepartmentId int, NumberOfEmployees int)
insert into @persons(DepartmentId, NumberOfEmployees)
	select iDepartmentId, count(iEmployeeId) as NumberOfEmployees from tblEmployee
	group by iDepartmentId


declare @tmp table(iEmployeeId int, strEmployeeName nvarchar(200), iDepartmentId int, strDepName nvarchar(200),
	iReadStatus int, dtmConfirm datetime, iDocumentId int, strDocumentName nvarchar(500), iVersion int, iVersionStatus int,
	iApproved int, iDraft int, iEntityId int, iRead int)

insert into @tmp (iEmployeeId, strEmployeeName, iDepartmentId, strDepName,
	iReadStatus, dtmConfirm, iDocumentId, strDocumentName, iVersion, iVersionStatus,
	iApproved, iDraft, iEntityId, iRead)
select r.iEmployeeId, r.strEmployeeName, r.iDepartmentId, r.strDepName, r.iReadStatus, r.dtmConfirm,
	 r.iDocumentId, r.strDocumentName, r.iVersion, r.iVersionStatus, r.iApproved, r.iDraft, r.iEntityId,
sum(case when cr.iConfirmId is null then 0 else 1 end) as ConfirmedRead from (
select
	emp.iEmployeeId,
	emp.strFirstName +' '+ emp.strLastName as strEmployeeName,
	emp.iDepartmentId,
	dep.strName as strDepName,
	(case when isnull(cr.iEmployeeId, 0)=0 then 0 else 1 end) as iReadStatus,
	cr.dtmConfirm,
	doc.iDocumentId,
	doc.iEntityId,
	doc.strName as strDocumentName,
	doc.iVersion,
--	round(dbo.m136_fnDocumentConfirmPercentage(dep.iDepartmentId, doc.iEntityId, @fromDate, @toDate),2) as readPercent,
	0 as readPercent,
	dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, 
	details.dtmPublish, details.dtmPublishUntil, getdate(), details.iDraft, details.iApproved) as iVersionStatus,
	details.iApproved,
	details.iDraft
FROM
	@docTable doc
	full join @empTable emp on 1=1
	join m136_tblDocument details on details.iEntityId = doc.iEntityId
	left join @cTable cr on cr.iEmployeeId=emp.iEmployeeId AND cr.iEntityId=doc.iEntityId
	left outer join tblDepartment dep on dep.iDepartmentId=emp.iDepartmentId
) r
left join m136_tblConfirmRead cr on (r.iEntityId = cr.iEntityId and cr.iEmployeeId = r.iEmployeeId)
group by r.iEmployeeId, r.strEmployeeName, r.iDepartmentId, r.strDepName, r.iReadStatus, r.dtmConfirm,
	 r.iDocumentId, r.strDocumentName, r.iVersion, r.iVersionStatus, r.iApproved, r.iDraft, r.iEntityId

order by r.iVersion desc

declare @total int
select @total = NumberOfEmployees from @persons where DepartmentId = @iDepartmentId

declare @readPercentage table(iEntityId int, readPercentage decimal)
insert into @readPercentage(iEntityId, readPercentage)
select r.iEntityId, (cast(r.totalRead as decimal) / cast(@total as decimal)) * 100 as readPercentage from (
select iEntityId, sum(iRead) as totalRead from @tmp 
group by iEntityId
) r

select t.iEmployeeId, t.strEmployeeName, t.iDepartmentId, t.strDepName,
	t.iReadStatus, t.dtmConfirm, t.iDocumentId, t.strDocumentName, t.iVersion, t.iVersionStatus,
	t.iApproved, t.iDraft, p.readPercentage
from @tmp t
join @readPercentage p on t.iEntityId = p.iEntityId
order by
	t.iVersion desc,
	t.strDepName,
	t.iReadStatus desc,
	t.strEmployeeName,
	t.dtmConfirm desc
GO
/****** Object:  StoredProcedure [dbo].[m136_spGetChapterEmployeeSums]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE       PROCEDURE [dbo].[m136_spGetChapterEmployeeSums] 
(
	@iSecurityId int = 0,
	@iHandbookId int = 0,
	@iDepartmentId int = 0,
	@fromDate datetime = null,
	@toDate datetime = null,
	@iUseRegionLeader int = 0,
	@iDepartmentLeaderPositionId int = 0,
	@iRecursive int = 0
)
AS
if @toDate<>null
begin
	set @toDate = dateadd(day, 1, @toDate)
END

declare @iMin int
declare @iMax int

if @iRecursive = 1
	begin
		select @iMin=iMin FROM m136_tblHandbook where iHandbookId=@iHandbookId
		select @iMax=iMax FROM m136_tblHandbook where iHandbookId=@iHandbookId
	end
else
	begin
		set @iMin = 0
		set @iMax = 0
	end
--Regiontable
declare @iRegionTable table(iDepartmentId int not null)
if @iUseRegionLeader=1
begin
	insert into @iRegionTable select * FROM [dbo].[m136_getRegionleaderDepartmentIds](@iSecurityId)
end 

--Mappeutdrag:
declare @bookTable table(iHandbookId int not null, strChapterName varchar(400) null, strParentPath varchar(1000) null, iMin int null, iMax int null)
insert into @bookTable
select
	iHandbookId,
	strName,
	dbo.fn136_GetParentPath(iHandbookId),
	iMin,
	iMax
from
	m136_tblHandbook
where
	((iMin>@iMin
	AND iMin<@iMax)
	 OR iHandbookId = @iHandbookId)
	AND iDeleted=0
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0 

--Dokumentutdrag:
declare @docTable table(iEntityId int null, iDocumentId int null, strName varchar(200) null, iVersion int null, iHandbookId int null, iSort int null, iVirt int not null)
insert into @docTable
select	doc.iEntityId,
	doc.iDocumentId,
	doc.strName,
	doc.iVersion,
	doc.iHandbookId,
	doc.iSort,
	0
from
	@bookTable book
	
	
	right join m136_tblDocument doc on doc.iHandbookId=book.iHandbookId
WHERE
	doc.iHandbookId=book.iHandbookId
	AND iApproved=1
	AND doc.iDeleted=0
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4)
	)

--virtual
insert into @docTable
select 	doc.iEntityId,
	virt.iDocumentId,
	doc.strName,
	doc.iVersion,
	virt.iHandbookId,
	virt.iSort,
	1
FROM
	m136_relVirtualRelation virt
	left join m136_tblDocument doc on doc.iDocumentId=virt.iDocumentId
	right join @bookTable book on book.iHandbookId=virt.iHandbookId
WHERE
	doc.iApproved=1
	AND doc.iDeleted=0
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4)
	)



--Ansatt-utdrag
declare @empTable table(iEmployeeId int null, strFirstName varchar(100) null, strLastName varchar(100) null, iDepartmentId int null)

--Security, see own org-unit's reports?
declare @moduleAccess int
set @moduleAccess = dbo.fnSecurityGetPermission(136, 460, @iSecurityId, 0)
if((@moduleAccess&4)=4)
begin
	declare @iUserDepartmentId int
	select @iUserDepartmentId=iDepartmentId FROM tblEmployee where iEmployeeId=@iSecurityId
	insert into @empTable
		select
			iEmployeeId,
			strFirstName,
			strLastName,
			iDepartmentId
		from
			tblEmployee
		where
			(iDepartmentId = @iDepartmentId 
			OR @iDepartmentId=0)
			AND iDepartmentId>0
			AND iDepartmentId=@iUserDepartmentId
end

--Regionleder
if (SELECT COUNT(iEmployeeId) FROM @empTable)=0 AND @iUseRegionLeader<>0
	begin
		insert into @empTable
			SELECT iEmployeeId, strFirstName, strLastName, iDepartmentId  FROM tblEmployee where iDepartmentId in (select iDepartmentId from @iRegionTable) AND iDepartmentId=@iDepartmentId
	end
--Modul-administrator?
if((@moduleAccess&2)=2)
begin
	delete from @empTable
	insert into @empTable
	select
		iEmployeeId,
		strFirstName,
		strLastName,
		iDepartmentId
	from
		tblEmployee
	where
		iDepartmentId = @iDepartmentId 
end


		
		
--Confirm-table utdrag
declare @cTable table(iEntityId int not null, iEmployeeId int, dtmConfirm datetime)
insert into @cTable
select
	iEntityId, iEmployeeId, dtmConfirm
from
	m136_tblConfirmRead cr
where
	iEntityId in (select iEntityId from @docTable)
	AND iEmployeeId in (select iEmployeeId from @empTable)
	AND (dtmConfirm>@fromDate OR @fromDate is null)
	AND (dtmConfirm<@toDate OR @toDate is null)

-- Return select
SELECT doc.iDocumentId,
	doc.iEntityId,
	doc.strName,
	doc.iVersion,
	doc.iHandbookId,
	book.strChapterName,
	book.strParentPath,
	ISNULL(dep.strName, '') as strDepName,
	ISNULL(dep.iDepartmentId,0) as iDepartmentId,
	ISNULL(dep.iLevel,0) as iLevel,
	ISNULL(emp.strFirstName,'') +' '+ ISNULL(emp.strLastName,'') as strEmployeeName,
	ISNULL(emp.iEmployeeId,0) as iEmployeeId,
	(case when isnull(cr.iEmployeeId, 0)=0 then 0 else 1 end) as iReadStatus,
	cr.dtmConfirm,
	doc.iVirt,
	dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, 
		details.dtmPublish, details.dtmPublishUntil, getdate(), details.iDraft, details.iApproved) as iVersionStatus,
	details.iApproved,
	details.iDraft
FROM

	@docTable doc
	full join @empTable emp on 1=1
	join m136_tblDocument details on details.iEntityId = doc.iEntityId
	left join @cTable cr on cr.iEmployeeId=emp.iEmployeeId AND cr.iEntityId=doc.iEntityId
	left outer join tblDepartment dep on dep.iDepartmentId=emp.iDepartmentId
	left outer join @bookTable book on doc.iHandbookId=book.iHandbookId
WHERE
	isnull(doc.iEntityId, 0)>0
order by
	book.iMin asc,
	doc.iSort asc,
	doc.iDocumentId asc,
	strDepName asc,
	iReadStatus desc,
	strEmployeeName asc,
	dtmConfirm desc


--SELECT * FROM @bookTable
GO
/****** Object:  StoredProcedure [dbo].[m136_spGetChapterConfirmsSums]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[m136_spGetChapterConfirmsSums] 
(
	@iSecurityId int = 0,
	@iHandbookId int = 0,
	@iDepartmentId int = 0,
	@fromDate datetime = null,
	@toDate datetime = null,
	@iUseRegionLeader int = 0,
	@iDepartmentLeaderPositionId int = 0,
	@iRecursive int = 0
)
AS
/* DEPRECATED */
/* m136_spGetChapterEmployeeSums is used instead */
if @toDate<>null
begin
	set @toDate = dateadd(day, 1, @toDate)
END

declare @iMin int
declare @iMax int

if @iRecursive = 1
	begin
		select @iMin=iMin FROM m136_tblHandbook where iHandbookId=@iHandbookId
		select @iMax=iMax FROM m136_tblHandbook where iHandbookId=@iHandbookId
	end
else
	begin
		set @iMin = 0
		set @iMax = 0
	end

declare @iRegionTable table(iDepartmentId int not null)
if @iUseRegionLeader=1
begin
	insert into @iRegionTable select * FROM [dbo].[m136_getRegionleaderDepartmentIds](@iSecurityId)
end 

SELECT
	doc.iDocumentId,
	doc.iEntityId,
	doc.strName,
	doc.iVersion,
	doc.iHandbookId,
	book.strName as strChapterName,
	dbo.fn136_GetParentPath(doc.iHandbookId) as strParentPath,
	dep.strName as strDepName,
	dep.iDepartmentId,
	dep.iLevel,
	round(dbo.m136_fnDocumentConfirmPercentage(dep.iDepartmentId, doc.iEntityId, @fromDate, @toDate),2) as readPercent
FROM
	m136_tblDocument doc
	left outer join m136_tblHandbook book on doc.iHandbookId=book.iHandbookId
	cross join tblDepartment dep
WHERE
	(
		--Regionleder
		(
			dep.iDepartmentId in (SELECT iDepartmentId FROM @iRegionTable)
			AND @iUseRegionLeader <> 0
		)
		OR 
		--Apoteker
		(
			dep.iDepartmentId=dbo.m136_getLeaderForDepartmentId(@iSecurityId, @iDepartmentLeaderPositionId)
			AND @iDepartmentLeaderPositionId<>0
		)
		--Administrator i modulen
		OR (dbo.fnSecurityGetPermission(136, 460, @iSecurityId,0)&2)=2
		--Godkjenner på bok
		OR (dbo.fnSecurityGetPermission(136, 462, @iSecurityId,doc.iHandbookId)&16)=16
	) 
	AND (
		(doc.iHandbookId=@iHandbookId)
		OR (@iRecursive=1 AND book.iMin>@iMin AND book.iMin<@iMax)
		OR @iHandbookId=0
	)
	AND doc.iApproved=1
	AND doc.iDeleted=0
	AND dep.iDepartmentId>0
	AND iVersion=( 
		SELECT 
			MAX(iVersion) 
		FROM 
			m136_tblDocument
		WHERE 
			m136_tblDocument.iDocumentId=doc.iDocumentId 
			AND m136_tblDocument.iDeleted=0 
			AND m136_tblDocument.iDraft=0 
			AND m136_tblDocument.iApproved in (1,4)
			AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, m136_tblDocument.iHandbookId) & 0x01)>0 
	)
	AND (dep.iDepartmentId=@iDepartmentId OR @iDepartmentId=0)
	AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId,doc.iHandbookId) & 0x01)=1

ORDER BY doc.iSort, doc.iDocumentId, doc.iVersion desc, dep.iMin
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateEmployee]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateEmployee]
	@iEmployeeId		INT,
	@strEmployeeNo		VARCHAR(20),
	@iDepartmentId		INT,
	@strExpDep			VARCHAR(20),
	@strFirstName		VARCHAR(50),
	@strLastName		VARCHAR(50),
	@strTitle			VARCHAR(200),
	@strAddress			VARCHAR(150),
	@iCountryId			INT,
	@strPhoneHome		VARCHAR(30),
	@strPhoneInternal	VARCHAR(30),
	@strPhoneWork		VARCHAR(30),
	@strPhoneMobile		VARCHAR(30),
	@strBeeper			VARCHAR(20),
	@strCallNumber		VARCHAR(20),
	@strFax				VARCHAR(30),
	@strEmail			VARCHAR(100),
	@strLoginName		VARCHAR(100),
	@strLoginDomain		VARCHAR(200),
	@strPassword		VARCHAR(32),
	@strComment			VARCHAR(400)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @iParentCompanyId INT;
	SELECT @iParentCompanyId = dpt.iCompanyId FROM dbo.tblDepartment dpt WHERE dpt.iDepartmentId = @iDepartmentId;

    UPDATE dbo.tblEmployee
    SET
        strEmployeeNo = @strEmployeeNo,
        iDepartmentId = @iDepartmentId,
        strExpDep = @strExpDep,
        strFirstName = @strFirstName,
        strLastName = @strLastName,
        strTitle = @strTitle,
        strAddress1 = @strAddress,
        iCountryId = @iCountryId, -- int
        strPhoneHome = @strPhoneHome, -- varchar
        strPhoneInternal = @strPhoneInternal, -- varchar
        strPhoneWork = @strPhoneWork, -- varchar
        strPhoneMobile = @strPhoneMobile, -- varchar
        strBeeper = @strBeeper, -- varchar
        strCallNumber = @strCallNumber, -- varchar
        strFax = @strFax, -- varchar
        strEmail = @strEmail, -- varchar
        strLoginName = @strLoginName, -- varchar
        strLoginDomain = @strLoginDomain, -- varchar
        strPassword = @strPassword, -- varchar
        iCompanyId = @iParentCompanyId, 
        strComment = @strComment
    WHERE iEmployeeId = @iEmployeeId;
END
GO
/****** Object:  Table [dbo].[m136_Hearings]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_Hearings](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[EntityId] [int] NULL,
	[IsPublic] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[DueDate] [datetime] NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [m136_Hearings_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentPublicHearings]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentPublicHearings]
AS
BEGIN
	SELECT	d.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			d.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iCreatedbyId,
            d.iInternetDoc,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			CAST(0 as INT) AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			1 AS IsDocument,
			d.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount,
			he.DueDate,
			he.IsPublic
	FROM	dbo.m136_Hearings he
	JOIN	m136_tblDocument d ON he.EntityId = d.iEntityId
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId
	WHERE	he.IsActive = 1 
			AND he.IsPublic	= 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetDocumentAwaitingHearings]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetDocumentAwaitingHearings]
	@UserId INT = NULL
AS
BEGIN
	SELECT	d.iDocumentId as Id,
			d.iEntityId,
			d.iHandbookId,
			d.strName,
			d.iDocumentTypeId,
			d.iVersion as Version,
			h.iLevelType as LevelType,
			d.dtmApproved,
			d.strApprovedBy,
			dbo.fnOrgGetUserName(d.iCreatedById, '', 0) as Responsible,
			h.iDepartmentId as DepartmentId,
			0 as Virtual,
			d.iSort,
			h.strName as ParentFolderName,
			dbo.fn136_GetParentPathEx(h.iHandbookId) as Path,
			[dbo].[fnHasDocumentAttachment](d.iEntityId) as HasAttachment,
			d.iApproved,
			d.iDraft,
			d.dtmPublish,
			d.dtmPublishUntil,
			d.iCreatedbyId,
            d.iInternetDoc,
			dbo.m136_fnGetVersionStatus(d.iEntityId, d.iDocumentId, d.iVersion, d.dtmPublish, d.dtmPublishUntil, getDate(), d.iDraft, d.iApproved) iVersionStatus,
			h.iHandbookId AS iParentHandbookId,
			CAST(0 as INT) AS iChildCount,
			d.iDeleted,
			d.dtmCreated,
			d.dtmAlter,
			1 AS IsDocument,
			d.iHandbookId AS VirtualHandbookId,
			d.iReadCount AS ReadCount,
			he.DueDate,
			he.IsPublic
	FROM	dbo.m136_Hearings he
	JOIN    dbo.m136_HearingMembers m ON he.Id = m.HearingsId AND m.EmployeeId = @UserId
	JOIN	m136_tblDocument d ON he.EntityId = d.iEntityId
	JOIN    dbo.m136_tblHandbook h ON h.iHandbookId = d.iHandbookId
	LEFT JOIN dbo.tblEmployee te ON d.iCreatedbyId = te.iEmployeeId
	WHERE	he.IsActive = 1 
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_EditDocumentHearing]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_EditDocumentHearing] 
	@HearingId			INT,
	@IsPublic			BIT,
	@DueDate			DATETIME,
	@EmployeesAdd AS [dbo].[Item] READONLY,
	@EmployeesDelete AS [dbo].[Item] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
	UPDATE dbo.m136_Hearings
		SET IsPublic = @IsPublic, DueDate = @DueDate
	WHERE Id = @HearingId
	DELETE FROM [dbo].[m136_HearingMembers]
	WHERE HearingsId = @HearingId
		  AND EmployeeId IN (SELECT Id FROM @EmployeesDelete)
	INSERT INTO [dbo].[m136_HearingMembers](HearingsId, EmployeeId, HasRead)
	SELECT @HearingId, Id, 0
	FROM @EmployeesAdd
COMMIT TRANSACTION;    
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateDocumentHearing]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateDocumentHearing] 
	@EntityId			INT,
	@IsPublic			BIT,
	@CreateBy		    INT,
	@DueDate			DATETIME,
	@Employees AS [dbo].[Item] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
	SET NOCOUNT ON;
	DECLARE @HearingId INT;
	INSERT INTO dbo.m136_Hearings(EntityId,IsPublic,CreatedDate,CreatedBy,DueDate,IsActive)
	VALUES(@EntityId, @IsPublic, GETDATE(), @CreateBy, @DueDate, 1)
	SET @HearingId = SCOPE_IDENTITY();
	INSERT INTO [dbo].[m136_HearingMembers](HearingsId, EmployeeId, HasRead)
	SELECT @HearingId, Id, 0
	FROM @Employees
	UPDATE dbo.m136_tblDocument 
		SET iApproved = 3, iStatus = 1
	WHERE iEntityId = @EntityId
	SELECT @HearingId
COMMIT TRANSACTION;    
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_InsertReadConfirm]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_InsertReadConfirm]
	@EntityId INT,
	@EmployeeId INT,
	@EmployeeName VARCHAR(100)
AS
BEGIN
	INSERT INTO m136_tblConfirmRead(iEntityId, iEmployeeId, dtmConfirm, strEmployeeName)
	VALUES(@EntityId, @EmployeeId , GETDATE(), @EmployeeName)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_InsertOrUpdateDocAccessLog]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[m136_InsertOrUpdateDocAccessLog]
	@iSecurityId INT,
	@iDocumentId INT,
	@dtmAccessed DATETIME
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (SELECT * FROM [dbo].[m136_tblDocAccessLog]
				 WHERE iSecurityId = @iSecurityId 
						AND iDocumentId = @iDocumentId)
        UPDATE [dbo].[m136_tblDocAccessLog]
			SET iAccessedCount = iAccessedCount + 1,
				dtmAccessed = @dtmAccessed
        WHERE iSecurityId = @iSecurityId 
			  AND iDocumentId = @iDocumentId
    ELSE    
        INSERT INTO [dbo].[m136_tblDocAccessLog]
        (
			iSecurityId, iDocumentId, dtmAccessed, iAccessedCount
		)
        VALUES
        (
			@iSecurityId, @iDocumentId, @dtmAccessed, 1
		)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_InsertExportJob]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_InsertExportJob]
	@ChapterId INT,
	@UserIdentityId INT,
	@PrintTypeJob INT,
	@PrintSubFolder BIT,
	@Method varchar(200),
	@TemplateName varchar(1000)
AS
BEGIN
	INSERT INTO [dbo].[m136_ExportJob]
	(Id, ChapterId, UserIdentityId, CreatedDate, FilePath, PrintTypeJob, PrintSubFolder, ProcessStatus, [Description], Method, TemplateName)
	VALUES (NEWID(), @ChapterId, @UserIdentityId, GETDATE(), NULL, @PrintTypeJob, @PrintSubFolder, 0, NULL, @Method, @TemplateName)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_insertEntityIntoTextIndex]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_insertEntityIntoTextIndex]
(
	@iEntityId INT
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets FROM
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @dstPtr			BINARY(16);
	DECLARE @insertOffset	INT;
	DECLARE @metaTable		NVARCHAR(20);
	DECLARE @iAutoId		INT;
	DECLARE @chunkSize		INT;
	SET		@chunkSize = 4000; --Should be multiples of 8040 for best performance
	DECLARE @charBlock1		NVARCHAR(4000);
	DECLARE @fetchProgress	INT;
	DECLARE @insertLength	INT;
	DECLARE @finalOffset	INT;
	DECLARE @documentInfo	VARCHAR(3000);
	IF EXISTS (SELECT iEntityId FROM m136x_tblTextIndex WHERE iEntityId = @iEntityId)
	BEGIN
		DELETE FROM m136x_tblTextIndex WHERE iEntityId = @iEntityId
	END 
	SELECT	@documentInfo = strName + ' ' + ISNULL(strDescription + ' ', '')
	FROM	m136_tblDocument
	WHERE	iEntityId = @iEntityId
	INSERT INTO	m136x_tblTextIndex(iEntityId, totalvalue)
	VALUES		(@iEntityId, @documentInfo)
	DECLARE theValues CURSOR FOR
	SELECT	'rich', DATALENGTH(value)/2, iMetaInfoRichTextId
	FROM	m136_tblMetaInfoRichText
	WHERE	iEntityId = @iEntityId
	UNION ALL
	SELECT	'text', DATALENGTH(value), iMetaInfoTextId
	FROM	m136_tblMetaInfoText
	WHERE	iEntityId = @iEntityId
	OPEN			theValues
	FETCH NEXT FROM	theValues
	INTO			@metaTable, @insertLength, @iAutoId
	IF @@FETCH_STATUS <> -1
	BEGIN
		BEGIN
			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- Get pointer of value
				SELECT	@dstPtr = TEXTPTR(totalValue)
				FROM	m136x_tblTextIndex
				WHERE	iEntityId = @iEntityId
				-- Get the position to insert
				SELECT	@insertOffset = DATALENGTH(totalValue)/2
				FROM	m136x_tblTextIndex
				WHERE	iEntityId = @iEntityId
				SET	@fetchProgress = 0
				SET @finalOffset = @insertOffset + @insertLength
				-- Insert by chunk size
				WHILE @fetchProgress < @insertLength
				BEGIN
					-- Get the position
					SELECT	@insertOffset = DATALENGTH(totalValue)/2
					FROM	m136x_tblTextIndex
					WHERE	iEntityId = @iEntityId
					-- Get a part of value
					IF @metaTable = 'rich'
					BEGIN
						SELECT	@charBlock1 = ' ' + SUBSTRING(value, @fetchProgress, @chunkSize) + ' '
						FROM	m136_tblMetaInfoRichText
						WHERE	iMetaInfoRichTextId = @iAutoId
					END
					ELSE
					BEGIN
						SELECT	@charBlock1 = ' ' + SUBSTRING(value, @fetchProgress, @chunkSize) + ' '
						FROM	m136_tblMetaInfoText
						WHERE	iMetaInfoTextId = @iAutoId
					END
					-- Update m136x_tblTextIndex
					UPDATETEXT m136x_tblTextIndex.totalvalue @dstPtr @insertOffset 0 @charBlock1
					-- Update new position to get new chunk size
					SET @fetchProgress = @fetchProgress + @chunkSize
				END
				FETCH NEXT FROM theValues
				INTO			@metaTable, @insertLength, @iAutoId
			END
		END
	END
	CLOSE theValues
	DEALLOCATE theValues
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ApproveDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ApproveDocument]
    @UserId INT,
    @EntityId INT,
    @TransferReadingReceipts BIT,
    @PublishFrom DATETIME,
    @PublishUntil DATETIME,
    @IsInternetDocument BIT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @DocumentId INT;
            DECLARE @FullName NVARCHAR(100);
            SELECT
                @DocumentId = iDocumentId
            FROM
                m136_tblDocument
            WHERE
                iEntityId = @EntityId
            SELECT
                @FullName = strFirstName + ' ' + strLastName
            FROM
                tblEmployee
            WHERE
                iEmployeeId = @UserId
            IF @TransferReadingReceipts = 1
            BEGIN
                EXEC m136_doCopyConfirms @DocumentId
            END
            ELSE
            BEGIN
                EXEC m136_SetCopyConfirms @DocumentId, 0
            END
            UPDATE
                m136_tblDocument
            SET
                iApproved = 1,
                iApprovedById = @UserId,
                dtmApproved = GETDATE(),
                strApprovedBy = @FullName,
                dtmPublish = @PublishFrom,
                dtmPublishUntil = @PublishUntil,
                iInternetDoc = @isInternetDocument,
                iReceiptsCopied = @TransferReadingReceipts
            WHERE
                iDocumentId = @DocumentId
                AND iLatestVersion = 1
            EXEC m136_insertEntityIntoTextIndex @EntityId
            EXEC dbo.m136_SetVersionFlags @DocumentId
            INSERT INTO dbo.CacheUpdate (ActionType, EntityId) VALUES (11, @DocumentId);
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_insertAllIntoTextIndex]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_insertAllIntoTextIndex]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @iEntityId int
	--DocTable
	declare @docTbl table(
		iEntityId int not null,
		iDocumentId int not null
	)
	insert into @docTbl
	select
		d.iEntityId,
		d.iDocumentId
	from m136_tblDocument d
	where 
		d.iDeleted = 0
		and d.iVersion = (select max(iVersion) from m136_tblDocument dd where dd.iDocumentId = d.iDocumentId and dd.iDeleted = 0
			and dd.iApproved in (1,4) AND dd.dtmPublish <= getDate()
			and dd.iDraft = 0)
		and d.iApproved=1
	order by iEntityId

	declare Entitys CURSOR
	FOR
		select iEntityId from @docTbl order by iEntityId
	open Entitys
	FETCH NEXT FROM Entitys
	into @iEntityId

	WHILE @@FETCH_STATUS <> -1
	BEGIN
		exec dbo.m136_insertEntityIntoTextIndex @iEntityId, 0
		FETCH NEXT FROM Entitys
		into @iEntityId
	END
	CLOSE Entitys
	DEALLOCATE Entitys
	exec sp_fulltext_catalog N'Handbook', N'start_incremental'
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnOrgGetOrgUnitName]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnOrgGetOrgUnitName] (@iOrgUnitId int, @strDefaultName varchar(102))  
RETURNS varchar(102) AS  
BEGIN 

declare @var varchar(102)
if @iOrgUnitId > 0 
begin
    select @var = strName from tblDepartment where iDepartmentId = @iOrgUnitId
end
else
  set @var = ''

return isnull(@var, @strDefaultName)

END
GO
/****** Object:  Table [Risk].[AnalysisAttachments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [Risk].[AnalysisAttachments](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[Title] [nvarchar](400) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Size] [int] NOT NULL,
	[ContentType] [varchar](400) NOT NULL,
	[Extension] [varchar](10) NOT NULL,
	[Content] [image] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EntityId] [int] NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisAttachments_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [Risk].[AnalysisAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisAcceptanceCriterias](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[ConsequenceTypeId] [tinyint] NOT NULL,
	[ConsequenceId] [tinyint] NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisAcceptanceCriterias_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Risk].[CreateAnalysis]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[CreateAnalysis] 
	@AreaId INT,
	@Title [nvarchar](250),
	@Target [nvarchar](500),
	@Background [nvarchar](500),
	@Description [nvarchar](1000),
	@UserId INT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
			SET NOCOUNT ON;
			DECLARE @IdentityId AS INT;
			INSERT INTO risk.Analysis
			(
				[AreaId], [Title], [Target], [Background], [Description], [CreatedBy],
				[CreateDate], [UpdatedBy], [UpdatedDate], [Status], [ResultsLocked], [Conclusion]
			)
			VALUES
			(
				@AreaId, @Title, @Target,  @Background,  @Description, @UserId, 
				GETDATE(), @UserId, GETDATE(), 1, 0, NULL
			);
		    
			SELECT @IdentityId = CAST(SCOPE_IDENTITY() AS INT);
			
			INSERT INTO Risk.AnalysisAcceptanceCriterias(AnalysisId, ConsequenceTypeId, ConsequenceId)
				SELECT @IdentityId, ac.ConsequenceTypeId, ac.ConsequenceId 
					FROM Risk.AreaConsequences ac
					WHERE (ac.AreaId = @AreaId OR @AreaId IS NULL)
					AND (ac.iDeleted = 0);
			SELECT @IdentityId AS Id; -- Output Id
					
			EXEC [Risk].[AddAnalysisMember] @IdentityId, @UserId	
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_EmployeesWithPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_EmployeesWithPermissions]
	@iParentHandbookId INT = 0,
	@iSecurityId INT = 0,
	@iBit INT = 0
AS
BEGIN
	DECLARE @HandbookIdTable TABLE(iHandbookId INT)
	-- Do we have a specified root or do we assume we will list everything?
	IF ISNULL(@iParentHandbookId,0) = 0
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_tblHandbook WHERE iDeleted = 0 
		END
	ELSE
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_GetHandbookRecursive (@iParentHandbookId, @iSecurityId, 0)
		END 
	SELECT iEmployeeid, strFirstName, strLastName, tblDep.strName AS DepartmentName 
	FROM tblemployee 
		INNER JOIN tblDepartment tblDep ON tblDep.iDepartmentID = tblEmployee.iDepartmentId
	WHERE iEmployeeId in (SELECT DISTINCT  relEmployeeSecGroup.iEmployeeId
							FROM           relEmployeeSecGroup 
								INNER JOIN tblSecGroup ON relEmployeeSecGroup.iSecGroupId = tblSecGroup.iSecGroupId 
								INNER JOIN tblACL ON tblSecGroup.iSecGroupId = tblACL.iSecurityId
							WHERE  (tblACL.iApplicationId = 136) 
									AND (tblACL.iPermissionSetId = 462) 
									AND ((tblACL.iBit & @iBit) = @iBit)
									AND (tblACL.iEntityId in (SELECT ihandbookId FROM @HandbookIdTable)))
	ORDER BY DepartmentName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_EmployeePermissionsToFolder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_EmployeePermissionsToFolder]
    @FolderId INT = 0,
    @UserId INT = 0,
    @iBit INT = 0
AS
BEGIN
	DECLARE @HandbookIdTable TABLE(iHandbookId INT)
	-- Do we have a specified root or do we assume we will list everything?
	IF ISNULL(@FolderId, 0) = 0
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_tblHandbook WHERE iDeleted = 0 
		END
	ELSE
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_GetHandbookRecursive (@FolderId, @UserId, 0)
		END 
    SELECT iLevelType as LevelType,
        dbo.fn136_GetParentPathEx(iHandbookId) as ParentPath
    FROM
        m136_tblHandbook
    WHERE
        ihandbookId in (SELECT iHandbookId from @HandbookIdTable)
        AND iHandbookId in (
            SELECT
                distinct tblACL.iEntityId
            FROM
                tblACL 
                    INNER JOIN tblSecGroup sg ON sg.iSecGroupId = tblACL.iSecurityId
                    INNER JOIN relEmployeeSecGroup resg ON resg.iSecGroupId = sg.iSecGroupId 
            WHERE 
                resg.iEmployeeId = @UserId
                AND tblACL.iApplicationId = 136
                AND tblACL.iPermissionSetId = 462
                AND (tblACL.iBit & @iBit) = @iBit)
    ORDER BY ParentPath
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteSecurityGroups]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 24, 2015
-- Description:	Delete roles
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_DeleteSecurityGroups]
	@SecurityGroupIds AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DELETE dbo.tblACL WHERE iSecurityId IN (SELECT Id FROM @SecurityGroupIds);
	DELETE dbo.relEmployeeSecGroup WHERE dbo.relEmployeeSecGroup.iSecGroupId IN (SELECT Id FROM @SecurityGroupIds);
    DELETE dbo.tblSecGroup WHERE dbo.tblSecGroup.iSecGroupId IN (SELECT Id FROM @SecurityGroupIds);
END
GO
/****** Object:  StoredProcedure [dbo].[GetUsersWithXPremissionOfYModule]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUsersWithXPremissionOfYModule]
	@PageIndex INT,
	@PageSize INT,
	@IsLoadMore BIT,
	@RightType INT,
	@Module INT,
	@PermissionSet INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @SecGroupIdTable TABLE
	(
		iSecurityId INT
	);
	INSERT INTO @SecGroupIdTable
	SELECT DISTINCT iSecurityId
	FROM tblACL WHERE iApplicationId = @Module AND iPermissionSetId = @PermissionSet AND iBit & @RightType = @RightType
	DECLARE @UserIdTable TABLE
	(
		iEmployeeId INT
	);
	INSERT INTO @UserIdTable
	SELECT DISTINCT iEmployeeId
	FROM relEmployeeSecGroup WHERE iSecGroupId IN (SELECT iSecurityId FROM @SecGroupIdTable);
	WITH users AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY iEmployeeId),
			iEmployeeId, iDepartmentId, strFirstName, strLastName, strLoginName, strEmail
		FROM 
			dbo.tblEmployee
		WHERE
			iEmployeeId IN (SELECT iEmployeeId FROM @UserIdTable)
	)
	SELECT 
		*
	FROM 
		users
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				dbo.tblEmployee
			WHERE
				iEmployeeId IN (SELECT iEmployeeId FROM @UserIdTable)
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [dbo].[GetUsersByPermission]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUsersByPermission] 
	@Permission INT,
	@ApplicationIds AS dbo.[Item] READONLY,
	@PermissionSetIds AS dbo.[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
    SELECT te.iEmployeeId, 
		te.iDepartmentId, 
		te.strFirstName, 
		te.strLastName, 
		te.strEmail 
    FROM dbo.tblEmployee te
    LEFT JOIN dbo.relEmployeeSecGroup resg ON resg.iEmployeeId = te.iEmployeeId
    WHERE resg.iSecGroupId IN (
		SELECT ta.iSecurityId FROM dbo.tblACL ta 
			WHERE ta.iApplicationId IN (SELECT Id FROM @ApplicationIds)
			AND ta.iPermissionSetId IN (SELECT Id FROM @PermissionSetIds)
			AND (ta.iBit & @Permission) = @Permission
		);
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategoryByType]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategoryByType]
	@PageIndex INT,
	@PageSize INT,
	@Type INT,
	@UserId INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @Roles TABLE (iSecGroupId INT); 
	DECLARE @Departments TABLE (iDepartmentId INT);
	INSERT INTO @Roles
	SELECT DISTINCT resg.iSecGroupId
	FROM dbo.relEmployeeSecGroup resg
	WHERE resg.iEmployeeId = @UserId;
	INSERT INTO @Departments
	SELECT te.iDepartmentId FROM dbo.tblEmployee te
	WHERE te.iEmployeeId = @UserId;
	WITH categories AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY c.CategoryId DESC),
			c.*,
			SecGroupName = CASE
								WHEN c.SecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.SecGroupId)
								WHEN c.AnonymousSecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.AnonymousSecGroupId)
								ELSE NULL
						   END
		FROM 
			Deviation.Category c
		WHERE
			(@Type IS NULL OR c.CategoryType = @Type)
			AND (c.IsDeleted = 0)
			AND ((c.AccessType IS NULL OR c.AccessType = 0)
				OR (c.AccessType = 1 AND (EXISTS(SELECT ta.*
						FROM dbo.tblACL ta 
						WHERE ta.iEntityId = c.CategoryId
						AND ta.iApplicationId = 151 AND ta.iPermissionSetId = 612
						AND ta.iSecurityId IN (SELECT iSecGroupId FROM @Roles))
					OR 
						(EXISTS(SELECT ta.* 
						FROM dbo.tblACL ta 
						WHERE ta.iEntityId = c.CategoryId
						AND ta.iApplicationId = 151 AND ta.iPermissionSetId = 613
						AND ta.iSecurityId IN (SELECT iDepartmentId FROM @Departments)))
					))
				)
	)
	SELECT 
		c.*, c.SecGroupName
	FROM 
		categories c
	WHERE 
		(@PageSize = 0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber;
	SELECT
		COUNT(*) AS Total
	FROM 
		Deviation.Category c
	WHERE
		(@Type IS NULL OR c.CategoryType = @Type)
		AND (c.IsDeleted = 0)
		AND ((c.AccessType IS NULL OR c.AccessType = 0)
				OR (c.AccessType = 1 AND (EXISTS(SELECT ta.*
						FROM dbo.tblACL ta 
						WHERE ta.iEntityId = c.CategoryId
						AND ta.iApplicationId = 151 AND ta.iPermissionSetId = 612
						AND ta.iSecurityId IN (SELECT iSecGroupId FROM @Roles))
					OR 
						(EXISTS(SELECT ta.* 
						FROM dbo.tblACL ta 
						WHERE ta.iEntityId = c.CategoryId
						AND ta.iApplicationId = 151 AND ta.iPermissionSetId = 613
						AND ta.iSecurityId IN (SELECT iDepartmentId FROM @Departments)))
					))
				);
END
GO
/****** Object:  StoredProcedure [Calendar].[GetActivityDetailsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[GetActivityDetailsById]
    @ActivityId INT
AS
BEGIN
    SELECT
        ActivityId,
        Name,
        Description,
        StartDate,
        EndDate,
        CreatedBy,
        CreatedDate,
        ResponsibleId,
        IsPermissionControlled
    FROM
        [Calendar].[Activities]
    WHERE
        ActivityId = @ActivityId
    SELECT
        ActivityTaskId,
        ActivityId,
        Name,
        Description,
        CreatedBy,
        CreatedDate,
        IsCompleted,
        CompletedDate
    FROM
        [Calendar].[ActivityTasks]
    WHERE
        ActivityId = @ActivityId
    SELECT
        ad.ActivityDocumentId,
        ad.ActivityId,
        ad.DocumentId,
        d.strName AS DocumentName,
        dbo.fn136_GetParentPathEx(d.iHandbookId) AS DocumentPath
    FROM
        [Calendar].[ActivityDocuments] ad
            INNER JOIN [dbo].[m136_tblDocument] d ON ad.DocumentId = d.iDocumentId
    WHERE
        ad.ActivityId = @ActivityId
        AND iLatestVersion = 1
    SELECT
        iEntityId AS ActivityId,
        iPermissionSetId AS AccessTypeId,
        iSecurityId AS AccessId,
        CASE
            WHEN iPermissionSetId = 701 THEN (SELECT strFirstName + ' ' + strLastName FROM tblEmployee WHERE iEmployeeId = iSecurityId)
            WHEN iPermissionSetId = 702 THEN (SELECT strName FROM tblDepartment WHERE iDepartmentId = iSecurityId)
            WHEN iPermissionSetId = 703 THEN (SELECT strName FROM tblSecGroup WHERE iSecGroupId = iSecurityId)
        END AS AccessName
    FROM
        tblAcl
    WHERE
        iEntityId = @ActivityId
        AND iApplicationId = 160
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnSecurityContentPermission]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSecurityContentPermission] (@iApplicationId int, @iPermissionSetId int, @iSecurityId int)  
RETURNS int AS  
BEGIN 

declare @var int
select @var = 0
select @var = @var | iBit from tblAcl a join m136_tblHandbook hb on a.iEntityId=hb.iHandbookId AND hb.iDeleted=0 join relEmployeeSecGroup r on a.iSecurityId = r.iSecGroupId and r.iEmployeeId = @iSecurityId where a.iApplicationId = @iApplicationId and a.iPermissionSetId = @iPermissionSetId

return @var

END
GO
/****** Object:  StoredProcedure [Calendar].[DeleteActivities]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[DeleteActivities] 
    @ActivityIds AS [dbo].[Item] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DELETE FROM
            [Calendar].[ActivityTasks]
        WHERE
            ActivityId IN (SELECT Id FROM @ActivityIds)
        DELETE FROM
            [Calendar].[ActivityDocuments]
        WHERE
            ActivityId IN (SELECT Id FROM @ActivityIds)
        DELETE FROM
            tblAcl
        WHERE
            iApplicationId = 160
            AND iEntityId IN (SELECT Id FROM @ActivityIds)
        DELETE FROM
            [Calendar].[Activities]
        WHERE
            ActivityId IN (SELECT Id FROM @ActivityIds)
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  Table [Risk].[AnalysisDangers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisDangers](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](1000) NULL,
 CONSTRAINT [PK_Risk_AnalysisDangers_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_be_EndHearingDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_EndHearingDocument] 
	@EntityId INT
AS
BEGIN
	DECLARE @HearingId AS INT
	SELECT @HearingId = Id
	FROM dbo.m136_Hearings
	WHERE EntityId = @EntityId
	UPDATE dbo.m136_Hearings 
	SET IsActive = 0
	WHERE Id = @HearingId
	UPDATE dbo.m136_tblDocument
	SET iApproved = 0, iStatus = 0
	WHERE iEntityId = @EntityId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateDepartment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateDepartment] 
	@iDepartmentId INT,
	@strName VARCHAR(80),
	@bCompanyId BIT,
	@iDepartmentParentId INT,
	@iTargetId INT,
	@strDescription VARCHAR(4000),
	@strOrgNo VARCHAR(50),
	@strPhone VARCHAR(20),
	@strFax VARCHAR(20),
	@strEmail VARCHAR(150),
	@strURL VARCHAR(200),
	@iCountryId INT,
	@strVisitAddress1 VARCHAR(150),
	@strVisitAddress2 VARCHAR(150),
	@strVisitAddress3 VARCHAR(150),
	@strAddress1 VARCHAR(150),
	@strAddress2 VARCHAR(150),
	@strAddress3 VARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iMaxDepartmentId INT;
	SELECT @iMaxDepartmentId = MAX(dpt.iDepartmentId) FROM dbo.tblDepartment dpt;
	DECLARE @NewDerparmentId INT = ISNULL(@iMaxDepartmentId,0) + 1, @iParentLevel INT = 0, @bParentCompany BIT, @iParentCompanyId INT, @iNewCompanyId INT;
	SELECT @iParentLevel = dpt.iLevel, @bParentCompany = dpt.bCompany, @iParentCompanyId = dpt.iCompanyId 
		FROM dbo.tblDepartment dpt WHERE dpt.iDepartmentId = @iDepartmentParentId;
	IF (@bParentCompany = 1)
	BEGIN
		SET @iNewCompanyId = @iDepartmentParentId;
	END
	ELSE
	BEGIN
		SET @iNewCompanyId = @iParentCompanyId;
	END
	SET IDENTITY_INSERT dbo.tblDepartment ON;
	INSERT INTO dbo.tblDepartment
	(
       iDepartmentId,
       iDepartmentParentId,
       iCompanyId,
       iMin,
       iMax,
       iLevel,
       strName,
       strDescription,
       strContactInfo,
       bCompany,
       strPhone,
       strFax,
       strEmail,
       strURL,
       iCountryId,
       strOrgNo,
       strVisitAddress1,
       strVisitAddress2,
       strVisitAddress3,
       strAddress1,
       strAddress2,
       strAddress3,
       strFileURL,
       iChildCount,
       ADIdentifier
   )
   VALUES
   (
       @NewDerparmentId,-- iDepartmentId - int
       @iDepartmentParentId, -- iDepartmentParentId - int
       @iNewCompanyId, -- iCompanyId - int
       0, -- iMin - int
       0, -- iMax - int
       (@iParentLevel + 1), -- iLevel - int
       @strName, -- strName - varchar
       @strDescription, -- strDescription - varchar
       '', -- strContactInfo - varchar
       @bCompanyId, -- bCompany - bit
       @strPhone, -- strPhone - varchar
       @strFax, -- strFax - varchar
       @strEmail, -- strEmail - varchar
       @strURL, -- strURL - varchar
       @iCountryId, -- iCountryId - int
       @strOrgNo, -- strOrgNo - varchar
       @strVisitAddress1, -- strVisitAddress1 - varchar
       @strVisitAddress2, -- strVisitAddress2 - varchar
       @strVisitAddress3, -- strVisitAddress3 - varchar
       @strAddress1, -- strAddress1 - varchar
       @strAddress2, -- strAddress2 - varchar
       @strAddress3, -- strAddress3 - varchar
       '', -- strFileURL - varchar
       0, -- iChildCount - int
       '00000000-0000-0000-0000-000000000000' -- ADIdentifier - uniqueidentifier
   );
   SELECT @NewDerparmentId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentHearingInformation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentHearingInformation] 
	@EntityId AS [dbo].[Item] READONLY
AS
BEGIN
	DECLARE @HearingId AS TABLE (Id INT)
	INSERT INTO @HearingId	  
	SELECT h.Id
	FROM dbo.m136_Hearings h
		JOIN (SELECT MAX(Id) AS Id, EntityId FROM dbo.m136_Hearings WHERE EntityId IN (SELECT Id FROM @EntityId) GROUP BY EntityId
	) e ON h.Id = e.Id
	SELECT *
	FROM dbo.m136_Hearings
	WHERE Id IN (SELECT Id FROM @HearingId)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetHearingsToEnded]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetHearingsToEnded] 
AS
BEGIN
	SELECT *
	FROM dbo.m136_Hearings
	WHERE IsActive = 1
		  AND DueDate < GETDATE()
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetNewsForStartpage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetNewsForStartpage]
    @CategoryId AS INT,
	@ShowInModule INT
AS
BEGIN
	DECLARE @Today Datetime;
    DECLARE @NewsIdTable TABLE (iInfoId INT);
	SET @Today = GETDATE();
	INSERT INTO @NewsIdTable (iInfoId)
    SELECT TOP 3
        i.iInfoId
    FROM 
        dbo.m123_tblInfo i
            INNER JOIN m123_relInfoCategory ri ON i.iInfoId = ri.iInfoId
            INNER JOIN m123_tblCategory c ON c.iCategoryId = ri.iCategoryId
    WHERE
        i.iDraft = 0
        AND	i.dtmPublish <= @Today
        AND i.dtmExpire >= @Today
        AND 
        (
            (ri.iCategoryId = @CategoryId AND c.iShownIn & @ShowInModule = @ShowInModule)
            OR ri.iCategoryId IN (
                                 SELECT iCategoryId
                                 FROM m123_tblCategory
                                 WHERE iParentCategoryId = @CategoryId AND iShownIn & @ShowInModule = @ShowInModule)
        )
    ORDER BY i.dtmPublish DESC
    SELECT TOP 3
        iInfoId,
        strTopic,
        strTitle,
        strIngress,
        strBody,
        dtmPublish
    FROM
        dbo.m123_tblInfo
    WHERE
        iInfoId IN (SELECT iInfoId FROM @NewsIdTable)
    ORDER BY dtmPublish DESC
    SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId IN (SELECT iInfoId FROM @NewsIdTable)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetNewsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetNewsById]
	@InfoId INT
AS
BEGIN
	DECLARE @Today Datetime;
	SET @Today = GETDATE();
	SELECT
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated
	FROM 
		dbo.m123_tblInfo i
	WHERE
		i.iInfoId  = @InfoId
    SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId = @InfoId
    SELECT b.iItemId,
        b.strName,
        b.strExtension,
        b.strDescription
    FROM
        m123_relInfo i
            INNER JOIN m136_tblBlob b
                ON i.iEntityId = b.iItemId
    WHERE
        i.iInfoId = @InfoId
    ORDER BY b.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetReadingListSecurityGroups]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetReadingListSecurityGroups]
AS
BEGIN
    SELECT DISTINCT 
        sg.iSecGroupId,
        sg.strName,
        sg.strDescription 
	FROM [dbo].[tblSecGroup] sg
	WHERE
        sg.iSecGroupId IN (SELECT ReaderId FROM ReadingListReaders WHERE ReaderTypeId = 3)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SendDocumentToApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_SendDocumentToApproval]
    @ApproverId INT,
	@EntityId INT,
	@TransferReadingReceipts BIT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            DECLARE @DocumentId INT;
            SELECT
                @DocumentId = iDocumentId
            FROM
                m136_tblDocument
            WHERE
                iEntityId = @EntityId
            UPDATE
                m136_tblDocument
            SET
                iDraft = 0
            WHERE
                iEntityId = @EntityId
            INSERT INTO
                m136_relSentEmpApproval
                    (iEmployeeId, iEntityId, dtmSentToApproval)
                VALUES
                    (@ApproverId, @EntityId, GETDATE())
            DELETE FROM
                m136_tblCopyConfirms
            WHERE
                iEntityId = @EntityId
            IF @TransferReadingReceipts = 1
            BEGIN
                INSERT INTO
                    m136_tblCopyConfirms
                        (iEntityId)
                    VALUES
                        (@EntityId)
            END
            EXEC m136_SetVersionFlags @DocumentId;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetVirtualDocumentByDocumentId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetVirtualDocumentByDocumentId] 
	@DocumentId INT = NULL
AS
SET NOCOUNT ON
BEGIN

SELECT 
	dbo.fn136_GetParentPathEx(vir.iHandbookId) as Path,
	han.strName AS FolderName,
	han.iHandbookId 
FROM dbo.m136_relVirtualRelation AS vir
	JOIN dbo.m136_tblHandbook AS han ON vir.iHandbookId = han.iHandbookId AND han.iDeleted = 0
WHERE vir.iDocumentId = @DocumentId
ORDER BY han.iHandbookId
		
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDepartmentInformation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 17, 2015
-- Description:	Update department information.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDepartmentInformation]
	@iDepartmentId INT,
	@strName VARCHAR(80),
	@bCompanyId BIT,
	@iDepartmentParentId INT,
	@iTargetId INT,
	@strDescription VARCHAR(4000),
	@strOrgNo VARCHAR(50),
	@strPhone VARCHAR(20),
	@strFax VARCHAR(20),
	@strEmail VARCHAR(150),
	@strURL VARCHAR(200),
	@iCountryId INT,
	@strVisitAddress1 VARCHAR(150),
	@strVisitAddress2 VARCHAR(150),
	@strVisitAddress3 VARCHAR(150),
	@strAddress1 VARCHAR(150),
	@strAddress2 VARCHAR(150),
	@strAddress3 VARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @iLevel INT, @iMaxDepartment INT;
	SELECT @iLevel = td.iLevel FROM dbo.tblDepartment td WHERE td.iDepartmentId = @iDepartmentParentId;
	
    UPDATE dbo.tblDepartment
    SET
        iDepartmentParentId = @iDepartmentParentId,
        iCompanyId			= @iDepartmentParentId,
        strName				= @strName,
        strDescription		= @strDescription,
        bCompany			= @bCompanyId,
        strPhone			= @strPhone,
        strFax				= @strFax,
        strEmail			= @strEmail,
        strURL				= @strURL,
        iCountryId			= @iCountryId,
        strOrgNo			= @strOrgNo,
        strVisitAddress1	= @strVisitAddress1,
        strVisitAddress2	= @strVisitAddress2,
        strVisitAddress3	= @strVisitAddress3,
        strAddress1			= @strAddress1,
        strAddress2			= @strAddress2,
        strAddress3			= @strAddress3
    WHERE iDepartmentId = @iDepartmentId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetParentsIncludeSelf]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_be_GetParentsIncludeSelf] 
	@iItemId INT,
	@isFolder BIT
AS
BEGIN
	DECLARE @idTable table(iHandbookId int not null)
	DECLARE @seedId int;
	IF(@isFolder = 1)
		BEGIN
			SET @seedId = @iItemId;
			INSERT INTO @idTable 
			VALUES (@iItemId)
		END 
	ELSE
		BEGIN
			SELECT 
				@seedId = doc.iHandbookId
			FROM
				m136_tblDocument doc
			WHERE
				doc.iDocumentId = @iItemId
			INSERT INTO @idTable
			VALUES(@seedId) 
		END
	INSERT INTO 
		@idTable 
	SELECT
		*
	FROM
		[dbo].[m136_GetParentIdsInTbl](@seedId)
	SELECT
		hb.iParentHandbookId AS [iHandbookId],
		hb.strName,
		hb.iHandbookId AS Id,
		hb.iLevelType AS [LevelType],
		-1 AS [iDocumentTypeId],
		NULL AS [Version],
		NULL AS [dtmApproved],
		NULL AS [dtmPublishUntil],
		hb.iDepartmentId AS DepartmentId
	FROM
		m136_tblHandbook hb
	WHERE
		hb.iHandbookId IN (SELECT * FROM @idTable)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_RollbackChangesDocument]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_RollbackChangesDocument] 
	@DocumentIds AS [dbo].[Item] READONLY
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
            DECLARE @TableEntityId AS TABLE (entityId INT  PRIMARY KEY)
            INSERT INTO @TableEntityId
            SELECT iEntityId
            FROM dbo.m136_tblDocument doc
            JOIN @DocumentIds docId ON  doc.iDocumentId = docId.Id
            WHERE doc.iLatestVersion = 1 
                  AND doc.iApproved NOT IN (1,4)
            DELETE FROM m136_tblFeedback 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_tblMetaInfoDate 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_tblMetaInfoNumber 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_tblMetaInfoText 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_tblMetaInfoRichText 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_relInfo 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DELETE FROM m136_tblDocument 
            WHERE iEntityId IN (SELECT entityId FROM @TableEntityId);
            DECLARE @iDocumentId INT
            DECLARE curDocumentId CURSOR FOR 
                SELECT Id
                FROM @DocumentIds;
            OPEN curDocumentId; 
            FETCH NEXT FROM curDocumentId INTO @iDocumentId;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                EXEC dbo.m136_SetVersionFlags @iDocumentId
                FETCH NEXT FROM curDocumentId INTO @iDocumentId;
            END
            CLOSE curDocumentId;
            DEALLOCATE curDocumentId;
        COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_RetrieveSendToApproval]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_RetrieveSendToApproval] 
	@DocumentId AS INT
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
		DECLARE @EntityId INT
		SELECT @EntityId = iEntityId
		FROM dbo.m136_tblDocument
		WHERE iDocumentId = @DocumentId
			  AND iLatestVersion = 1
		UPDATE dbo.m136_tblDocument 
		SET iDraft = 1 
		WHERE iEntityId =  @EntityId
		DELETE FROM dbo.m136_relSentEmpApproval          
		WHERE iEntityId = @EntityId
		EXEC dbo.m136_SetVersionFlags @DocumentId
        COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_LogDocumentRead]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_LogDocumentRead]
	@iSecurityId INT,
	@iEntityId INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iDocumentId INT
	DECLARE @now DATETIME
	SET @now = GETDATE()
	SET @iDocumentId = 
	(
		SELECT 
			iDocumentId 
		FROM
			[dbo].[m136_tblDocument]
		WHERE
			iEntityId = @iEntityId
	)
	UPDATE
		[dbo].[m136_tblDocument]
	SET
		iReadCount = iReadcount + 1
	WHERE
		iEntityId = @iEntityId
	EXEC [dbo].[m136_InsertOrUpdateDocAccessLog] @iSecurityId , @iDocumentId, @now
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetNewsForStartpage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetNewsForStartpage]
	@CategoryId AS INT
AS
BEGIN
	DECLARE @Today DATETIME;
	DECLARE @NewsIdTable TABLE (iInfoId INT);
	SET @Today = GETDATE();
	INSERT INTO @NewsIdTable (iInfoId)
    SELECT TOP 3
        i.iInfoId
    FROM 
        dbo.m123_tblInfo i
            INNER JOIN m123_relInfoCategory ri ON i.iInfoId = ri.iInfoId
            INNER JOIN m123_tblCategory c ON c.iCategoryId = ri.iCategoryId
    WHERE
        i.iDraft = 0
        AND	i.dtmPublish <= @Today
        AND i.dtmExpire >= @Today
        AND 
        (
            (ri.iCategoryId = @CategoryId AND c.iShownIn & 1 = 1)
            OR ri.iCategoryId IN (
                                 SELECT iCategoryId 
                                 FROM m123_tblCategory 
                                 WHERE iParentCategoryId = @CategoryId AND iShownIn & 1 = 1)
        )
    ORDER BY i.dtmPublish DESC;
	SELECT TOP 3
		iInfoId,
		strTopic,
		strTitle,
		strIngress,
		strBody,
		dtmPublish
	FROM 
		dbo.m123_tblInfo
	WHERE
        iInfoId IN (SELECT iInfoId FROM @NewsIdTable)
	ORDER BY dtmPublish DESC;
    SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId IN (SELECT iInfoId FROM @NewsIdTable)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetNewsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetNewsById]
	@InfoId INT
AS
BEGIN
	DECLARE @today Date;
	SET @today = GETDATE();
	
	SELECT
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated
	FROM 
		dbo.m123_tblInfo i
	WHERE
		i.iInfoId  = @InfoId
	AND i.iDraft = 0
	AND	i.dtmPublish < @today
	AND i.dtmExpire > @today
	
	SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId = @InfoId;
        
    SELECT b.iItemId,
        b.strName,
        b.strExtension,
        b.strDescription
    FROM
        m123_relInfo i
            INNER JOIN m136_tblBlob b
                ON i.iEntityId = b.iItemId
    WHERE
        i.iInfoId = @InfoId
    ORDER BY b.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetActiveNewsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetActiveNewsById]
	@InfoId INT
AS
BEGIN
	DECLARE @today Datetime;
	SET @today = GETDATE();
	SELECT
		i.iInfoId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated
	FROM 
		dbo.m123_tblInfo i
	WHERE
		i.iInfoId  = @InfoId
        AND i.iDraft = 0
        AND	i.dtmPublish <= @today
        AND i.dtmExpire >= @today
	SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId = @InfoId
    SELECT b.iItemId,
        b.strName,
        b.strExtension,
        b.strDescription
    FROM
        m123_relInfo i
            INNER JOIN m136_tblBlob b
                ON i.iEntityId = b.iItemId
    WHERE
        i.iInfoId = @InfoId
    ORDER BY b.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetExpiresDocsForOwner]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetExpiresDocsForOwner]
	@iExpiresWithin int,
	@iEmployeeId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iDocumentId,
	doc.strName,
	doc.dtmPublishUntil,
	dbo.fn136_GetParentPath(doc.iHandbookId) docPath,
	doc.iHandbookId iHandbookId
from
	m136_tblDocument doc
where
	doc.iLatestApproved = 1
	and doc.iApproved=1
	and doc.iDeleted=0
	and iCreatedById=@iEmployeeId
	and doc.dtmPublishUntil = dateadd(d, @iExpiresWithin, convert(date, getdate()))
order by docPath desc
END
GO
/****** Object:  StoredProcedure [dbo].[m136_GetExpiredTodayDocsForOwnerOrCreator]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_GetExpiredTodayDocsForOwnerOrCreator]
	@iEmployeeId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iDocumentId,
	doc.strName,
	doc.dtmPublishUntil,
	case
		when doc.iApprovedById=@iEmployeeId then 1
		else 0
	end as isApprover,
	case
		when doc.iCreatedById=@iEmployeeId then 1
		else 0
	end as isOwner,
	dbo.fn136_GetParentPath(doc.iHandbookId) docPath,
	doc.iHandbookId iHandbookId
from
	m136_tblDocument doc
where
	doc.iLatestApproved = 1
	and doc.iApproved=1
	and doc.iDeleted=0
	and (iAlterId=@iEmployeeId or iApprovedById=@iEmployeeId)
	and doc.dtmPublishUntil = convert(date, getdate())
order by
isApprover desc,
isOwner desc,
docPath desc

END
GO
/****** Object:  StoredProcedure [dbo].[m136_getExpiredDocsForEmployee]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[m136_getExpiredDocsForEmployee]
	@iExpiresWithin int,
	@iEmployeeId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select
	distinct doc.iDocumentId,
	doc.strName,
	doc.dtmPublishUntil,
	case
		when doc.iApprovedById=@iEmployeeId then 1
		else 0
	end as isApprover,
	case
		when doc.iAlterId=@iEmployeeId then 1
		else 0
	end as isAlterer,
	datediff(d, getdate(), doc.dtmPublishUntil) daysExpired,
	dbo.fn136_GetParentPath(doc.iHandbookId) docPath,
	doc.iHandbookId iHandbookId
from
	m136_tblDocument doc
where
	(
		(doc.iVersion = 
			(select max(iVersion) from m136_tblDocument kk where 
			kk.iDocumentId = doc.iDocumentId and 
			kk.iApproved in (1,4)
			)
		)
	)
	and doc.iApproved=1
	and doc.iDeleted=0
	and (iAlterId=@iEmployeeId or iApprovedById=@iEmployeeId)
	and doc.dtmPublishUntil < dateadd(d, @iExpiresWithin, getdate())
order by
daysExpired asc,
isApprover desc,
isAlterer desc



END

--exec dbo.m136_getExpiredDocsForEmployee 20, 1
GO
/****** Object:  Table [Risk].[AnalysisCounterMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisCounterMeasures](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[Title] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](1000) NULL,
	[DueDate] [datetime] NULL,
	[ResponsiblePersonId] [int] NULL,
	[State] [int] NOT NULL,
	[ActionType] [int] NOT NULL,
	[WhatsDone] [nvarchar](max) NULL,
	[FollowUpDate] [datetime] NULL,
	[RegisteredDate] [datetime] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisCounterMeasures_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Risk].[SearchCounterMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[SearchCounterMeasures] 
	@AnalysisId INT,
    @Text [nvarchar](255),
	@State INT,
	@AreaId INT,
	@RegisteredBy INT,
	@DateFilteredType INT,
	@FromDate [datetime],
	@ToDate [datetime]
AS
BEGIN
	SET NOCOUNT ON;

    SELECT acm.Id, acm.AnalysisId, a.Title AS Analysis, 
		acm.Title, acm.[Description], acm.DueDate, acm.ResponsiblePersonId, 
		(te.strFirstName + ' ' + te.strLastName) as Responsible, 
		acm.[State], acm.ActionType, acm.WhatsDone, acm.FollowUpDate, 
		acm.RegisteredDate, acm.IsDeleted 
	FROM Risk.AnalysisCounterMeasures acm
	JOIN Risk.Analysis a ON a.Id = acm.AnalysisId
	LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = acm.ResponsiblePersonId
	WHERE (acm.AnalysisId = @AnalysisId OR @AnalysisId IS NULL)
		AND (acm.Title LIKE '%' + @Text + '%' OR acm.[Description] LIKE '%' + @Text + '%' OR @Text IS NULL)
		AND (acm.[State] = @State OR @State IS NULL)
		AND (a.AreaId = @AreaId OR @AreaId IS NULL)
		AND (acm.ResponsiblePersonId = @RegisteredBy OR @RegisteredBy IS NULL)
		AND ((((CASE  @DateFilteredType
		WHEN 1 THEN acm.RegisteredDate 
		WHEN 2 THEN acm.FollowUpDate 
		END) <= @ToDate) AND (@FromDate IS NULL AND @ToDate IS NOT NULL)
		) OR (
		(@FromDate IS NOT NULL AND @ToDate IS NOT NULL AND (CASE  @DateFilteredType
		WHEN 1 THEN acm.RegisteredDate 
		WHEN 2 THEN acm.FollowUpDate 
		END) BETWEEN @FromDate AND @ToDate)
		) OR (
		@FromDate IS NOT NULL AND @ToDate IS NULL AND (CASE @DateFilteredType
		WHEN 1 THEN acm.RegisteredDate 
		WHEN 2 THEN acm.FollowUpDate 
		END) >= @FromDate		
		) OR (@FromDate IS NULL AND @ToDate IS NULL))
END
GO
/****** Object:  StoredProcedure [Risk].[GetCounterMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetCounterMeasures] 
	@AnalysisId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT acm.Id, acm.AnalysisId, a.Title AS Analysis, 
		acm.Title, acm.[Description], acm.DueDate, acm.ResponsiblePersonId, 
		(te.strFirstName + ' ' + te.strLastName) AS Responsible,
		acm.[State], acm.ActionType, acm.WhatsDone, acm.FollowUpDate, 
		acm.RegisteredDate, acm.IsDeleted 
    FROM Risk.AnalysisCounterMeasures acm
    JOIN Risk.Analysis a ON a.Id = acm.AnalysisId
    LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = acm.ResponsiblePersonId
    WHERE acm.AnalysisId = @AnalysisId;    
END
GO
/****** Object:  StoredProcedure [Risk].[GetCounterMeasureById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetCounterMeasureById] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT acm.Id, acm.AnalysisId, a.Title AS Analysis, 
		acm.Title, acm.[Description], acm.DueDate, acm.ResponsiblePersonId, 
		(te.strFirstName + ' ' + te.strLastName) AS Responsible,
		acm.[State], acm.ActionType, acm.WhatsDone, acm.FollowUpDate, 
		acm.RegisteredDate, acm.IsDeleted 
    FROM Risk.AnalysisCounterMeasures acm
    JOIN Risk.Analysis a ON a.Id = acm.AnalysisId
    LEFT JOIN dbo.tblEmployee te ON te.iEmployeeId = acm.ResponsiblePersonId
    WHERE acm.Id = @Id;    
END
GO
/****** Object:  Table [dbo].[tblPermissionBit]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[tblPermissionBit](
	[iBitNumber] [int] NOT NULL,
	[iPermissionSetId] [int] NOT NULL,
	[strName] [varchar](100) NOT NULL,
	[strDescription] [varchar](800) NOT NULL,
 CONSTRAINT [PK__tblPermissionBit_iBitNumber_iPermissionSetId] PRIMARY KEY CLUSTERED 
(
	[iBitNumber] ASC,
	[iPermissionSetId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysis]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysis] 
	@Id INT,
	@AreaId INT,
	@Title [nvarchar](250),
	@Target [nvarchar](500),
	@Background [nvarchar](500),
	@Description [nvarchar](1000),
	@Status INT,
	@ResultsLocked BIT,
	@Conclusion [nvarchar](MAX),
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @CurrentDate DATETIME = GETDATE();
	
    UPDATE Risk.Analysis
    SET
        AreaId = @AreaId,
        Title = @Title, 
        [Target] = @Target,
        Background = @Background, 
        [Description] = @Description,
        UpdatedBy = @UserId, 
        UpdatedDate = @CurrentDate, 
        [Status] = @Status,
        ResultsLocked = @ResultsLocked,
        Conclusion = @Conclusion
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_InsertNewsMedia]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_InsertNewsMedia]
    @NewsId INT,
    @Name NVARCHAR(250),
    @MimeType NVARCHAR(50),
    @Value VARCHAR(MAX)
AS
BEGIN
    INSERT INTO
        m123_tblNewsMedia
            (InfoId, Name, MimeType, Value)
        VALUES
            (@NewsId, @Name, @MimeType, @Value)
    SELECT SCOPE_IDENTITY();
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateConsequenceArea]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateConsequenceArea] 
	@Id INT,
	@AreaId INT,
	@ConsequenceId INT,
	@ConsequenceTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AreaConsequences
	SET
		AreaId = @AreaId, 
		ConsequenceTypeId = @ConsequenceTypeId, 
		ConsequenceId = @ConsequenceId 
    WHERE Id = @Id;
END
GO
/****** Object:  UserDefinedFunction [dbo].[m136_GetDepartmentsRecursive]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: Nov 17, 2015
-- Description:	Get all departments with their sub departments.
-- =============================================
CREATE FUNCTION [dbo].[m136_GetDepartmentsRecursive]
(	
	@iDepartmentId INT
)
RETURNS TABLE
AS
RETURN 
(
    WITH Children AS
	(
			SELECT 
				iDepartmentId
			FROM 
				[dbo].[tblDepartment]  
			WHERE
				iDepartmentId  = @iDepartmentId
		UNION ALL
			SELECT 
				d.iDepartmentId  
			FROM 
				[dbo].[tblDepartment] d
				INNER JOIN Children 
					ON	iDepartmentParentId = Children.iDepartmentId
			WHERE d.iDepartmentId <> 0
	)
	SELECT 
		iDepartmentId
	FROM 
		Children
)
GO
/****** Object:  StoredProcedure [Risk].[SearchAnalysisMembers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[SearchAnalysisMembers]
	@DepartmentId INT,
	@AnalysisId INT,
	@Keyword VARCHAR(100),
	@recursive BIT,
	@ExceptAnalysisId BIT
AS
BEGIN
	SET NOCOUNT ON;
	
	SET @Keyword = ISNULL(@Keyword, '');
	
	SELECT te.iEmployeeId, te.strFirstName, te.strLastName, te.strLoginName, td.strName AS strDepartment, td.iDepartmentId 
	FROM dbo.tblEmployee te
		LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = te.iDepartmentId
		WHERE (((@recursive = 0) AND (te.iDepartmentId = @DepartmentId OR @DepartmentId IS NULL OR @DepartmentId = 0)) 
			OR (@recursive = 1 AND te.iDepartmentId IN (SELECT iDepartmentId FROM [dbo].[m136_GetDepartmentsRecursive](@DepartmentId))))
		AND (te.strLoginName LIKE '%' + @Keyword + '%' 
			OR te.strFirstName LIKE '%' + @Keyword + '%' 
			OR te.strLastName LIKE '%' + @Keyword + '%')
		AND (@AnalysisId IS NULL OR 
			(((@ExceptAnalysisId = 1) AND te.iEmployeeId NOT IN (
				SELECT am.EmployeeId FROM Risk.AnalysisMembers am WHERE am.AnalysisId = @AnalysisId))
				OR ((@ExceptAnalysisId = 0) AND te.iEmployeeId IN (
				SELECT am.EmployeeId FROM Risk.AnalysisMembers am WHERE am.AnalysisId = @AnalysisId)))
			);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SearchRoleMembers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_SearchRoleMembers]
	@iDepartmentId INT,
	@iRoleId INT,
	@strKeyword VARCHAR(100),
	@recursive BIT
AS
BEGIN
	SET NOCOUNT ON;
	SET @strKeyword = ISNULL(@strKeyword, '');
	SELECT te.iEmployeeId, te.strFirstName, te.strLastName, te.strLoginName, td.strName AS strDepartment, td.iDepartmentId 
	FROM dbo.tblEmployee te
		LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = te.iDepartmentId
		WHERE (((@recursive = 0) AND (te.iDepartmentId = @iDepartmentId OR @iDepartmentId IS NULL OR @iDepartmentId = 0)) 
			OR (@recursive = 1 AND te.iDepartmentId IN (SELECT iDepartmentId FROM [dbo].[m136_GetDepartmentsRecursive](@iDepartmentId))))
		AND (te.strLoginName LIKE '%' + @strKeyword + '%' 
			OR te.strFirstName LIKE '%' + @strKeyword + '%' 
			OR te.strLastName LIKE '%' + @strKeyword + '%')
		AND (@iRoleId IS NULL OR te.iEmployeeId NOT IN (SELECT resg.iEmployeeId 
			FROM dbo.relEmployeeSecGroup resg WHERE resg.iSecGroupId = @iRoleId));
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetEmployees]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetEmployees] 
	@iEmployeeId INT,
	@iDepartmentId INT,
	@bRecursive BIT,
	@strFirstName VARCHAR(50),
	@strLastName VARCHAR(50),
	@strLoginName VARCHAR(100),
	@iPageSize INT,
	@iPageIndex INT,
	@roleId INT = NULL,
	@ExcludedEmployeeId AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @RoleEmployees TABLE(iEmployeeId INT NOT NULL PRIMARY KEY);
	IF(@roleId IS NOT NULL)
		INSERT INTO @RoleEmployees(iEmployeeId)
		SELECT 
			iEmployeeId 
		FROM 
			dbo.relEmployeeSecGroup
		WHERE iSecGroupId = @roleId;
	DECLARE @Departments TABLE(iDepartmentId INT NOT NULL PRIMARY KEY);
	INSERT INTO @Departments(iDepartmentId)
		SELECT 
			iDepartmentId 
		FROM 
			[dbo].[m136_GetDepartmentsRecursive](@iDepartmentId);
	SET @iPageIndex = @iPageIndex - 1;
    SELECT te.iEmployeeId, 
		te.iDepartmentId, 
		td.strName AS strDepartment,
		te.strFirstName, 
		te.strLastName, 
		te.strTitle, 
		CASE WHEN te.strAddress1 IS NULL OR te.strAddress1 = '' THEN 
				(CASE WHEN te.strAddress2 IS NULL OR te.strAddress2 = '' THEN 
						te.strAddress3 
					ELSE te.strAddress2 
				END)
			ELSE te.strAddress1 
		END AS [strAddress],
		te.iCountryId, 
		tc.strName AS strCountry,
		te.strPhoneHome, 
		te.strPhoneInternal, 
		te.strPhoneWork, 
		te.strPhoneMobile, 
		te.strBeeper, 
		te.strCallNumber, 
		te.strFax, 
		te.strEmail, 
		te.strLoginName, 
		te.strLoginDomain, 
		te.strComment,
		te.LastLogin,
		te.strExpDep,
		te.strEmployeeNo,
		te.strPassword,
		ROW_NUMBER() OVER (ORDER BY te.strFirstName ASC, te.strLastName ASC) AS RowNumber 
	INTO #Filters
    FROM dbo.tblEmployee te
    LEFT JOIN dbo.tblCountry tc ON tc.iCountryId = te.iCountryId
    LEFT JOIN dbo.tblDepartment td ON td.iDepartmentId = te.iDepartmentId
    WHERE (@iEmployeeId IS NULL OR te.iEmployeeId = @iEmployeeId)
    AND (@strFirstName IS NULL OR @strFirstName = '' OR te.strFirstName LIKE '%' + @strFirstName + '%')
    AND (@strLastName IS NULL OR @strLastName = '' OR te.strLastName LIKE '%' + @strLastName + '%')
    AND (@strLoginName IS NULL OR @strLoginName = '' OR te.strLoginName LIKE '%' + @strLoginName + '%')
    AND ((@bRecursive = 1 AND (te.iDepartmentId IN (SELECT iDepartmentId FROM [dbo].[m136_GetDepartmentsRecursive](@iDepartmentId))))
		  OR (@bRecursive = 0 AND te.iDepartmentId = @iDepartmentId OR @iDepartmentId IS NULL))
	AND (@roleId IS NULL OR (@roleId IS NOT NULL AND te.iEmployeeId IN (SELECT iEmployeeId FROM @RoleEmployees)))
	AND te.iEmployeeId NOT IN (SELECT Id FROM @ExcludedEmployeeId);
    SELECT f.iEmployeeId, 
		f.iDepartmentId, 
		f.strDepartment, 
		f.strFirstName, 
		f.strLastName, 
		f.strTitle, 
		f.strAddress, 
		f.iCountryId, 
		f.strCountry, 
		f.strPhoneHome, 
		f.strPhoneInternal, 
		f.strPhoneWork, 
		f.strPhoneMobile, 
		f.strBeeper, 
		f.strCallNumber, 
		f.strFax, 
		f.strEmail, 
		f.strLoginName, 
		f.strLoginDomain, 
		f.strComment, 
		f.LastLogin,
		f.strExpDep, 
		f.strEmployeeNo,
		f.strPassword  
    FROM #Filters f
    WHERE (@iPageSize = 0 OR f.RowNumber BETWEEN (@iPageSize * @iPageIndex + 1) AND @iPageSize * (@iPageIndex + 1))
    ORDER BY f.RowNumber;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetEmployeeDocumentConfirms]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetEmployeeDocumentConfirms] 
	@iDocumentId INT,
	@iSecurityId INT = 0,
	@iDepartmentId INT = 0,
    @includeSubDepartments BIT,
	@fromDate DATETIME = null,
	@toDate DATETIME = null,
	@includeAllVersions BIT = 0
AS
BEGIN
	IF @toDate <> null
    BEGIN
        SET @toDate = DATEADD(day, 1, @toDate)
    END
    DECLARE @RecursiveDepartmentIdTable TABLE(iDepartmentId INT NULL);
    DECLARE @iDepIdTable TABLE(iDepartmentId INT NULL)

    IF @includeSubDepartments = 1
    BEGIN
		INSERT INTO @iDepIdTable
		SELECT iDepartmentId FROM m136_GetDepartmentsRecursive(@iDepartmentId);
    END
    
    DECLARE @docTable TABLE(iEntityId int null, iDocumentId int null, strName varchar(200) null, iVersion int null, iHandbookId int null)
    INSERT INTO @docTable
    SELECT
        iEntityId,
        iDocumentId,
        strName as strDocumentName,
        iVersion,
        iHandbookId
    FROM
        m136_tblDocument
    WHERE
        iDocumentId = @iDocumentId
        AND ((@includeAllVersions = 1 AND iApproved = 1)
			 OR ( @includeAllVersions = 0 AND iLatestApproved = 1))

    --Ansatt-utdrag
    DECLARE @empTable TABLE(iEmployeeId INT NULL, strFirstName VARCHAR(100) NULL, strLastName VARCHAR(100) NULL, iDepartmentId INT NULL)
    INSERT INTO @empTable
        SELECT
            iEmployeeId,
            strFirstName,
            strLastName,
            iDepartmentId
        FROM
            tblEmployee
        WHERE
            iDepartmentId = @iDepartmentId
            OR iDepartmentId in (SELECT iDepartmentId FROM @iDepIdTable)
		
		
    --Confirm-table utdrag
    DECLARE @cTable TABLE(iEntityId INT NOT NULL, iEmployeeId INT, dtmConfirm DATETIME)
    INSERT INTO @cTable
        SELECT
            iEntityId, iEmployeeId, dtmConfirm
        FROM
            m136_tblConfirmRead
        WHERE
            iEntityId in (SELECT iEntityId FROM @docTable)
            AND (dtmConfirm > @fromDate OR @fromDate IS NULL)
            AND (dtmConfirm < @toDate OR @toDate IS NULL)

    DECLARE @persons TABLE(DepartmentId INT, NumberOfEmployees INT)
    INSERT INTO @persons(DepartmentId, NumberOfEmployees)
        SELECT
            iDepartmentId,
            COUNT(iEmployeeId) AS NumberOfEmployees
        FROM
            tblEmployee
        GROUP BY iDepartmentId


    DECLARE @tmp TABLE(iEmployeeId INT, strEmployeeName NVARCHAR(200), iDepartmentId INT, strDepName NVARCHAR(200),
	iReadStatus INT, dtmConfirm DATETIME, iDocumentId INT, strDocumentName NVARCHAR(500), iVersion int, iVersionStatus int,
	iApproved INT, iDraft INT, iEntityId INT, iRead INT)

    INSERT INTO @tmp 
        (iEmployeeId, strEmployeeName, iDepartmentId, strDepName, iReadStatus, dtmConfirm, iDocumentId, 
        strDocumentName, iVersion, iVersionStatus, iApproved, iDraft, iEntityId, iRead)
        SELECT
            r.iEmployeeId, r.strEmployeeName, r.iDepartmentId, r.strDepName, r.iReadStatus, r.dtmConfirm, r.iDocumentId,
            r.strDocumentName, r.iVersion, r.iVersionStatus, r.iApproved, r.iDraft, r.iEntityId,
            SUM(
                CASE
                    WHEN cr.iConfirmId IS NULL then 0
                    ELSE 1
                END) as ConfirmedRead
        FROM (
            SELECT
                emp.iEmployeeId,
                emp.strFirstName +' '+ emp.strLastName as strEmployeeName,
                emp.iDepartmentId,
                dep.strName as strDepName,
                (case when isnull(cr.iEmployeeId, 0)=0 then 0 else 1 end) as iReadStatus,
                cr.dtmConfirm,
                doc.iDocumentId,
                doc.iEntityId,
                doc.strName as strDocumentName,
                doc.iVersion,
                --	round(dbo.m136_fnDocumentConfirmPercentage(dep.iDepartmentId, doc.iEntityId, @fromDate, @toDate),2) as readPercent,
                0 as readPercent,
                dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, 
                details.dtmPublish, details.dtmPublishUntil, getdate(), details.iDraft, details.iApproved) as iVersionStatus,
                details.iApproved,
                details.iDraft
            FROM
                @docTable doc
                    FULL JOIN @empTable emp on 1 = 1
                    JOIN m136_tblDocument details on details.iEntityId = doc.iEntityId
                    LEFT JOIN @cTable cr on cr.iEmployeeId = emp.iEmployeeId AND cr.iEntityId = doc.iEntityId
                    LEFT OUTER JOIN tblDepartment dep on dep.iDepartmentId = emp.iDepartmentId
        ) r
            LEFT JOIN m136_tblConfirmRead cr on (r.iEntityId = cr.iEntityId and cr.iEmployeeId = r.iEmployeeId)
            GROUP BY r.iEmployeeId, r.strEmployeeName, r.iDepartmentId, r.strDepName, r.iReadStatus, r.dtmConfirm, r.iDocumentId, r.strDocumentName, r.iVersion, r.iVersionStatus, r.iApproved, r.iDraft, r.iEntityId

        ORDER BY r.iVersion desc

    DECLARE @total INT
    SELECT
        @total = NumberOfEmployees
    FROM
        @persons
    WHERE
     DepartmentId = @iDepartmentId
            OR DepartmentId in (SELECT iDepartmentId FROM @iDepIdTable)

    DECLARE @readPercentage TABLE(iEntityId INT, readPercentage DECIMAL)
    INSERT INTO @readPercentage(iEntityId, readPercentage)
        SELECT 
            r.iEntityId, (CAST(r.totalRead AS DECIMAL) / CAST(@total AS DECIMAL)) * 100 AS readPercentage
        FROM (
            SELECT iEntityId, sum(iRead) AS totalRead FROM @tmp 
        GROUP BY iEntityId
        ) r

    SELECT
        t.iEmployeeId, t.strEmployeeName, t.iDepartmentId, t.strDepName, t.iReadStatus, t.dtmConfirm, t.iDocumentId, t.strDocumentName, t.iVersion, t.iVersionStatus, t.iApproved, t.iDraft, p.readPercentage
    FROM @tmp t
        JOIN @readPercentage p on t.iEntityId = p.iEntityId
    ORDER BY 
        t.iVersion desc,
        t.strDepName,
        t.iReadStatus desc,
        t.strEmployeeName,
        t.dtmConfirm desc
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetChapterEmployeeSums]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetChapterEmployeeSums] 
(
	@iSecurityId INT = 0,
	@iHandbookId INT = 0,
	@iDepartmentId INT = 0,
	@fromDate DATETIME = null,
	@toDate DATETIME = null,
	@iRecursive INT = 0,
	@iRecursiveDepartment INT = 0
)
AS
BEGIN
	IF @toDate IS NOT NULL
	BEGIN
		SET @toDate = dateadd(day, 1, @toDate)
	END
	DECLARE @HandbookIdTable TABLE(iHandbookId INT)
	IF @iRecursive = 1
		BEGIN
			INSERT INTO @HandbookIdTable
			SELECT iHandbookId FROM dbo.m136_GetHandbookRecursive (@iHandbookId, @iSecurityId, 0)
		END
	--Mappeutdrag:
	DECLARE @bookTable TABLE(iHandbookId INT NOT NULL, strChapterName VARCHAR(400) NULL, strParentPath VARCHAR(1000) NULL)
	INSERT INTO @bookTable
	SELECT
		iHandbookId,
		strName,
		dbo.fn136_GetParentPath(iHandbookId)
	FROM
		m136_tblHandbook
	WHERE
		((iHandbookId IN (SELECT iHandbookId FROM @HandbookIdTable))
			OR iHandbookId = @iHandbookId)
		AND iDeleted=0
		AND (dbo.fnSecurityGetPermission(136, 462, @iSecurityId, iHandbookId) & 0x01)>0 
	--Dokumentutdrag:
	DECLARE @docTable TABLE(iEntityId INT NULL, iDocumentId INT NULL, strName VARCHAR(200) NULL, iVersion INT NULL,
							 iHandbookId INT NULL, iSort INT NULL, iVirt INT NOT NULL,
							 dtmPublish DATETIME NULL, dtmPublishUntil DATETIME NULL, iDraft INT NULL,iApproved INT NULL)
	INSERT INTO @docTable
	SELECT	doc.iEntityId,
		doc.iDocumentId,
		doc.strName,
		doc.iVersion,
		doc.iHandbookId,
		doc.iSort,
		0,
		doc.dtmPublish,
		doc.dtmPublishUntil,
		doc.iDraft,
		doc.iApproved
	FROM
		@bookTable book
		RIGHT JOIN m136_tblDocument doc 
			ON doc.iHandbookId = book.iHandbookId
	WHERE
		doc.iHandbookId = book.iHandbookId
		AND iApproved = 1
		AND doc.iDeleted=0
		AND iLatestApproved = 1
	--virtual
	INSERT INTO @docTable
	SELECT 	doc.iEntityId,
		virt.iDocumentId,
		doc.strName,
		doc.iVersion,
		virt.iHandbookId,
		virt.iSort,
		1,
		doc.dtmPublish,
		doc.dtmPublishUntil,
		doc.iDraft,
		doc.iApproved
	FROM
		m136_relVirtualRelation virt
		LEFT JOIN m136_tblDocument doc ON doc.iDocumentId = virt.iDocumentId
		RIGHT JOIN @bookTable book ON book.iHandbookId = virt.iHandbookId
	WHERE
		doc.iApproved=1
		AND doc.iDeleted=0
		AND iLatestApproved = 1
	--Ansatt-utdrag
	DECLARE @empTable TABLE(iEmployeeId INT NULL, strFirstName VARCHAR(100) NULL, strLastName VARCHAR(100) NULL, iDepartmentId INT NULL)
	--Security, see own org-unit's reports?
	DECLARE @moduleAccess INT
	SET @moduleAccess = dbo.fnSecurityGetPermission(136, 460, @iSecurityId, 0)
	IF((@moduleAccess&4)=4)
	BEGIN
		DECLARE @iUserDepartmentId INT
		SELECT @iUserDepartmentId= iDepartmentId FROM tblEmployee WHERE iEmployeeId=@iSecurityId
		INSERT INTO @empTable
			SELECT
				iEmployeeId,
				strFirstName,
				strLastName,
				iDepartmentId
			FROM
				tblEmployee
			WHERE
				(iDepartmentId = @iDepartmentId 
				OR @iDepartmentId=0)
				AND iDepartmentId > 0
				AND iDepartmentId = @iUserDepartmentId
	END
	--Modul-administrator?
	IF((@moduleAccess&2)=2)
	BEGIN
		DELETE FROM @empTable
		DECLARE @Departments TABLE (iDepartmentId INT)
		IF (@iRecursiveDepartment = 0)
			BEGIN
				INSERT INTO @Departments SELECT @iDepartmentId;
			END
		ELSE
			BEGIN
				INSERT INTO @Departments SELECT iDepartmentId FROM dbo.m136_GetDepartmentsRecursive (@iDepartmentId);
			END
		INSERT INTO @empTable
		SELECT
			iEmployeeId,
			strFirstName,
			strLastName,
			iDepartmentId
		FROM
			tblEmployee
		WHERE
			iDepartmentId IN (SELECT iDepartmentId FROM @Departments) 
	END
	--Confirm-table utdrag
	DECLARE @cTable TABLE(iEntityId INT NOT NULL, iEmployeeId INT, dtmConfirm DATETIME)
	INSERT INTO @cTable
	SELECT
		iEntityId, 
		iEmployeeId, 
		dtmConfirm
	FROM
		m136_tblConfirmRead cr
	WHERE
		iEntityId in (SELECT iEntityId FROM @docTable)
		AND iEmployeeId IN (SELECT iEmployeeId FROM @empTable)
		AND (dtmConfirm > @fromDate OR @fromDate IS NULL)
		AND (dtmConfirm < @toDate OR @toDate IS NULL)
	-- Return select
	SELECT
		doc.iDocumentId,
		doc.iEntityId,
		doc.strName,
		doc.iVersion,
		doc.iHandbookId,
		book.strChapterName,
		book.strParentPath,
		dep.strName AS strDepName,
		dep.iDepartmentId,
		dep.iLevel,
		emp.strFirstName +' '+ emp.strLastName AS strEmployeeName,
		emp.iEmployeeId,
		(CASE WHEN ISNULL(cr.iEmployeeId, 0) = 0 THEN 0 ELSE 1 END) AS iReadStatus,
		cr.dtmConfirm,
		doc.iVirt,
		dbo.m136_fnGetVersionStatus(doc.iEntityId, doc.iDocumentId, doc.iVersion, doc.dtmPublish, doc.dtmPublishUntil, getDate(), doc.iDraft, doc.iApproved) iVersionStatus,
		doc.iDraft,
		doc.iApproved
	FROM
		@docTable doc
		FULL JOIN @empTable emp ON 1=1
		LEFT JOIN @cTable cr ON cr.iEmployeeId=emp.iEmployeeId AND cr.iEntityId=doc.iEntityId
		LEFT OUTER JOIN tblDepartment dep on dep.iDepartmentId=emp.iDepartmentId
		LEFT OUTER JOIN @bookTable book on doc.iHandbookId=book.iHandbookId
	WHERE
		ISNULL(doc.iEntityId, 0) > 0
	ORDER BY
		doc.iHandbookId ASC,
		doc.iSort ASC,
		doc.iDocumentId ASC,
		strDepName ASC,
		iReadStatus DESC,
		strEmployeeName ASC,
		dtmConfirm DESC
END
GO
/****** Object:  StoredProcedure [dbo].[GetNumberOfOkReadingListsForUsersOfDepartments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetNumberOfOkReadingListsForUsersOfDepartments]
	@DepartmentId INT,
    @IncludeSubDepartments BIT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @DepartmentIds TABLE
    (
        DepartmentId INT
    );
    INSERT INTO @DepartmentIds (DepartmentId) VALUES (@DepartmentId)
    INSERT INTO @DepartmentIds (DepartmentId)
    SELECT iDepartmentId FROM m136_GetDepartmentsRecursive(@DepartmentId)
    SELECT
        e.iEmployeeId AS UserId, 
        r.ReadingListId AS ReadingListId, 
        r.Name AS ReadingListName, 
        dbo.AreDocumentsInReadingListConfirmedByUser(e.iEmployeeId, r.ReadingListId) AS IsOK
    FROM
        ReadingList r
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId
            INNER JOIN tblEmployee e ON e.iDepartmentId = rlr.ReaderId AND rlr.ReaderTypeId = 2 --Department reader
    WHERE
        r.IsDeleted = 0
        AND e.iDepartmentId IN (SELECT DepartmentId FROM @DepartmentIds)
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
END
GO
/****** Object:  StoredProcedure [dbo].[GetReadingListUsersOfDepartmentsForReport]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetReadingListUsersOfDepartmentsForReport]
    @DepartmentId INT,
    @IncludeSubDepartments BIT,
    @ReadingListIds AS [dbo].[Item] READONLY
AS
BEGIN
    DECLARE @DepartmentIds TABLE
    (
        DepartmentId INT
    );
    INSERT INTO @DepartmentIds (DepartmentId) VALUES (@DepartmentId)
    INSERT INTO @DepartmentIds (DepartmentId)
    SELECT iDepartmentId FROM m136_GetDepartmentsRecursive(@DepartmentId)
    SELECT
        e.iEmployeeId AS UserId,
        e.strFirstName + ' ' + e.strLastName AS EmployeeName,
        d.strName AS DepartmentName,
        COUNT(DISTINCT r.ReadingListId) AS NumberOfReadingLists,
        COUNT(DISTINCT doc.iEntityId) AS NumberOfDocuments,
        COUNT(DISTINCT cr.iEntityId) AS NumberOfOKDocuments
    FROM
        ReadingList r
            INNER JOIN ReadingListDocuments rld ON r.ReadingListId = rld.ReadingListId
            INNER JOIN m136_tblDocument doc ON rld.DocumentId = doc.iDocumentId AND doc.iLatestApproved = 1
            INNER JOIN ReadingListReaders rlr ON r.ReadingListId = rlr.ReadingListId AND rlr.ReaderTypeId = 2 -- Department reader
            INNER JOIN tblDepartment d ON rlr.ReaderId = d.iDepartmentId
            INNER JOIN tblEmployee e ON e.iDepartmentId = d.iDepartmentId
            LEFT JOIN m136_tblConfirmRead cr ON doc.iEntityId = cr.iEntityId AND cr.iEmployeeId = e.iEmployeeId
    WHERE
        r.IsDeleted = 0
        AND e.iDepartmentId IN (SELECT DepartmentId FROM @DepartmentIds)
        AND r.ReadingListId IN (SELECT Id FROM @ReadingListIds)
    GROUP BY e.iEmployeeId, d.strName, e.strFirstName + ' ' + e.strLastName
    EXEC GetNumberOfOkReadingListsForUsersOfDepartments @DepartmentId, @IncludeSubDepartments, @ReadingListIds
END
GO
/****** Object:  StoredProcedure [Deviation].[GetDeviationByFilter]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetDeviationByFilter]
	@PageIndex INT,
    @PageSize INT,
    @CaseNumber NVARCHAR(50),
    @Text NVARCHAR(500),
    @State INT,
    @OwnerId INT,
    @CategoryId INT,
    @Priority INT,
    @UserId INT,
    @Type INT,
    @IsLoadMore BIT,
    @FromDate DATETIME,
    @ToDate DATETIME,
	@HandledByDepartment INT,
	@ReportByDepartment INT,
	@IncludeCaseHandledSubUnit BIT,
	@IncludeReportedSubUnit BIT,
	@DateFilter INT
AS
BEGIN
	DECLARE @H_Department TABLE
	(
		iDepartmentId int PRIMARY KEY
	);
	IF(@HandledByDepartment IS NOT NULL)
	BEGIN
		IF(@IncludeCaseHandledSubUnit = 1)
			BEGIN
				INSERT INTO @H_Department
				SELECT iDepartmentId
				FROM [dbo].[m136_GetDepartmentsRecursive](@HandledByDepartment)
			END
		ELSE
			BEGIN
				INSERT INTO @H_Department
				VALUES (@HandledByDepartment)
			END
	END
	DECLARE @R_Department TABLE
	(
		iDepartmentId int PRIMARY KEY
	);
	IF(@ReportByDepartment IS NOT NULL)
	BEGIN
		IF(@IncludeReportedSubUnit = 1)
		BEGIN
			INSERT INTO @R_Department
			SELECT iDepartmentId
			FROM [dbo].[m136_GetDepartmentsRecursive](@ReportByDepartment);
		END
		ELSE
		BEGIN
			INSERT INTO @R_Department
			VALUES (@ReportByDepartment);
		END
	END
	SELECT
		rownumber = ROW_NUMBER() OVER (ORDER BY d.DeviationId DESC),
		d.*,
		c.Name AS CategoryName, c.CategoryType AS CategoryType,
		(ISNULL(re.strFirstName, '') + ' ' + ISNULL(re.strLastName, '')) AS RegisteredName,
		(ISNULL(he.strFirstName, '') + ' ' + ISNULL(he.strLastName, '')) AS OwnerName,
		rd.strName AS RegisteredByDepartmentname,
		hd.strName AS HandledByDepartmentName
	INTO #Filters
	FROM Deviation.Deviation d
	INNER JOIN Deviation.Category c ON d.CategoryId = c.CategoryId
	LEFT JOIN dbo.tblEmployee re ON d.RegisteredByUser = re.iEmployeeId
	LEFT JOIN dbo.tblEmployee he ON d.OwnerId = he.iEmployeeId
	LEFT JOIN Deviation.Location l ON d.LocationId = l.LocationId
	LEFT JOIN dbo.tblDepartment rd ON d.RegisteredByDepartment = rd.iDepartmentId
	LEFT JOIN dbo.tblDepartment hd ON d.HandledByDepartment = hd.iDepartmentId
	WHERE
		(@Text IS NULL OR d.Title like '%' + @Text + '%')
	AND
		(@Type IS NULL OR c.CategoryType = @Type)
	AND
		(@UserId IS NULL OR d.RegisteredByUser = @UserId)
	AND
		(@CaseNumber IS NULL OR @CaseNumber = '' OR d.DeviationId = @CaseNumber)
	AND
		(@State IS NULL OR d.[State] = @State)
	AND
		(@OwnerId IS NULL OR d.OwnerId = @OwnerId)
	AND
		(@CategoryId IS NULL OR @CategoryId = 0 OR d.CategoryId = @CategoryId)
	AND
		(@Priority IS NULL OR d.[Priority] = @Priority)
	AND
		(@FromDate IS NULL 
			OR (CASE 
			        WHEN @DateFilter = 2 THEN CONVERT(DATE, d.RegisterDate)
			        WHEN @DateFilter = 3 THEN CONVERT(DATE, d.UpdatedDate)
			        ELSE CONVERT(DATE, d.DueDate)
		        END) >= @FromDate)
	AND
		(@ToDate IS NULL 
		    OR (CASE 
		            WHEN @DateFilter = 2 THEN CONVERT(DATE, d.RegisterDate)
			        WHEN @DateFilter = 3 THEN CONVERT(DATE, d.UpdatedDate)
			        ELSE CONVERT(DATE, d.DueDate)
			    END) <= @ToDate)
	AND
		(@HandledByDepartment IS NULL OR d.HandledByDepartment IN (SELECT iDepartmentId FROM @H_Department))
	AND
		(@ReportByDepartment IS NULL OR d.RegisteredByDepartment IN (SELECT iDepartmentId FROM @R_Department))
	AND
		d.IsDeleted = 0;
	SELECT f.* 
	FROM #Filters f
	WHERE (@PageSize = 0 OR f.rownumber BETWEEN @PageSize * @PageIndex + 1 AND @PageSize * (@PageIndex + 1)) ORDER BY rownumber;
	IF(@IsLoadMore = 0)
	BEGIN
		SELECT COUNT(*) AS Total
		FROM #Filters;
	END
	ELSE
	BEGIN
		SELECT 0 AS Total;
	END
	DROP TABLE #Filters;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[GetTaskActionByCategoryId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[GetTaskActionByCategoryId]
(
	@CategoryId INT
)
RETURNS @Table TABLE(BaseActionId INT) 
AS
BEGIN
	INSERT INTO @Table 
	SELECT     Deviation.BaseAction.BaseActionId
		FROM         Deviation.Deviation AS D2 INNER JOIN
							  Deviation.BaseAction ON D2.DeviationId = Deviation.BaseAction.DeviationId
		WHERE     (D2.CategoryId IN
			  (SELECT     CategoryId
				FROM          Deviation.GetSubCategoryIds(@CategoryId) AS GetSubCategoryIds_1
				UNION
				SELECT     CategoryId
				FROM         Deviation.Category AS C2
				WHERE     (CategoryId = @CategoryId))) AND (Deviation.BaseAction.ActionType = 1)																													
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[GetUploads]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUploads] 
	@iFolderId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT u.Id, 
		u.iEntityId, 
		u.iFolderId, 
		u.Url, 
		u.Location, 
		u.FileName, 
		u.ContentType, 
		u.iType AS [Type],
		0 AS ChildCount
    FROM dbo.Uploads u
    WHERE (u.iFolderId = @iFolderId OR @iFolderId IS NULL) 
    UNION
    SELECT uf.iFolderId AS Id, 
		NULL AS iEntityId,
		uf.iParentFolderId AS iFolderId, 
		NULL as Url, 
		uf.Location,
		uf.strName AS FileName,
		NULL AS ContentType,
		NULL  AS [Type],
		dbo.fnGetUploadFoldersChildCount(uf.iFolderId) AS ChildCount
    FROM dbo.UploadFolders uf
    WHERE (uf.iParentFolderId = @iFolderId OR @iFolderId IS NULL)
END
GO
/****** Object:  StoredProcedure [dbo].[GetUploadFolders]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUploadFolders] 
	@iParentFolderId INT	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT uf.iFolderId, 
		uf.strName, 
		uf.iParentFolderId, 
		uf.iDeleted, 
		uf.iCreatedBy, 
		uf.iModifiedBy, 
		uf.dtmCreated, 
		uf.dtmModified, 
		uf.Location,
		dbo.fnGetUploadFoldersChildCount(uf.iFolderId) AS iChildCount
	FROM dbo.UploadFolders uf
	WHERE uf.iParentFolderId = @iParentFolderId OR ((@iParentFolderId IS NULL OR @iParentFolderId = 0) AND (uf.iParentFolderId IS NULL OR uf.iParentFolderId = 0));
END
GO
/****** Object:  StoredProcedure [dbo].[GetMessageTemplates]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetMessageTemplates]
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT mt.TemplateId, 
		mt.Name, 
		mt.ModuleId, 
		mtl.[Language], 
		mtl.[Subject], 
		mtl.[Body]
    FROM dbo.MessageTemplate mt
    INNER JOIN dbo.MessageTemplateLanguage mtl ON mtl.TemplateId = mt.TemplateId
    WHERE mtl.[Language] = @Language;
END
GO
/****** Object:  StoredProcedure [dbo].[GetMessageTemplateById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetMessageTemplateById]
	@TemplateId INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT mt.TemplateId, 
		mt.Name, 
		mt.ModuleId, 
		mtl.[Language], 
		mtl.[Subject], 
		mtl.Body 
    FROM dbo.MessageTemplate mt
    INNER JOIN dbo.MessageTemplateLanguage mtl ON mtl.TemplateId = mt.TemplateId
    WHERE mt.TemplateId = @TemplateId AND mtl.[Language] = @Language;
END
GO
/****** Object:  StoredProcedure [Risk].[GetRiskConsequenceTypes]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetRiskConsequenceTypes] 
	@Id INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT lct.Id, 
		ISNULL(lctl.Name, lct.Name) AS Name,
		lctl.[Language] 
    FROM Risk.luConsequenceTypes lct
    LEFT JOIN Risk.luConsequenceTypesLanguage lctl 
		ON lctl.ConsequenceTypeId = lct.Id
	WHERE (lct.Id = @Id OR @Id IS NULL) 
		AND lctl.[Language] = @Language;
END
GO
/****** Object:  StoredProcedure [dbo].[m123_GetDeviationNewsForStartpage]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_GetDeviationNewsForStartpage]
	@CategoryId AS INT
AS
BEGIN
	DECLARE @Today DATETIME;
	DECLARE @NewsIdTable TABLE (iInfoId INT);
	SET @Today = GETDATE();
	INSERT INTO @NewsIdTable (iInfoId)
    SELECT TOP 3
        i.iInfoId
    FROM 
        dbo.m123_tblInfo i
            INNER JOIN m123_relInfoCategory ri ON i.iInfoId = ri.iInfoId
            INNER JOIN m123_tblCategory c ON c.iCategoryId = ri.iCategoryId
    WHERE
        i.iDraft = 0
        AND	i.dtmPublish <= @Today
        AND i.dtmExpire >= @Today
        AND 
        (
            (ri.iCategoryId = @CategoryId AND c.iShownIn & 4 = 4)
            OR ri.iCategoryId IN (
                                 SELECT iCategoryId 
                                 FROM m123_tblCategory 
                                 WHERE iParentCategoryId = @CategoryId AND iShownIn & 4 = 4)
        )
    ORDER BY i.dtmPublish DESC;
	SELECT TOP 3
		iInfoId,
		strTopic,
		strTitle,
		strIngress,
		strBody,
		dtmPublish
	FROM 
		dbo.m123_tblInfo
	WHERE
        iInfoId IN (SELECT iInfoId FROM @NewsIdTable)
	ORDER BY dtmPublish DESC;
    SELECT
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId IN (SELECT iInfoId FROM @NewsIdTable)
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_UpdateNewsMedia]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_UpdateNewsMedia]
    @Id INT,
    @Name NVARCHAR(250),
    @MimeType NVARCHAR(50),
    @Value VARCHAR(MAX)
AS
BEGIN
    UPDATE
        m123_tblNewsMedia
    SET
        Name = @Name,
        MimeType = @MimeType,
        Value = @Value
    WHERE
        Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_GetNewsDetailsById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_GetNewsDetailsById]
	@InfoId INT
AS
BEGIN
	SELECT
		i.iInfoId,
        ic.iCategoryId,
		i.strTopic,
		i.strTitle,
		i.strIngress,
		i.strBody,
		i.dtmCreated,
        i.dtmPublish,
        i.dtmExpire,
        i.iDraft
	FROM 
		dbo.m123_tblInfo i
            INNER JOIN dbo.m123_relInfoCategory ic
                ON i.iInfoId = ic.iInfoId
	WHERE
		i.iInfoId  = @InfoId
    SELECT TOP 1
        Id,
        InfoId,
        Name,
        MimeType,
        Value
    FROM
        m123_tblNewsMedia
    WHERE
        InfoId = @InfoId
    SELECT
        b.iItemId,
        b.strName,
        b.strExtension
    FROM
        m123_relInfo i
            INNER JOIN m136_tblBlob b
                ON i.iEntityId = b.iItemId
    WHERE
        i.iInfoId = @InfoId
END
GO
/****** Object:  StoredProcedure [dbo].[m123_be_DeleteNews]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m123_be_DeleteNews]
    @NewsIds AS [dbo].[Item] READONLY
AS
BEGIN
    DELETE FROM
        m123_tblNewsMedia
    WHERE
        InfoId IN (SELECT Id FROM @NewsIds);
    DELETE FROM
        m136_tblBlob
    WHERE
        iItemId IN (SELECT DISTINCT iEntityId FROM m123_relInfo WHERE iInfoId IN (SELECT Id From @NewsIds));
    DELETE FROM
        m123_relInfo
    WHERE
        iInfoId IN (SELECT Id FROM @NewsIds);
    DELETE FROM
        m123_relInfoCategory
    WHERE
        iInfoId IN (SELECT Id FROM @NewsIds);
	DELETE FROM
        m123_tblInfo
    WHERE
        iInfoId IN (SELECT Id FROM @NewsIds);
END
GO
/****** Object:  StoredProcedure [Risk].[GetRiskConsequences]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetRiskConsequences] 
	@Id INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT lc.Id, 
		ISNULL(lcl.Name, lc.Name) AS Name,
		lcl.[Language]
    FROM Risk.luConsequences lc
	LEFT JOIN Risk.luConsequencesLanguage lcl	
		ON lcl.ConsequencesId = lc.Id
    WHERE (lc.Id = @Id OR @Id IS NULL) AND lcl.[Language] = @Language;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[GetDeviationByCategoryId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[GetDeviationByCategoryId]
(
	@CategoryId INT
)
RETURNS @Table TABLE(DeviationId INT) 
AS
BEGIN
	INSERT INTO @Table 
	SELECT DeviationId FROM [Deviation].Deviation D2 WHERE CategoryId IN (
				SELECT CategoryId FROM [Deviation].GetSubCategoryIds(@CategoryId)
				UNION
				SELECT CategoryId FROM [Deviation].Category C2 WHERE CategoryId = @CategoryId
				)																														
	RETURN
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateDeviation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateDeviation]
	@Id INT,
	@Title NVARCHAR(400),
	@Description NVARCHAR(MAX),
	@CategoryId INT,
	@DueDate DATETIME,
	@Consequence TINYINT,
	@ImmediateAction NVARCHAR(MAX),
	@ImmediateConsequences NVARCHAR(MAX),
	@ProposedActions NVARCHAR(MAX),
	@Priority INT,
	@Type INT,
	@EventDate DATETIME,
	@LocationId INT,
	@OwnerId INT,
	@HandledByDepartment INT,
	@State INT,
	@StatusId INT,
	@ServiceAreaId INT,
	@DeviationCustomFieldDataTable AS [Deviation].[DeviationCustomFieldTable] READONLY	
AS
BEGIN
	BEGIN TRY
        BEGIN TRANSACTION;
			SET NOCOUNT ON;	
			UPDATE d 
			SET
				d.[Title] = @Title,
				d.[Description] = @Description,
				d.CategoryId = @CategoryId,
				d.DueDate = @DueDate,
				d.Consequence = @Consequence,
				d.ImmediateAction = @ImmediateAction,
				d.ImmediateConsequences = @ImmediateConsequences,
				d.ProposedActions = @ProposedActions,
				d.[Priority] = @Priority,
				d.[Type] = @Type,
				d.EventDate = @EventDate,
				d.LocationId = @LocationId,
				d.OwnerId = @OwnerId,
				d.HandledByDepartment = @HandledByDepartment,
				d.[State] = @State,
				d.StatusId = @StatusId,
				d.ServiceAreaID = @ServiceAreaId,
				d.UpdatedDate = GETDATE()
			FROM Deviation.Deviation d
			WHERE d.DeviationId = @Id;
			EXEC [Deviation].[UpdateDeviationCustomFieldsAndOptions] @Id, @DeviationCustomFieldDataTable;
		COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  UserDefinedFunction [dbo].[AreDocumentsInRedingListConfirmedByUser]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[AreDocumentsInRedingListConfirmedByUser]
(
    @UserId INT,
	@ReadingListId INT
)
RETURNS BIT
AS
BEGIN
    DECLARE @Result BIT;
    DECLARE @NumberOfDocuments INT;
    DECLARE @NumberOfConfirmedDocuments INT;
    SELECT
        @NumberOfDocuments = COUNT(1)
    FROM
        ReadingListDocuments
    WHERE
        ReadingListId = @ReadingListId
    SELECT
        @NumberOfConfirmedDocuments = COUNT(1)
    FROM
        ReadingListDocuments rld
            INNER JOIN m136_tblDocument d ON rld.DocumentId = d.iDocumentId
            INNER JOIN m136_tblConfirmRead cr ON d.iEntityId = cr.iEntityId
    WHERE
        ReadingListId = @ReadingListId
        AND cr.iEmployeeId = @UserId
    IF @NumberOfDocuments = @NumberOfConfirmedDocuments
    BEGIN
        SET @Result = 1;
    END
    ELSE
    BEGIN
        SET @Result = 0;
    END
    RETURN @Result;
END
GO
/****** Object:  Table [Risk].[AnalysisExistingActions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisExistingActions](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisId] [int] NOT NULL,
	[EntityId] [int] NULL,
	[Name] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisExistingActions_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [Deviation].[GetCorrectiveActionByCategoryId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[GetCorrectiveActionByCategoryId]
(
	@CategoryId INT
)
RETURNS @Table TABLE(BaseActionId INT) 
AS
BEGIN
	INSERT INTO @Table 
	SELECT     Deviation.BaseAction.BaseActionId
		FROM         Deviation.Deviation AS D2 INNER JOIN
							  Deviation.BaseAction ON D2.DeviationId = Deviation.BaseAction.DeviationId
		WHERE     (D2.CategoryId IN
			  (SELECT     CategoryId
				FROM          Deviation.GetSubCategoryIds(@CategoryId) AS GetSubCategoryIds_1
				UNION
				SELECT     CategoryId
				FROM         Deviation.Category AS C2
				WHERE     (CategoryId = @CategoryId))) AND (Deviation.BaseAction.ActionType = 2)																													
	RETURN
END
GO
/****** Object:  UserDefinedFunction [Risk].[GetConsequenceTypeName]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Risk].[GetConsequenceTypeName] 
(
	@Id INT,
	@Language INT
)
RETURNS nvarchar(255)
AS
BEGIN
	DECLARE @Result [nvarchar](255);

	SELECT @Result = ISNULL(lctl.Name, '') 
	FROM Risk.luConsequenceTypesLanguage lctl 
	WHERE lctl.ConsequenceTypeId = @Id
	AND lctl.[Language] = @Language;

	RETURN @Result;
END
GO
/****** Object:  StoredProcedure [Risk].[GetConsequencesAreaByAreaId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetConsequencesAreaByAreaId] 
	@AreaId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ac.Id, 
		ac.AreaId, 
		ac.ConsequenceTypeId, 
		ac.ConsequenceId, 
		lc.Name AS ConsequenceName, 
		lct.Name AS ConsequenceTypeName
	FROM Risk.AreaConsequences ac
	LEFT JOIN Risk.luConsequences lc ON lc.Id = ac.ConsequenceId
	LEFT JOIN Risk.luConsequenceTypes lct ON lct.Id = ac.ConsequenceTypeId
	WHERE (ac.AreaId = @AreaId OR @AreaId IS NULL)
	AND (ac.iDeleted = 0);
END
GO
/****** Object:  StoredProcedure [Risk].[GetConsequencesArea]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetConsequencesArea] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ac.Id, 
		ac.AreaId, 
		ac.ConsequenceTypeId, 
		ac.ConsequenceId, 
		lc.Name AS ConsequenceName, 
		lct.Name AS ConsequenceTypeName
	FROM Risk.AreaConsequences ac
	LEFT JOIN Risk.luConsequences lc ON lc.Id = ac.ConsequenceId
	LEFT JOIN Risk.luConsequenceTypes lct ON lct.Id = ac.ConsequenceTypeId
	WHERE ac.Id = @Id OR (@Id IS NULL)
	AND (ac.iDeleted = 0);
END
GO
/****** Object:  UserDefinedFunction [Risk].[GetConsequenceName]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Risk].[GetConsequenceName] 
(
	@Id INT,
	@Language INT
)
RETURNS nvarchar(255)
AS
BEGIN
	DECLARE @Result [nvarchar](255);

	SELECT @Result = ISNULL(lcl.Name, '') 
	FROM Risk.luConsequencesLanguage lcl
	WHERE lcl.ConsequencesId = @Id
		AND lcl.[Language] = @Language;

	RETURN @Result;
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetParentPathFromEntityId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[fn136_GetParentPathFromEntityId](@entityId int)
returns nvarchar(4000)
as
begin
	declare @result nvarchar(4000)
	select @result = dbo.fn136_GetParentPathEx(iHandbookId) from m136_tblDocument where iEntityId = @entityId
	return @result
end
GO
/****** Object:  StoredProcedure [Risk].[CreateConsequenceArea]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[CreateConsequenceArea] 
	@AreaId INT,
	@ConsequenceId INT,
	@ConsequenceTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

    INSERT Risk.AreaConsequences
    (
        AreaId,
        ConsequenceTypeId,
        ConsequenceId
    )
    VALUES
    (
        @AreaId,
        @ConsequenceTypeId,
        @ConsequenceId
    );
    
    SELECT CAST(SCOPE_IDENTITY() AS INT);
END
GO
/****** Object:  UserDefinedFunction [Risk].[GetProbabilityName]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Risk].[GetProbabilityName] 
(
	@Id INT,
	@Language INT
)
RETURNS nvarchar(255)
AS
BEGIN
	DECLARE @Result [nvarchar](255);

	SELECT @Result = ISNULL(lpl.Name, '') 
	FROM Risk.luProbabilityLanguage lpl
	WHERE lpl.ProbabilityId = @Id
		AND lpl.[Language] = @Language;

	RETURN @Result;
END
GO
/****** Object:  StoredProcedure [Risk].[GetProbabilities]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetProbabilities] 
	@Id INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT lp.Id, 
    ISNULL(lpl.Name, lp.Name) AS Name,
    lpl.[Language]
    FROM Risk.luProbability lp
    JOIN Risk.luProbabilityLanguage lpl ON lpl.ProbabilityId = lp.Id
    WHERE (lp.Id = @Id OR @Id IS NULL)
    AND lpl.[Language] = @Language;
END
GO
/****** Object:  UserDefinedFunction [Deviation].[GetPreventiveActionByCategoryId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [Deviation].[GetPreventiveActionByCategoryId]
(
	@CategoryId INT
)
RETURNS @Table TABLE(BaseActionId INT) 
AS
BEGIN
	INSERT INTO @Table 
	SELECT     Deviation.BaseAction.BaseActionId
		FROM         Deviation.Deviation AS D2 INNER JOIN
							  Deviation.BaseAction ON D2.DeviationId = Deviation.BaseAction.DeviationId
		WHERE     (D2.CategoryId IN
			  (SELECT     CategoryId
				FROM          Deviation.GetSubCategoryIds(@CategoryId) AS GetSubCategoryIds_1
				UNION
				SELECT     CategoryId
				FROM         Deviation.Category AS C2
				WHERE     (CategoryId = @CategoryId))) AND (Deviation.BaseAction.ActionType = 4)																													
	RETURN
END
GO
/****** Object:  Table [dbo].[relDepartmentPosition]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relDepartmentPosition](
	[iDepartmentId] [int] NOT NULL,
	[iPositionId] [int] NOT NULL,
 CONSTRAINT [PK__relDepartmentPosition_iDepartmentId_iPositionId] PRIMARY KEY CLUSTERED 
(
	[iDepartmentId] ASC,
	[iPositionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[relApplicationPermissionSet]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relApplicationPermissionSet](
	[iApplicationId] [int] NOT NULL,
	[iPermissionSetId] [int] NOT NULL,
 CONSTRAINT [PK__relApplicationPermissionSet_iApplicationId_iPermissionSetId] PRIMARY KEY CLUSTERED 
(
	[iApplicationId] ASC,
	[iPermissionSetId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[be_GetChildMenusOf]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetChildMenusOf]	
    @Id INT
AS
BEGIN
	SELECT
        iItemId AS Id,
        strName AS Name,
        strUrl AS Url
    FROM
        tblMenu
    WHERE
        iItemParentId = @Id
    ORDER BY iSort, strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_ChangeDocumentDraftTemplate]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_ChangeDocumentDraftTemplate] 
	@DocumentId AS INT,
	@ToDocumentTypeId AS INT,
	@MetaInfoIds AS [dbo].[Item] READONLY
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
			DECLARE @EntityId INT
			SELECT @EntityId = iEntityId
			FROM dbo.m136_tblDocument
			WHERE iDocumentId = @DocumentId 
				  AND iLatestVersion = 1
				  AND iDraft = 1
			IF @EntityId IS NOT NULL 
            BEGIN
				UPDATE m136_tblDocument set iDocumentTypeId = @ToDocumentTypeId
				WHERE iEntityId = @EntityId
                EXEC [dbo].[m136_be_UpdateContentFieldsOfChangeTemplateDraft] @MetaInfoIds, @EntityId, @ToDocumentTypeId
            END
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (11, @DocumentId);
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
       IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  Table [dbo].[m136_HearingComments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[m136_HearingComments](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[HearingsId] [int] NULL,
	[iMetaInfoTemplateRecordsId] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[Comment] [nvarchar](max) NULL,
	[IsDraft] [bit] NULL,
	[Published] [datetime] NULL,
 CONSTRAINT [m136_HearingComments_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetHearingCommentByFieldId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetHearingCommentByFieldId] 
	@UserId AS INT,
	@HearingsId AS INT,
	@FieldId AS INT = NULL
AS
BEGIN
	SELECT h.*, e.strFirstName, e.strLastName
	FROM dbo.m136_HearingComments h
	LEFT JOIN dbo.tblEmployee e ON e.iEmployeeId = h.CreatedBy 
	WHERE HearingsId = @HearingsId
		  AND (h.IsDraft = 0 OR (h.IsDraft = 1 AND h.CreatedBy = @UserId))
		  AND ((@FieldId IS NULL AND h.iMetaInfoTemplateRecordsId IS NULL) OR (h.iMetaInfoTemplateRecordsId = @FieldId))
	ORDER BY h.IsDraft, h.Published, h.CreatedDate
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetHearingComment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetHearingComment] 
	@UserId AS INT,
	@HearingsId AS INT
AS
BEGIN
	SELECT h.*, e.strFirstName, e.strLastName
	FROM dbo.m136_HearingComments h
	LEFT JOIN dbo.tblEmployee e ON e.iEmployeeId = h.CreatedBy 
	WHERE HearingsId = @HearingsId
		  AND (h.IsDraft = 0 OR (h.IsDraft = 1 AND h.CreatedBy = @UserId))
	ORDER BY h.IsDraft, h.Published, h.CreatedDate
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDocumentSendToHearings]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetDocumentSendToHearings] 
	@EntityId INT
AS
BEGIN
	DECLARE @HearingId AS INT
	SELECT @HearingId = Id
	FROM dbo.m136_Hearings
	WHERE EntityId = @EntityId
		  AND Id = (SELECT MAX(Id) FROM dbo.m136_Hearings WHERE EntityId = @EntityId)
	SELECT *
	FROM dbo.m136_Hearings
	WHERE Id = @HearingId
	SELECT m.Id, m.HearingsId, m.EmployeeId, m.HasRead, m.HearingResponse,
		   e.strFirstName AS FirstName, e.strLastName AS LastName, e.strEmail AS Email, 
		   CASE WHEN c.Id IS NOT NULL THEN 1 ELSE 0 END HasComment, c.Comment,
		   d.iDepartmentId AS DepartmentId, d.strName AS DepartmentName,
		   lu.Name AS Response
	FROM dbo.m136_HearingMembers m
	LEFT JOIN dbo.m136_HearingComments c 
		ON m.EmployeeId = c.CreatedBy AND c.HearingsId = @HearingId 
			AND c.Id = (SELECT MAX(Id) FROM dbo.m136_HearingComments c1 WHERE c1.CreatedBy = m.EmployeeId AND c1.HearingsId = @HearingId)
	LEFT JOIN dbo.tblEmployee e ON m.EmployeeId = e.iEmployeeId
	LEFT JOIN dbo.tblDepartment d ON e.iDepartmentId = d.iDepartmentId
	LEFT JOIN dbo.m136_luHearingResponses lu ON m.HearingResponse = lu.Id
	WHERE m.HearingsId = @HearingId
END
GO
/****** Object:  UserDefinedFunction [dbo].[fn136_GetDepartmentPath]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn136_GetDepartmentPath](@DepartmentId INT)
RETURNS NVARCHAR(4000)
AS
BEGIN
	DECLARE @Path varchar(4000);
	WITH Parents AS
	(
		SELECT 
			td.iDepartmentParentId,
			strName
		FROM 
			[dbo].[tblDepartment] td 
		WHERE
			td.iDepartmentId = @DepartmentId
		UNION ALL
		SELECT 
			d.iDepartmentParentId,
			d.strName
		FROM 
			[dbo].[tblDepartment] d
			INNER JOIN Parents
				ON	d.iDepartmentId = Parents.iDepartmentParentId 
			WHERE (d.iLevel <> 0)
	)
	SELECT
		@Path = strName + COALESCE('/' + @Path, '')
	FROM
		Parents;
	IF (@DepartmentId IS NOT NULL AND @DepartmentId <> 0)
	BEGIN
		SET @Path = COALESCE(@Path, '');
	END
	RETURN @Path;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartmentStatistics]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 12, 2015
-- Description:	Get department home page.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDepartmentStatistics]
	
AS
BEGIN
	SET NOCOUNT ON;

    SELECT COUNT(1) AS TotalDepartments FROM [dbo].[tblDepartment];
  
	SELECT COUNT(1) AS TotalEmployees FROM dbo.tblEmployee te;
	
	SELECT td.iDepartmentId
		, td.strDescription
		, td.strName
		, [dbo].[fn136_GetDepartmentPath](td.iDepartmentId) AS [Path]
		, (SELECT COUNT(1) FROM dbo.tblEmployee te WHERE te.iDepartmentId = td.iDepartmentId) AS TotalEmployees
	FROM dbo.tblDepartment td
END
GO
/****** Object:  StoredProcedure [Calendar].[SearchActivities]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[SearchActivities]
    @UserId INT,
    @PersonId INT,
    @DepartmentId INT,
    @RoleId INT,
    @StartDate DATETIME,
    @EndDate DATETIME,
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX)
AS
BEGIN
    SELECT
        ActivityId,
        Name,
        StartDate,
        EndDate,
        ResponsibleId,
        CreatedBy,
        Description
    FROM
        Calendar.Activities
    WHERE
        dbo.CanUserAccessToActivity(@UserId, ActivityId) = 1
        AND
        (
            (
                @PersonId IS NULL 
                OR dbo.CanUserAccessToActivity(@PersonId, ActivityId) = 1
            )
            AND 
            (
                @DepartmentId IS NULL 
                OR (EXISTS(SELECT 1 FROM tblAcl WHERE iApplicationId = 160 AND iEntityId = ActivityId AND iPermissionSetId = 702 AND iSecurityId = @DepartmentId))
            )
            AND 
            (
                @RoleId IS NULL 
                OR (EXISTS(SELECT 1 FROM tblAcl WHERE iApplicationId = 160 AND iEntityId = ActivityId AND iPermissionSetId = 703 AND iSecurityId = @RoleId))
            )
            AND (@StartDate IS NULL OR StartDate >= @StartDate)
            AND (@EndDate IS NULL OR EndDate <= @EndDate)
            AND (@Name IS NULL OR Name LIKE '%' + @Name + '%')
            AND (@Description IS NULL OR Description LIKE '%' + @Description + '%')
        )
END
GO
/****** Object:  StoredProcedure [dbo].[m136_ProcessFeedback]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_ProcessFeedback] 
	@SecurityId INT,
	@EntityId INT,
	@FeedbackMessage VARCHAR(4000),
	@RecipientsForMailFeedback INT,
    @SendAlsoToApprover BIT
AS
BEGIN
	--Insert feedback
	INSERT INTO m136_tblFeedback(iEntityId, iEmployeeId, dtmFeedback, strFeedback)
		VALUES(@EntityId, @SecurityId , GETDATE(), @FeedbackMessage);
	DECLARE @CreatedById INT, @ApprovedId INT, @FolderId INT, @DocumentName VARCHAR(200), @DocumentId INT, @Version INT
	DECLARE @FromEmailAdress varchar(100)
	DECLARE @ToEmailAdress TABLE (email varchar(100))
	--Get document Infomation
	SELECT	@DocumentId = d.iDocumentId, 
			@DocumentName = d.strName,
			@FolderId = d.iHandbookId,
			@Version = d.iVersion,
			@CreatedById = d.iCreatedbyId,
			@ApprovedId = d.iApprovedById
	FROM	m136_tblDocument d
	WHERE	d.iEntityId = @EntityId	AND 
			d.iDeleted = 0;
	--Get Email from
	SELECT @FromEmailAdress = isNull(strEmail, '') 
	FROM tblEmployee 
	WHERE iEmployeeId = @SecurityId;
	INSERT INTO @ToEmailAdress 
		SELECT  isNull(strEmail, '') 
			FROM tblEmployee 
			WHERE iEmployeeId = @CreatedById
    IF @SendAlsoToApprover = 1
    BEGIN
        INSERT INTO @ToEmailAdress
        SELECT isNull(strEmail, '')
        FROM tblEmployee
        WHERE iEmployeeId = @ApprovedId
            AND strEmail NOT IN (SELECT email FROM @ToEmailAdress);
    END
	--Get Email To
	IF (@RecipientsForMailFeedback = 1)
	BEGIN
		INSERT INTO @ToEmailAdress 
			SELECT  isNull(strEmail, '') 
				FROM tblEmployee 
				WHERE iEmployeeId = @ApprovedId;	
	END
	ELSE IF (@RecipientsForMailFeedback = 0)
	BEGIN
		-- Get email of user have permisson approved
		INSERT INTO @ToEmailAdress 
			SELECT DISTINCT e.strEmail
				FROM tblEmployee e 
				JOIN relEmployeeSecGroup s ON e.iEmployeeId = s.iEmployeeId
				JOIN tblACL a ON s.iSecGroupId = a.iSecurityId AND
				a.iEntityId = @FolderId AND a.iApplicationId = 136 AND
				a.iPermissionSetId = 462 AND (a.iBit & 0x10) = 0x10
				AND e.strEmail IS NOT NULL AND e.strEmail <> '';
	END
	--return data
	SELECT @DocumentId AS DocumentId, @DocumentName AS Name, @Version AS [Version], @FromEmailAdress AS FromEmailAdress
	SELECT DISTINCT email AS Email 
	FROM @ToEmailAdress;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateFolderPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateFolderPermissions] 
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            SET NOCOUNT ON;
            DECLARE @iEntityId INT, @iAppicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT, @bRecursive BIT;
            DECLARE PermissionSet CURSOR FOR 
                SELECT iEntityId 
                    , iApplicationId
                    , iSecurityId
                    , iPermissionSetId
                    , iGroupingId
                    , iBit 
                    , bRecursive
                FROM @Permissions;
            OPEN PermissionSet; 
            FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
            WHILE @@FETCH_STATUS = 0
            BEGIN
                IF EXISTS(SELECT * FROM [dbo].[tblACL] 
                    WHERE iEntityId = @iEntityId 
                        AND iApplicationId = @iAppicationId 
                        AND iSecurityId = @iSecurityId 
                        AND iPermissionSetId = @iPermissionSetId)
                BEGIN
                    UPDATE [dbo].[tblACL]
                    SET iBit = @iBit
                    WHERE iEntityId = @iEntityId 
                        AND iApplicationId = @iAppicationId 
                        AND iSecurityId = @iSecurityId 
                        AND iPermissionSetId = @iPermissionSetId;
                END
                ELSE
                BEGIN
                    INSERT INTO [dbo].[tblACL] (iEntityId
                        , iApplicationId
                        , iSecurityId
                        , iPermissionSetId
                        , iGroupingId
                        , iBit) 
                    VALUES (@iEntityId
                        , @iAppicationId
                        , @iSecurityId
                        , @iPermissionSetId
                        , 0
                        , @iBit);
                END
                IF (@bRecursive = 1)
                BEGIN
                    DECLARE @iHandbookId INT;
                    DECLARE RecursivePermissionSet CURSOR FOR 
                    SELECT iHandbookId 
                        , @iAppicationId
                        , @iSecurityId
                        , @iPermissionSetId
                        , @iGroupingId
                        , @iBit
                    FROM dbo.m136_GetHandbookRecursive (@iEntityId, @iSecurityId, 0);
                    OPEN RecursivePermissionSet; 
                    FETCH NEXT FROM RecursivePermissionSet INTO @iHandbookId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        IF EXISTS(SELECT * FROM [dbo].[tblACL] 
                            WHERE iEntityId = @iHandbookId 
                                AND iApplicationId = @iAppicationId 
                                AND iSecurityId = @iSecurityId 
                                AND iPermissionSetId = @iPermissionSetId)
                        BEGIN
                            UPDATE [dbo].[tblACL]
                            SET iBit = @iBit
                            WHERE iEntityId = @iHandbookId 
                                AND iApplicationId = @iAppicationId 
                                AND iSecurityId = @iSecurityId 
                                AND iPermissionSetId = @iPermissionSetId;
                        END
                        ELSE
                        BEGIN
                            INSERT INTO [dbo].[tblACL] (iEntityId
                                , iApplicationId
                                , iSecurityId
                                , iPermissionSetId
                                , iGroupingId
                                , iBit) 
                            VALUES (@iHandbookId
                                , @iAppicationId
                                , @iSecurityId
                                , @iPermissionSetId
                                , 0
                                , @iBit);
                        END
                        FETCH NEXT FROM RecursivePermissionSet INTO @iHandbookId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
                    END
                    CLOSE RecursivePermissionSet;
                    DEALLOCATE RecursivePermissionSet;
                    DELETE [dbo].[tblACL] WHERE iEntityId = @iHandbookId 
                        AND iApplicationId = @iAppicationId 
                        AND iSecurityId NOT IN (SELECT iSecurityId 
                        FROM @Permissions);
                END
                FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
            END
            CLOSE PermissionSet;
            DEALLOCATE PermissionSet;
            DELETE [dbo].[tblACL] WHERE iEntityId = @iEntityId 
                AND iApplicationId = @iAppicationId 
                AND iSecurityId NOT IN (SELECT iSecurityId 
                FROM @Permissions);
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (2, @iEntityId)
        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateFolderInformation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateFolderInformation]
	@FolderId INT,
	@ParentFolderId INT,
	@strName VARCHAR(100),
	@strDescription VARCHAR(700),
	@iDepartmentId INT,
	@iLevelType INT,
	@iViewType INT,
	@InheritNewParentPermissions BIT,
	@Recursive BIT,
	@OldParentFolderId INT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
            SET NOCOUNT ON;
            UPDATE [dbo].[m136_tblHandbook] 
            SET strName = @strName,
                iParentHandbookId = (CASE WHEN @ParentFolderId = 0 THEN NULL ELSE @ParentFolderId END),
                strDescription = @strDescription,
                iDepartmentId = @iDepartmentId,
                iLevelType = @iLevelType,
                iViewTypeId = (CASE WHEN @iViewType = -1 THEN 1 WHEN @iViewType = -2 THEN 3 END),
                iLevel = (CASE WHEN @ParentFolderId = 0 THEN 1 ELSE (SELECT  h.iLevel + 1 FROM dbo.m136_tblHandbook h WHERE h.iHandbookId = @ParentFolderId) END)
            WHERE iHandbookId = @FolderId;
            DECLARE @iHandbookId INT,
                @iApplicationId INT, 
                @iSecurityId INT, 
                @iPermissionSetId INT, 
                @iGroupingId INT, 
                @iBit INT;
            IF (@InheritNewParentPermissions = 1)
            BEGIN
                IF (@Recursive = 1)
                BEGIN
                    DECLARE @SubFoldersPermission AS [dbo].[ACLDatatable];
                    INSERT INTO @SubFoldersPermission 
                    SELECT @FolderId 
                        , iApplicationId
                        , iSecurityId
                        , iPermissionSetId
                        , iGroupingId
                        , iBit
                        , 1
                    FROM [dbo].[tblACL] WHERE iEntityId = @ParentFolderId
                        AND iApplicationId = 136
                        AND (iPermissionSetId = 461 OR iPermissionSetId = 462);
                    EXEC [dbo].[m136_be_UpdateFolderPermissions] @SubFoldersPermission;
                END --END IF (@Recursive = 1)----------------------------------------------------------------------------------
                ELSE
                BEGIN
                    DECLARE @NewParentFolderPermissions AS [dbo].[ACLDatatable];
                    INSERT INTO @NewParentFolderPermissions SELECT @FolderId
                            , [iApplicationId]
                            , iSecurityId
                            , [iPermissionSetId]
                            , [iGroupingId]
                            , [iBit]
                            , 0
                        FROM [dbo].[tblACL] 
                        WHERE iEntityId = @ParentFolderId 
                            AND iApplicationId = 136
                            AND (iPermissionSetId = 461 OR iPermissionSetId = 462);
                    DECLARE ACL CURSOR FOR 
                    SELECT iEntityId
                            , [iApplicationId]
                            , iSecurityId
                            , [iPermissionSetId]
                            , [iGroupingId]
                            , [iBit]
                        FROM @NewParentFolderPermissions;
                    OPEN ACL; 
                    FETCH NEXT FROM ACL INTO @iHandbookId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        IF NOT EXISTS(SELECT * FROM dbo.tblACL WHERE iEntityId = @iHandbookId 
                            AND iApplicationId = @iApplicationId 
                            AND iSecurityId = @iSecurityId 
                            AND iPermissionSetId  = @iPermissionSetId)
                        BEGIN
                            INSERT INTO dbo.tblACL VALUES (
                                 @iHandbookId
                                , @iApplicationId
                                , @iSecurityId
                                , @iPermissionSetId
                                , @iGroupingId
                                , @iBit);
                        END
                        ELSE 
                        BEGIN
                            UPDATE dbo.tblACL
                                SET iBit = @iBit,
                                    iGroupingId = @iGroupingId
                            WHERE iEntityId = @iHandbookId 
                            AND iApplicationId = @iApplicationId 
                            AND iSecurityId = @iSecurityId 
                            AND iPermissionSetId  = @iPermissionSetId
                        END
                        FETCH NEXT FROM ACL INTO @iHandbookId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
                    END
                    CLOSE ACL;
                    DEALLOCATE ACL;
                    DELETE [dbo].[tblACL] WHERE iEntityId = @FolderId 
                        AND iApplicationId = @iApplicationId 
                        AND iSecurityId NOT IN (SELECT iSecurityId 
                        FROM @NewParentFolderPermissions);
                END
            END
            INSERT INTO CacheUpdate (ActionType, EntityId) VALUES (1, @FolderId);
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK;
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetUserWithCreatePermission]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_be_GetUserWithCreatePermission]
AS
BEGIN
	SELECT e.iEmployeeId, e.iDepartmentId, e.strLoginName, e.strEmail, e.strFirstName, e.strLastName, e.strLoginName 
	FROM tblEmployee e
	WHERE iEmployeeId IN (SELECT iEntityId 
						  FROM tblACL 
						  WHERE iPermissionSetId = 462 AND iBit & 2 = 2)
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetUserWithApprovePermission]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[m136_be_GetUserWithApprovePermission]
AS
BEGIN
	SELECT e.iEmployeeId, e.iDepartmentId, e.strLoginName, e.strEmail, e.strFirstName, e.strLastName, e.strLoginName 
	FROM tblEmployee e
	WHERE iEmployeeId IN (SELECT iEntityId 
						  FROM tblACL 
						  WHERE iPermissionSetId = 462 AND iBit & 16 = 16) -- 16: approval permission
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetPermissionsByUserId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.NGUYEN.MANH
-- Create date: OCT 28, 2015
-- Description:	Get Permission by UserId
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetPermissionsByUserId]
	@iPermissionSetId AS [dbo].[Item] READONLY,
	@iUserId INT,
	@iFolderId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT ta.iEntityId, ta.iSecurityId AS iGroupingId, ta.iPermissionSetId AS iAccessRights, ta.iBit FROM dbo.tblACL ta 
	WHERE ta.iApplicationId = 136 
		AND ta.iPermissionSetId IN (SELECT Id FROM @iPermissionSetId) 
		AND ta.iSecurityId IN (SELECT resg.iSecGroupId FROM dbo.relEmployeeSecGroup resg WHERE resg.iEmployeeId = @iUserId)
		AND (ta.iEntityId = @iFolderId OR @iFolderId IS NULL);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetApplicationPermissionsByUserId]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.NGUYEN.MANH
-- Create date: DEC 23, 2015
-- Description:	Get Application Permission by UserId
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetApplicationPermissionsByUserId]
	@iApplicationId INT,
	@iPermissionSetId AS [dbo].[Item] READONLY,
	@iUserId INT,
	@iFolderId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT ta.iEntityId, ta.iSecurityId, ta.iPermissionSetId AS iAccessRights, ta.iBit FROM dbo.tblACL ta 
	WHERE ta.iApplicationId = @iApplicationId 
		AND ta.iPermissionSetId IN (SELECT Id FROM @iPermissionSetId) 
		AND ta.iSecurityId IN (SELECT resg.iSecGroupId FROM dbo.relEmployeeSecGroup resg WHERE resg.iEmployeeId = @iUserId)
		AND (ta.iEntityId = @iFolderId OR @iFolderId IS NULL);
END
GO
/****** Object:  StoredProcedure [Calendar].[UpdateActivity]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Calendar].[UpdateActivity] 
    @ActivityId INT,
    @Name NVARCHAR(250),
    @Description NVARCHAR(MAX),
    @StartDate DATETIME,
    @EndDate DATETIME,
    @ResponsibleId INT,
    @UpdatedBy INT,
    @IsPermissionControlled BIT,
    @ActivityTasks AS Calendar.ActivityTaskItems READONLY,
    @ActivityDocuments AS Calendar.ActivityDocumentItems READONLY,
    @ActivityAccesses AS Calendar.ActivityAccessItems READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @Now DATETIME = GETDATE();
        UPDATE
            [Calendar].[Activities]
        SET
            Name = @Name,
            Description = @Description,
            StartDate = @StartDate,
            EndDate = @EndDate,
            ResponsibleId = @ResponsibleId,
            UpdatedBy = @UpdatedBy,
            UpdatedDate = @Now,
            IsPermissionControlled = @IsPermissionControlled
        WHERE
            ActivityId = @ActivityId
        -- Re-insert activity tasks
        DELETE FROM
            [Calendar].[ActivityTasks]
        WHERE
            ActivityId = @ActivityId
        INSERT INTO [Calendar].[ActivityTasks]
            (ActivityId, Name, Description, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate, IsCompleted)
            SELECT
                ActivityId,
                Name,
                Description,
                CreatedBy,
                CreatedDate,
                @UpdatedBy,
                @Now,
                IsCompleted
            FROM
                @ActivityTasks
        -- Re-insert activity documents
        DELETE FROM
            [Calendar].[ActivityDocuments]
        WHERE
            ActivityId = @ActivityId
        INSERT INTO [Calendar].[ActivityDocuments]
            (ActivityId, DocumentId)
            SELECT
                ActivityId,
                DocumentId
            FROM
                @ActivityDocuments
        -- Re-insert activity accesses
        DELETE FROM
            tblAcl
        WHERE
            iEntityId = @ActivityId
            AND iApplicationId = 160
        INSERT INTO tblAcl
            (iEntityId, iApplicationId, iSecurityId, iPermissionSetId, iGroupingId, iBit)
            SELECT
                ActivityId,
                160,
                AccessId,
                AccessTypeId,
                0,
                0
            FROM
                @ActivityAccesses
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  Table [dbo].[relDepartmentTarget]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[relDepartmentTarget](
	[iDepartmentId] [int] NOT NULL,
	[iModuleId] [int] NOT NULL,
	[iSettingId] [int] NOT NULL,
	[iTargetId] [int] NULL,
 CONSTRAINT [PK__relDepar__FC61562807020F21] PRIMARY KEY CLUSTERED 
(
	[iDepartmentId] ASC,
	[iModuleId] ASC,
	[iSettingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[SearchMessageTemplates]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SearchMessageTemplates] 
	@Keyword NVARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
    SELECT 
		mt.TemplateId, 
		mt.Name, 
		mt.ModuleId, 
		mtl.[Language], 
		mtl.[Subject], 
		mtl.Body
    FROM dbo.MessageTemplate mt JOIN 
		dbo.MessageTemplateLanguage mtl ON mtl.TemplateId = mt.TemplateId
    WHERE (@Keyword IS NULL
		OR mtl.[Subject] LIKE '%' + @Keyword + '%'
		OR mtl.Body LIKE '%' + @Keyword + '%')
    ORDER BY mt.Name;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_ProcessLatestApprovedDocuments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: March 04, 2015
-- Description:	Process approved documents that has publish date in the future.
-- =============================================
CREATE PROCEDURE [dbo].[m136_ProcessLatestApprovedDocuments]
AS
BEGIN
	DECLARE @iDocumentId INT;
	DECLARE Documents CURSOR FOR 
		SELECT d.iDocumentId FROM dbo.m136_tblDocument d 
			WHERE d.iDeleted = 0 AND d.dtmPublish >= GETDATE() AND d.iApproved = 1;
	OPEN Documents; 
	FETCH NEXT FROM Documents INTO @iDocumentId;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		EXEC [dbo].[m136_SetVersionFlags] @iDocumentId;
		FETCH NEXT FROM Documents INTO @iDocumentId;
	END
	CLOSE Documents;
	DEALLOCATE Documents;
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteConsequencesArea]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteConsequencesArea] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AreaConsequences
    SET
        iDeleted = 1
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [dbo].[UpdateMessageTemplate]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateMessageTemplate] 
	@TemplateId INT,
	@Language INT,
	@Subject NVARCHAR(100),
	@Body NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE dbo.MessageTemplateLanguage
    SET
        [Subject] = @Subject,
        Body = @Body
    WHERE TemplateId = @TemplateId AND [Language] = @Language;
END
GO
/****** Object:  StoredProcedure [dbo].[be_UpdateReadingList]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_UpdateReadingList]
    @ReadingListId INT,
    @Name NVARCHAR(100),
    @IsInactive BIT,
    @Description NVARCHAR(4000),
    @Documents AS dbo.ReadingListDocumentItems READONLY,
    @Readers AS dbo.ReadingListReaderItems READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        -- Update Reading List
        UPDATE
            ReadingList
        SET
            Name = @Name,
            IsInActive = @IsInactive,
            Description = @Description
        WHERE
            ReadingListId = @ReadingListId
        -- Delete and re-insert Reading List Documents
        DELETE FROM
            ReadingListDocuments
        WHERE
            ReadingListId = @ReadingListId
        INSERT INTO
            ReadingListDocuments
                (ReadingListId, DocumentId)
            SELECT
                @ReadingListId,
                DocumentId
            FROM
                @Documents
        -- Delete and re-insert Reading List Readers
        DELETE FROM
            ReadingListReaders
        WHERE
            ReadingListId = @ReadingListId
        INSERT INTO
            ReadingListReaders
                (ReadingListId, ReaderTypeId, ReaderId)
            SELECT
                @ReadingListId,
                ReaderTypeId,
                ReaderId
            FROM
                @Readers
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    Rollback
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[be_UpdateMenusOrder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_UpdateMenusOrder] 
	@MenuSortOrder AS [dbo].[MenuSortOrder] READONLY
AS
BEGIN
    UPDATE
        MenuTable
    SET
        MenuTable.iSort = MenuSortOrder.SortOrder
    FROM
        tblMenu MenuTable
            INNER JOIN @MenuSortOrder MenuSortOrder
                ON MenuTable.iItemId = MenuSortOrder.Id
END
GO
/****** Object:  StoredProcedure [dbo].[be_UpdateMenu]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_UpdateMenu]
    @Id INT,
    @Name VARCHAR(50),
    @Url VARCHAR(300),
    @Permissions AS [dbo].[MenuPermission] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        UPDATE
            tblMenu
        SET
            strName = @Name,
            strUrl = @Url
        WHERE
            iItemId = @Id
        DELETE FROM tblAcl
        WHERE iEntityId = @Id
            AND iApplicationId = 99
        INSERT INTO tblAcl
        SELECT @Id, 99, Id, Type, 0, 1
        FROM @Permissions
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[be_GetSecondaryDepartmentsOfUser]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetSecondaryDepartmentsOfUser]
    @UserId INT
AS
BEGIN
    SELECT iDepartmentId,
        dbo.fn136_GetDepartmentPath(iDepartmentId) AS Path,
		strName, strDescription
    FROM
        tblDepartment
    WHERE
        iDepartmentId IN (SELECT iDepartmentId FROM relEmployeeDepartment WHERE iEmployeeId = @UserId)
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteCounterMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteCounterMeasures] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

    DELETE Risk.AnalysisCounterMeasures 
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteAnalysisAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteAnalysisAttachment] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

    DELETE Risk.AnalysisAttachments WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteAnalysisAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[DeleteAnalysisAcceptanceCriterias]
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;
    DELETE Risk.AnalysisAcceptanceCriterias 
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteAnalysisMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteAnalysisMeasures] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

    DELETE Risk.AnalysisExistingActions
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteHearingComment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteHearingComment]
	@Id AS INT
AS
BEGIN
	DELETE FROM dbo.m136_HearingComments 
	WHERE Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_DeleteDepartments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_DeleteDepartments] 
	@iApplicationId		INT,
	@iPermissionSetId	INT,
	@Departments AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;

	DELETE dbo.tblACL WHERE iApplicationId = @iApplicationId 
		AND iPermissionSetId = @iPermissionSetId
		AND iEntityId IN (SELECT dd.Id FROM @Departments dd);
	
	DELETE dbo.relDepartmentPosition WHERE iDepartmentId IN (SELECT dd.Id FROM @Departments dd);
	
    DELETE dbo.tblDepartment WHERE iDepartmentId IN (SELECT dd.Id FROM @Departments dd);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateHearingComment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateHearingComment]
	@Id AS INT,
	@Comment AS NVARCHAR(MAX),
	@IsDraft AS BIT
AS
BEGIN
	DECLARE @Published AS DATETIME = NULL
	DECLARE @CurrentDate AS DATETIME = GETDATE()
	IF(@IsDraft = 0)
		BEGIN
			SET @Published = @CurrentDate
		END
	UPDATE dbo.m136_HearingComments 
	SET Comment = @Comment, IsDraft = @IsDraft, Published = @Published
	WHERE Id = @Id
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateHandbookPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 27, 2015
-- Description:	Update handbook permissions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateHandbookPermissions]
	@iRoleId INT,
	@iPermission INT,
	@iPermissionSetId INT
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS(SELECT ta.* FROM dbo.tblACL ta WHERE ta.iApplicationId = 136 
		AND ta.iSecurityId = @iRoleId 
		AND ta.iPermissionSetId = @iPermissionSetId)
	BEGIN
		UPDATE dbo.tblACL
		SET
			iBit = @iPermission
		WHERE iApplicationId = 136 
			AND iSecurityId = @iRoleId
			AND iPermissionSetId = @iPermissionSetId;
    END
    ELSE
    BEGIN
		INSERT INTO dbo.tblACL
		(
		    iEntityId,
		    iApplicationId,
		    iSecurityId,
		    iPermissionSetId,
		    iGroupingId,
		    iBit
		)
		VALUES
		(
		    0, -- iEntityId - int
		    136, -- iApplicationId - int
		    @iRoleId, -- iSecurityId - int
		    @iPermissionSetId, -- iPermissionSetId - int
		    0, -- iGroupingId - int
		    @iPermission -- iBit - int
		)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateFolderRolePermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 03, 2015
-- Description:	Update folder role permissions.
-- Modified date: FEB 01, 2016
-- Description: Remove recursive checking, we will do it on client side.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateFolderRolePermissions]
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iEntityId INT, @iAppicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT, @bRecursive BIT;
	DECLARE PermissionSet CURSOR FOR 
		SELECT iEntityId 
			, iApplicationId
			, iSecurityId
			, iPermissionSetId
			, iGroupingId
			, iBit 
			, bRecursive
		FROM @Permissions;
	OPEN PermissionSet; 
	FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF EXISTS(SELECT * FROM [dbo].[tblACL] 
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId)
		BEGIN
			UPDATE [dbo].[tblACL]
			SET iBit = @iBit
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId;
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[tblACL] (iEntityId
				, iApplicationId
				, iSecurityId
				, iPermissionSetId
				, iGroupingId
				, iBit) 
			VALUES (@iEntityId
				, @iAppicationId
				, @iSecurityId
				, @iPermissionSetId
				, 0
				, @iBit);
		END
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	END
	CLOSE PermissionSet;
	DEALLOCATE PermissionSet;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDeviationDepartmentPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 31, 2015
-- Description:	Update deviation department permissions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDeviationDepartmentPermissions]
	@Permissions AS [dbo].[ACLDatatable] READONLY,
	@iRoleId INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iEntityId INT, @iAppicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT, @bRecursive BIT;
	DECLARE PermissionSet CURSOR FOR 
		SELECT iEntityId 
			, iApplicationId
			, iSecurityId
			, iPermissionSetId
			, iGroupingId
			, iBit 
			, bRecursive
		FROM @Permissions;
	OPEN PermissionSet; 
	FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF EXISTS(SELECT * FROM [dbo].[tblACL] 
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId)
		BEGIN
			UPDATE [dbo].[tblACL]
			SET iBit = @iBit
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId;
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[tblACL] (iEntityId
				, iApplicationId
				, iSecurityId
				, iPermissionSetId
				, iGroupingId
				, iBit) 
			VALUES (@iEntityId
				, @iAppicationId
				, @iSecurityId
				, @iPermissionSetId
				, 0
				, @iBit);
		END
		IF (@bRecursive = 1)
		BEGIN
			DECLARE @iDepartmentId INT;
 			DECLARE RecursivePermissionSet CURSOR FOR 
			SELECT iDepartmentId 
				, @iAppicationId
				, @iSecurityId
				, @iPermissionSetId
				, @iGroupingId
				, @iBit
			FROM [dbo].[m136_GetDepartmentsRecursive](@iEntityId);
			OPEN RecursivePermissionSet; 
			FETCH NEXT FROM RecursivePermissionSet INTO @iDepartmentId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM [dbo].[tblACL] 
					WHERE iEntityId = @iDepartmentId 
						AND iApplicationId = @iAppicationId 
						AND iSecurityId = @iSecurityId 
						AND iPermissionSetId = @iPermissionSetId)
				BEGIN
					UPDATE [dbo].[tblACL]
					SET iBit = @iBit
					WHERE iEntityId = @iDepartmentId 
						AND iApplicationId = @iAppicationId 
						AND iSecurityId = @iSecurityId 
						AND iPermissionSetId = @iPermissionSetId;
				END
				ELSE
				BEGIN
					INSERT INTO [dbo].[tblACL] (iEntityId
						, iApplicationId
						, iSecurityId
						, iPermissionSetId
						, iGroupingId
						, iBit) 
					VALUES (@iDepartmentId
						, @iAppicationId
						, @iSecurityId
						, @iPermissionSetId
						, 0
						, @iBit);
				END
				FETCH NEXT FROM RecursivePermissionSet INTO @iDepartmentId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
			END
			CLOSE RecursivePermissionSet;
			DEALLOCATE RecursivePermissionSet;
        END
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	END
	CLOSE PermissionSet;
	DEALLOCATE PermissionSet;
END
GO
/****** Object:  StoredProcedure [dbo].[m147_be_UpdateMetadataRegisterPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JAN 06, 2016
-- Description:	Update deviation department permissions
-- =============================================
CREATE PROCEDURE [dbo].[m147_be_UpdateMetadataRegisterPermissions]
	@Permissions AS [dbo].[ACLDatatable] READONLY,
	@iRoleId INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iEntityId INT, @iAppicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT, @bRecursive BIT;
	DECLARE PermissionSet CURSOR FOR 
		SELECT iEntityId 
			, iApplicationId
			, iSecurityId
			, iPermissionSetId
			, iGroupingId
			, iBit 
			, bRecursive
		FROM @Permissions;
	OPEN PermissionSet; 
	FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF EXISTS(SELECT * FROM [dbo].[tblACL] 
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId)
		BEGIN
			UPDATE [dbo].[tblACL]
			SET iBit = @iBit
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iAppicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId;
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[tblACL] (iEntityId
				, iApplicationId
				, iSecurityId
				, iPermissionSetId
				, iGroupingId
				, iBit) 
			VALUES (@iEntityId
				, @iAppicationId
				, @iSecurityId
				, @iPermissionSetId
				, 0
				, @iBit);
		END
		IF (@bRecursive = 1)
		BEGIN
			DECLARE @iDepartmentId INT;
 			DECLARE RecursivePermissionSet CURSOR FOR 
			SELECT iDepartmentId 
				, @iAppicationId
				, @iSecurityId
				, @iPermissionSetId
				, @iGroupingId
				, @iBit
			FROM [dbo].[m136_GetDepartmentsRecursive](@iEntityId);
			OPEN RecursivePermissionSet; 
			FETCH NEXT FROM RecursivePermissionSet INTO @iDepartmentId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS(SELECT * FROM [dbo].[tblACL] 
					WHERE iEntityId = @iDepartmentId 
						AND iApplicationId = @iAppicationId 
						AND iSecurityId = @iSecurityId 
						AND iPermissionSetId = @iPermissionSetId)
				BEGIN
					UPDATE [dbo].[tblACL]
					SET iBit = @iBit
					WHERE iEntityId = @iDepartmentId 
						AND iApplicationId = @iAppicationId 
						AND iSecurityId = @iSecurityId 
						AND iPermissionSetId = @iPermissionSetId;
				END
				ELSE
				BEGIN
					INSERT INTO [dbo].[tblACL] (iEntityId
						, iApplicationId
						, iSecurityId
						, iPermissionSetId
						, iGroupingId
						, iBit) 
					VALUES (@iDepartmentId
						, @iAppicationId
						, @iSecurityId
						, @iPermissionSetId
						, 0
						, @iBit);
				END
				FETCH NEXT FROM RecursivePermissionSet INTO @iDepartmentId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
			END
			CLOSE RecursivePermissionSet;
			DEALLOCATE RecursivePermissionSet;
        END
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	END
	CLOSE PermissionSet;
	DEALLOCATE PermissionSet;
END
GO
/****** Object:  StoredProcedure [dbo].[be_GetMenuPermissionById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetMenuPermissionById]
    @ItemId INT
AS
BEGIN
    SELECT
        iEntityId,
        iPermissionSetId AS iAccessRights,
        iBit,
        iSecurityId AS iGroupingId,
        sg.strName as strGroupName
    FROM
        tblAcl acl
            LEFT JOIN tblSecGroup sg ON acl.iSecurityId = sg.iSecGroupId
    WHERE
        iEntityId = @ItemId
        AND iApplicationId = 99
        AND iPermissionSetId = 99
END
GO
/****** Object:  StoredProcedure [dbo].[be_GetMenuById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_GetMenuById]
    @Id INT
AS
BEGIN
    SELECT
        iItemId AS Id,
        strName AS Name,
        strUrl AS Url
    FROM
        tblMenu
    WHERE
        iItemId = @Id
    SELECT
        iSecurityId AS Id,
        iPermissionSetId AS Type,
        CASE iPermissionSetId
            WHEN 99 THEN (SELECT TOP 1 strName FROM tblSecGroup WHERE iSecGroupId = iSecurityId)
            WHEN 100 THEN (SELECT TOP 1 strName FROM tblDepartment WHERE iDepartmentId = iSecurityId)
        END Name
    FROM
        tblAcl
    WHERE
        iEntityId = @Id
        AND iApplicationId = 99
    ORDER BY Type, Name
END
GO
/****** Object:  StoredProcedure [Deviation].[GetCategoryById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[GetCategoryById]
	@CategoryId INT
AS
SET NOCOUNT ON
BEGIN
	SELECT c.*,
		   SecGroupName = CASE
							   WHEN c.SecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.SecGroupId)
							   WHEN c.AnonymousSecGroupId IS NOT NULL THEN (SELECT g.strName FROM tblSecGroup g WHERE g.iSecGroupId = c.AnonymousSecGroupId)
							   ELSE NULL
						  END
	FROM 
		Deviation.Category c
	WHERE
		c.CategoryId = @CategoryId
	AND	c.IsDeleted = 0;
	SELECT ccf.*
	FROM 
		Deviation.CategoryCustomField ccf
	WHERE
		ccf.CategoryId = @CategoryId
	AND	ccf.Deleted = 0;
	SELECT ccfo.*
	FROM 
		Deviation.CategoryCustomFieldOptions ccfo
	WHERE
		ccfo.CategoryId = @CategoryId
	AND	ccfo.Deleted = 0;
	SELECT ca.*
	FROM
		Deviation.CategoryAlerts ca
	WHERE
		ca.CategoryID = @CategoryId;
	SELECT
        iSecurityId AS Id,
        iPermissionSetId AS [Type],
        CASE iPermissionSetId
            WHEN 612 THEN (SELECT TOP 1 strName FROM tblSecGroup WHERE iSecGroupId = iSecurityId)
            WHEN 613 THEN (SELECT TOP 1 strName FROM tblDepartment WHERE iDepartmentId = iSecurityId)
        END Name
    FROM
        dbo.tblAcl
    WHERE
        iEntityId = @CategoryId
        AND iApplicationId = 151
        AND dbo.tblAcl.iPermissionSetId IN (612, 613)
    ORDER BY [Type], Name;
END
GO
/****** Object:  StoredProcedure [dbo].[GetRolesWithXPremissionOfYModule]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetRolesWithXPremissionOfYModule]
	@PageIndex INT,
	@PageSize INT,
	@IsLoadMore BIT,
	@Text NVARCHAR(250),
	@RightType INT,
	@Module INT,
	@PermissionSet INT
AS
SET NOCOUNT ON
BEGIN
	DECLARE @SecGroupIdTable TABLE
	(
		iSecurityId INT
	);
	INSERT INTO @SecGroupIdTable
	SELECT DISTINCT iSecurityId
	FROM tblACL WHERE iApplicationId = @Module AND iPermissionSetId = @PermissionSet AND iBit & @RightType = @RightType;
	WITH roles AS(	
		SELECT
			rownumber = ROW_NUMBER() OVER (ORDER BY iSecGroupId),
			iSecGroupId, strName, strDescription
		FROM 
			dbo.tblSecGroup
		WHERE
			iSecGroupId IN (SELECT iSecurityId FROM @SecGroupIdTable)
		AND (@Text IS NULL OR @Text = '' OR strName LIKE '%' + @Text + '%')
	)
	SELECT 
		*
	FROM 
		roles
	WHERE 
		(@PageSize=0 OR rownumber BETWEEN @PageSize*@PageIndex+1 AND @PageSize*(@PageIndex+1))
	ORDER BY RowNumber
	IF(@IsLoadMore = 0)
		BEGIN
			SELECT
				COUNT(*) AS Total
			FROM 
				dbo.tblSecGroup
			WHERE
				iSecGroupId IN (SELECT iSecurityId FROM @SecGroupIdTable)
			AND (@Text IS NULL OR @Text = '' OR strName LIKE '%' + @Text + '%')
		END
	ELSE
		BEGIN
			SELECT 0 AS Total
		END
END
GO
/****** Object:  StoredProcedure [Risk].[GetMineCounterMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetMineCounterMeasures] 
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT acm.Id, acm.AnalysisId, a.Title AS Analysis, 
		acm.Title, acm.[Description], 
		acm.DueDate, acm.ResponsiblePersonId, acm.[State], 
		acm.ActionType, acm.WhatsDone, acm.FollowUpDate, 
		acm.RegisteredDate, acm.IsDeleted 
	FROM Risk.AnalysisCounterMeasures acm  
	JOIN Risk.Analysis a ON a.Id = acm.AnalysisId
    WHERE acm.ResponsiblePersonId = @UserId;
END
GO
/****** Object:  StoredProcedure [dbo].[be_DeleteMenus]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_DeleteMenus]
    @ItemIds AS [dbo].[Item] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION
        DECLARE @DeletedMenuIds TABLE(iItemId INT);
        WITH MenuIds AS
        (
            SELECT iItemId
            FROM tblMenu
            WHERE iItemParentId IN (SELECT Id FROM @ItemIds)
            UNION ALL
            SELECT m.iItemId
            FROM tblMenu m
            INNER JOIN MenuIds ON m.iItemParentId = MenuIds.iItemId
        )
        INSERT INTO @DeletedMenuIds
        SELECT iItemId
        FROM MenuIds
        DELETE FROM tblMenu
        WHERE
            iItemId IN (SELECT iItemId FROM @DeletedMenuIds)
            OR iItemId IN (SELECT Id FROM @ItemIds)
        DELETE FROM tblAcl
        WHERE
            iApplicationId = 99
            AND iPermissionSetId = 99
            AND (
                iEntityId IN (SELECT iItemId FROM @DeletedMenuIds)
                OR iEntityId IN (SELECT Id FROM @ItemIds))
    COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[be_CreateMenu]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[be_CreateMenu]
    @ParentId INT,
    @Level INT,
    @Name VARCHAR(50),
    @Url VARCHAR(300),
    @Permissions AS [dbo].[MenuPermission] READONLY
AS
BEGIN
BEGIN TRY
    BEGIN TRANSACTION;
        DECLARE @MenuId INT;
        DECLARE @SortOrder INT;
        SELECT @SortOrder = MAX(iSort)
        FROM tblMenu
        WHERE iItemParentId = @ParentId
        IF @SortOrder IS NULL
        BEGIN
            SET @SortOrder = 0;
        END
        ELSE
        BEGIN
            SET @SortOrder = @SortOrder + 1;
        END
        INSERT INTO
            tblMenu
                (iItemParentId, iMin, iMax, iLevel, iInformationTypeId, strName, strDescription, iSort, strUrl, bNewWindow, iChildCount, iPictureId, iPictureActiveId, iPictureSelectedId)
            VALUES
                (@ParentId, 0, 0, @Level, 7, @Name, '', @SortOrder, @Url, 0, 0, 0, 0, 0)
        SET @MenuId = SCOPE_IDENTITY();
        INSERT INTO tblAcl
        SELECT @MenuId, 99, Id, Type, 0, 1
        FROM
            @Permissions
    COMMIT TRANSACTION;    
END TRY
BEGIN CATCH
    ROLLBACK
    DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
    SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
END CATCH
END
GO
/****** Object:  StoredProcedure [Deviation].[UpdateCategoryPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Deviation].[UpdateCategoryPermissions]
	@CategoryId INT,
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		BEGIN TRANSACTION;
			DELETE FROM tblAcl
			WHERE iEntityId = @CategoryId
				AND iApplicationId = 151 AND iPermissionSetId IN (612,613);
			INSERT INTO tblAcl
			SELECT @CategoryId, 151, iSecurityId, iPermissionSetId, 0, iBit
			FROM @Permissions;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: ' + ERROR_MESSAGE(), @ErrorNumber = ERROR_NUMBER(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisMeasure]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisMeasure] 
	@Id INT,
	@AnalysisId INT,
	@EntityId INT,
	@Name [nvarchar](250)
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AnalysisExistingActions
    SET
        AnalysisId = @AnalysisId,
        EntityId = @EntityId, 
        Name = @Name 
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisAttachments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisAttachments] 
	@AnalysisId INT,
	@EntityId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT aa.* 
    FROM Risk.AnalysisAttachments aa
    WHERE aa.AnalysisId = @AnalysisId 
		AND (aa.EntityId = @EntityId OR @EntityId = 0);
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisAttachmentById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisAttachmentById] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT aa.* FROM Risk.AnalysisAttachments aa WHERE aa.Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisAcceptanceCriterias]
	@AnalysisId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT aac.Id, 
		aac.AnalysisId, 
		aac.ConsequenceTypeId, 
		aac.ConsequenceId, 
		lc.Name AS ConsequenceName, 
		lct.Name AS ConsequenceTypeName
	FROM Risk.AnalysisAcceptanceCriterias aac
	LEFT JOIN Risk.luConsequences lc ON lc.Id = aac.ConsequenceId
	LEFT JOIN Risk.luConsequenceTypes lct ON lct.Id = aac.ConsequenceTypeId
	WHERE (aac.AnalysisId = @AnalysisId OR @AnalysisId IS NULL);
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateCounterMeasure]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateCounterMeasure] 
	@Id INT,
	@Title [nvarchar](255),
	@Description [nvarchar](1000),
	@DueDate [datetime],
	@ResponsiblePersonId INT,
	@State INT,
	@ActionType INT,
	@WhatsDone [nvarchar](max),
	@FollowUpDate [datetime],
	@IsDeleted BIT
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AnalysisCounterMeasures
    SET
        Title = @Title,
        [Description] = @Description,
        DueDate = @DueDate, 
        ResponsiblePersonId = @ResponsiblePersonId,
        [State] = @State, 
        ActionType = @ActionType,
        WhatsDone = @WhatsDone, 
        FollowUpDate = @FollowUpDate, 
        IsDeleted = @IsDeleted
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisDanger]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisDanger] 
	@Id INT,
	@AnalysisId INT,
	@Name [nvarchar](250),
	@Description [nvarchar](1000) 
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AnalysisDangers
    SET
        AnalysisId = @AnalysisId,
        Name = @Name,
        [Description] = @Description
    WHERE ID = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisAttachment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisAttachment] 
	@Id INT,
	@AnalysisId INT,
	@Title [nvarchar](400),
	@Description [nvarchar](max),
	@Size INT,
	@ContentType [nvarchar](400),
	@Extension [nvarchar](10),
	@Content [image],
	@IsDeleted BIT,
	@EntityId INT
AS
BEGIN
	SET NOCOUNT ON;
    
    MERGE [Risk].[AnalysisAttachments] AS t
	USING (VALUES 
		(@Id, @AnalysisId, @Title, @Description, @Size, @ContentType, @Extension, @Content, @IsDeleted, @EntityId)
		) AS src(Id, AnalysisId, Title, Description, Size, ContentType, Extension, Content, IsDeleted, EntityId)
	ON t.Id = src.Id

	WHEN NOT MATCHED THEN
	  INSERT (AnalysisId, Title, Description, Size, ContentType, Extension, Content, IsDeleted, EntityId)
	  VALUES (@AnalysisId, @Title, @Description, @Size, @ContentType, @Extension, @Content, @IsDeleted, @EntityId)

	WHEN MATCHED THEN
	  UPDATE
		SET Title = src.Title;
	
	SELECT CAST (SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisAcceptanceCriteria]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisAcceptanceCriteria] 
	@Id INT,
	@AnalysisId INT,
	@ConsequenceId INT,
	@ConsequenceTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AnalysisAcceptanceCriterias
    SET
        AnalysisId = @AnalysisId,
        ConsequenceTypeId = @ConsequenceTypeId,
        ConsequenceId = @ConsequenceId
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[AddAnalysisMeasure]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddAnalysisMeasure] 
	@AnalysisId INT,
	@EntityId INT,
	@Name [nvarchar](250)
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.AnalysisExistingActions(AnalysisId, EntityId, Name)
    VALUES(@AnalysisId, @EntityId, @Name);
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Risk].[AddAnalysisDanger]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddAnalysisDanger] 
	@AnalysisId INT,
	@Name [nvarchar](250),
	@Description [nvarchar](1000)	
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.AnalysisDangers(AnalysisId, Name, [Description])
    VALUES(@AnalysisId, @Name, @Description);
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) as Id;
END
GO
/****** Object:  StoredProcedure [Risk].[AddAnalysisAcceptanceCriteria]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddAnalysisAcceptanceCriteria] 
	@AnalysisId INT,
	@ConsequenceId INT,
	@ConsequenceTypeId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO Risk.AnalysisAcceptanceCriterias(AnalysisId, ConsequenceTypeId, ConsequenceId)
	VALUES(@AnalysisId, @ConsequenceTypeId, @ConsequenceId);
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisMeasures]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisMeasures] 
	@AnalysisId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT aea.* 
    FROM Risk.AnalysisExistingActions aea
    WHERE aea.AnalysisId = @AnalysisId;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisDangers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisDangers] 
	@AnalysisId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT ad.Id, ad.AnalysisId, ad.Name, 
		ad.[Description]
    FROM Risk.AnalysisDangers ad
    WHERE ad.AnalysisId = @AnalysisId;
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisDangerById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisDangerById] 
	@Id INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT ad.* FROM Risk.AnalysisDangers ad
    WHERE ad.Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[AddCounterMeasure]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddCounterMeasure] 
	@AnalysisId INT,
	@Title [nvarchar](255),
	@Description [nvarchar](1000),
	@DueDate [datetime],
	@ResponsiblePersonId INT,
	@ActionType INT,
	@WhatsDone [nvarchar](max),
	@FollowUpDate [datetime]
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.AnalysisCounterMeasures(
		AnalysisId, Title, [Description], DueDate,
        ResponsiblePersonId, State, ActionType,
        WhatsDone, FollowUpDate, RegisteredDate, IsDeleted
    )
    VALUES(
        @AnalysisId, @Title, @Description, @DueDate, 
        @ResponsiblePersonId, 1, @ActionType, 
        @WhatsDone, @FollowUpDate, GETDATE(), 0
    );
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  Table [Risk].[AnalysisDangerAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisDangerAcceptanceCriterias](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisDangerId] [int] NOT NULL,
	[AnalysisAcceptanceCriteriaId] [int] NOT NULL,
 CONSTRAINT [PK_Risk_AnalysisDangerAcceptanceCriterias_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[m136_GetChapterReadAccess]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_GetChapterReadAccess] 
	-- Add the parameters for the stored procedure here
	@SecurityId int
AS
BEGIN
	SELECT	[iEntityId] AS ChapterId,
			Sum(CASE iPermissionSetId
				 WHEN 461 THEN 1
				 WHEN 462 THEN 2
				 END) as AccessRights
	FROM [dbo].[tblACL]
	WHERE	iSecurityId = @SecurityId 
		AND iApplicationId = 136
		AND (iBit & 1) = 1 
		AND (iPermissionSetId = 461 OR iPermissionSetId = 462)
	GROUP BY iEntityId
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdatePublishAllComment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdatePublishAllComment]
	@UserId AS INT,
	@HearingsId AS INT
AS
BEGIN
	UPDATE dbo.m136_HearingComments 
	SET IsDraft = 0, Published = GETDATE()
	WHERE CreatedBy = @UserId
		  AND HearingsId = @HearingsId
		  AND IsDraft = 1
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateModulePermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 21, 2015
-- Description:	Update module permissions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateModulePermissions] 
	@iRoleId INT,
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @iEntityId INT, @iAppicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT, @bRecursive BIT;
	DECLARE PermissionSet CURSOR FOR 
		SELECT iEntityId 
			, iApplicationId
			, @iRoleId
			, iPermissionSetId
			, iGroupingId
			, iBit 
			, bRecursive
		FROM @Permissions;
	OPEN PermissionSet; 
	FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM dbo.tblACL ta WHERE ta.iEntityId = 0 
			AND ta.iSecurityId = @iSecurityId 
			AND ta.iApplicationId = @iAppicationId 
			AND ta.iPermissionSetId = @iPermissionSetId)
		BEGIN
			INSERT INTO dbo.tblACL(
				iEntityId,
				iApplicationId,
				iSecurityId,
				iPermissionSetId,
				iGroupingId,
				iBit
			) 
			VALUES(
				0, 
				@iAppicationId,
				@iSecurityId,
				@iPermissionSetId,
				0,
				@iBit
			);				
		END
		ELSE
		BEGIN
			UPDATE dbo.tblACL
			SET
			    iEntityId = 0,
			    iApplicationId = @iAppicationId,
			    iSecurityId = @iSecurityId,
			    iPermissionSetId = @iPermissionSetId,
			    iGroupingId = 0,
			    iBit = @iBit
			WHERE dbo.tblACL.iEntityId = 0
			AND iApplicationId = @iAppicationId
			AND iSecurityId = @iSecurityId
			AND iPermissionSetId = @iPermissionSetId
		END
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iAppicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit, @bRecursive;
    END
    CLOSE PermissionSet;
	DEALLOCATE PermissionSet;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateItemPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 28, 2015
-- Description:	Update or Add permission meta register
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateItemPermissions]
	@ItemId INT,
	@ApplicationId INT,
	@PermissionSetId INT,
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION 
		SET NOCOUNT ON;
		DECLARE @iEntityId INT, @iApplicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT;
		DECLARE PermissionSet CURSOR FOR 
			SELECT iEntityId 
				, iApplicationId
				, iSecurityId
				, iPermissionSetId
				, iGroupingId
				, iBit 
			FROM @Permissions;
		OPEN PermissionSet; 
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF EXISTS(SELECT * FROM [dbo].[tblACL] 
				WHERE iEntityId = @iEntityId 
					AND iApplicationId = @iApplicationId 
					AND iSecurityId = @iSecurityId 
					AND iPermissionSetId = @iPermissionSetId)
			BEGIN
				UPDATE [dbo].[tblACL]
				SET iBit = @iBit
				WHERE iEntityId = @iEntityId 
					AND iApplicationId = @iApplicationId 
					AND iSecurityId = @iSecurityId 
					AND iPermissionSetId = @iPermissionSetId;
			END
			ELSE
			BEGIN
				INSERT INTO [dbo].[tblACL] (iEntityId
					, iApplicationId
					, iSecurityId
					, iPermissionSetId
					, iGroupingId
					, iBit) 
				VALUES (@iEntityId
					, @iApplicationId
					, @iSecurityId
					, @iPermissionSetId
					, 0
					, @iBit);
			END
			FETCH NEXT FROM PermissionSet INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
		END
		CLOSE PermissionSet;
		DEALLOCATE PermissionSet;
		DELETE [dbo].[tblACL] WHERE iEntityId = @ItemId 
			AND iApplicationId = @ApplicationId
			AND iPermissionSetId = @PermissionSetId 
			AND iSecurityId NOT IN (SELECT iSecurityId 
			FROM @Permissions);
	COMMIT
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDepartmentPositions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI	
-- Create date: AUGUST 18. 2015
-- Description:	Update position of department
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_UpdateDepartmentPositions]
	@iDepartmentId INT,
	@Positions AS [dbo].[Item] READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tDepartmentId INT, @tPositionId INT;
	DECLARE PositionSet CURSOR FOR 
		SELECT @iDepartmentId
			, Id
		FROM @Positions;
		
	OPEN PositionSet; 
	FETCH NEXT FROM PositionSet INTO @tDepartmentId, @tPositionId;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF NOT EXISTS(SELECT * FROM [dbo].[relDepartmentPosition] 
			WHERE iDepartmentId = @tDepartmentId
				AND iPositionId = @tPositionId)
		BEGIN
			INSERT INTO dbo.relDepartmentPosition
			(
			    iDepartmentId,
			    iPositionId
			)
			VALUES
			(
			    @tDepartmentId, -- iEmployeeId - int
			    @tPositionId -- iDepartmentId - int
			)
		END
		FETCH NEXT FROM PositionSet INTO @tDepartmentId, @tPositionId;
	END
	CLOSE PositionSet;
	DEALLOCATE PositionSet;
		
	DELETE dbo.relDepartmentPosition WHERE iDepartmentId = @iDepartmentId
	AND iPositionId NOT IN (SELECT Id FROM @Positions);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_UpdateDepartmentPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_UpdateDepartmentPermissions]
	@iDepartmentId INT,
	@ApplicationId INT,
	@PermissionSetId INT,
	@Permissions AS [dbo].[ACLDatatable] READONLY
AS
BEGIN
	SET NOCOUNT ON;

    DECLARE @iEntityId INT, @iApplicationId INT, @iSecurityId INT, @iPermissionSetId INT, @iGroupingId INT, @iBit INT;
	DECLARE PermissionSet CURSOR FOR 
		SELECT iEntityId 
			, iApplicationId
			, iSecurityId
			, iPermissionSetId
			, iGroupingId
			, iBit 
		FROM @Permissions;
	OPEN PermissionSet; 
	FETCH NEXT FROM PermissionSet INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
	WHILE @@FETCH_STATUS = 0
    BEGIN
		IF EXISTS(SELECT * FROM [dbo].[tblACL] 
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iApplicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId)
		BEGIN
			UPDATE [dbo].[tblACL]
			SET iBit = @iBit
			WHERE iEntityId = @iEntityId 
				AND iApplicationId = @iApplicationId 
				AND iSecurityId = @iSecurityId 
				AND iPermissionSetId = @iPermissionSetId;
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[tblACL] (iEntityId
				, iApplicationId
				, iSecurityId
				, iPermissionSetId
				, iGroupingId
				, iBit) 
			VALUES (@iEntityId
				, @iApplicationId
				, @iSecurityId
				, @iPermissionSetId
				, 0
				, @iBit);
		END
		FETCH NEXT FROM PermissionSet INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermissionSetId, @iGroupingId, @iBit;
	END
	CLOSE PermissionSet;
	DEALLOCATE PermissionSet;
	DELETE [dbo].[tblACL] WHERE iEntityId = @iDepartmentId 
		AND iApplicationId = @ApplicationId
		AND iPermissionSetId = @PermissionSetId 
		AND iSecurityId NOT IN (SELECT iSecurityId 
		FROM @Permissions);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_SearchDepartments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 14, 2015
-- Description:	Search department by name.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_SearchDepartments]
	-- Add the parameters for the stored procedure here
	@strName VARCHAR(80)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    SELECT td.iDepartmentId, 
		td.iDepartmentParentId, 
		td.iLevel, 
		td.strName, 
		td.strDescription,
		td.bCompany,
		td.strOrgNo,
		NULL AS Country,
		[dbo].[fn136_GetDepartmentPath](td.iDepartmentId) AS [Path],
		td.strVisitAddress1, 
		td.strVisitAddress2, 
		td.strVisitAddress3, 
		td.strAddress1, 
		td.strAddress2, 
		td.strAddress3,
		td.strPhone, 
		td.strFax, 
		td.strEmail, 
		td.strURL,
		td.iCountryId 
    FROM dbo.tblDepartment td
    WHERE td.strName LIKE '%' + @strName + '%';
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_InsertFolder]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_InsertFolder]
	@iUserId INT,
	@iParentHandbookId	INT,
    @strName			VARCHAR(100),
    @strDescription		VARCHAR(7000),
    @iDepartmentId		INT,
    @iLevelType			INT,
    @iViewTypeId		INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @iParentLevel INT = 0, @iMaxHandbookId INT = 0;
	SELECT @iParentLevel = h.iLevel FROM dbo.m136_tblHandbook h WHERE h.iHandbookId = @iParentHandbookId;
	SELECT @iMaxHandbookId = MAX(ihandbookid) FROM dbo.m136_tblHandbook;
	DECLARE @iNewHandbookId INT = ISNULL(@iMaxHandbookId, 0) + 1;
	SET IDENTITY_INSERT dbo.m136_tblHandbook ON;
    INSERT INTO dbo.m136_tblHandbook(
		iHandbookId,
		iParentHandbookId, 
		strName, 
		strDescription, 
		iDepartmentId, 
		iLevelType, 
		iViewTypeId, 
		dtmCreated, 
		iCreatedById, 
		iDeleted,
		iMin,
		iMax,
		iLevel) 
    VALUES(
		@iNewHandbookId,
		(CASE WHEN @iParentHandbookId = 0 THEN NULL ELSE @iParentHandbookId END), 
		@strName, 
		@strDescription, 
		@iDepartmentId, 
		@iLevelType, 
		(CASE WHEN @iViewTypeId = -1 THEN 1 WHEN @iViewTypeId = -2 THEN 3 END), 
		GETDATE(), 
		@iUserId, 
		0,
		0,
		0,
		(@iParentLevel + 1));
	SET IDENTITY_INSERT dbo.m136_tblHandbook OFF;
	DECLARE @iEntityId INT, @iApplicationId INT, @iSecurityId INT, @iPermisionSetId INT, @iGroupingId INT, @iBit INT
	DECLARE ACL CURSOR FOR 
		SELECT @iNewHandbookId
				, [iApplicationId]
				, iSecurityId
				, [iPermissionSetId]
				, [iGroupingId]
				, [iBit]
			FROM [dbo].[tblACL] 
			WHERE iEntityId = @iParentHandbookId 
				AND iApplicationId = 136
				AND (iPermissionSetId = 461 OR iPermissionSetId = 462);
	OPEN ACL; 
	FETCH NEXT FROM ACL INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermisionSetId, @iGroupingId, @iBit;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT * FROM dbo.tblACL WHERE iEntityId = @iEntityId 
			AND iApplicationId = @iApplicationId 
			AND iSecurityId = @iSecurityId 
			AND iPermissionSetId  = @iPermisionSetId)
		BEGIN
			INSERT INTO dbo.tblACL VALUES (
			     @iEntityId
				, @iApplicationId
				, @iSecurityId
				, @iPermisionSetId
				, @iGroupingId
				, @iBit);
		END
		ELSE 
		BEGIN
			UPDATE dbo.tblACL
				SET iBit = @iBit,
					iGroupingId = @iGroupingId
			WHERE iEntityId = @iEntityId 
			AND iApplicationId = @iApplicationId 
			AND iSecurityId = @iSecurityId 
			AND iPermissionSetId  = @iPermisionSetId
		END
		FETCH NEXT FROM ACL INTO @iEntityId, @iApplicationId, @iSecurityId, @iPermisionSetId, @iGroupingId, @iBit;
	END
	CLOSE ACL;
	DEALLOCATE ACL;
    INSERT INTO dbo.CacheUpdate (ActionType, EntityId) VALUES (5, @iParentHandbookId);
	SELECT @iNewHandbookId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JULY 27, 2015
-- Description:	Get permissions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetPermissions]
	@iPermissionSetId AS [dbo].[Item] READONLY,
	@iSecurityId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ta.iEntityId, ta.iSecurityId, ta.iPermissionSetId AS iAccessRights, ta.iBit FROM dbo.tblACL ta 
	WHERE ta.iApplicationId = 136 
		AND ta.iPermissionSetId IN (SELECT Id FROM @iPermissionSetId) 
		AND ta.iSecurityId = @iSecurityId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetModulePermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: DEC 21, 2015
-- Description:	Get module permissions
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetModulePermissions]
	@iPermissionSetId AS [dbo].[Item] READONLY,
	@iApplicationSetId AS [dbo].[Item] READONLY,
	@iSecurityId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT ta.iEntityId, ta.iSecurityId, ta.iPermissionSetId AS iAccessRights, ta.iBit FROM dbo.tblACL ta 
	WHERE ta.iApplicationId IN (SELECT Id FROM @iApplicationSetId) 
		AND ta.iPermissionSetId IN (SELECT Id FROM @iPermissionSetId) 
		AND ta.iSecurityId = @iSecurityId;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetMetaRegisterPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		SI.MANH.NGUYEN
-- Create date: DEC 25, 2015
-- Description:	Get permissions for a specified metadata register.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetMetaRegisterPermissions]
	@RegisterId INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT iEntityId
		, iPermissionSetId AS iAccessRights
		,[iBit]
		,iSecurityId AS iGroupingId,
		sg.strName AS strGroupName
	FROM [dbo].[tblACL] acl
		LEFT JOIN [dbo].[tblSecGroup] sg ON acl.iSecurityId = sg.iSecGroupId
	WHERE iEntityId = @RegisterId
		AND iApplicationId = 147 -- metaRegister
		AND (iPermissionSetId = 571);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetFolderPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_GetFolderPermissions] 
	@iFolderId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    SELECT iEntityId
		, iPermissionSetId AS iAccessRights
		,[iBit]
		,iSecurityId AS iGroupingId,
		sg.strName AS strGroupName
	FROM [dbo].[tblACL] acl
		LEFT JOIN [dbo].[tblSecGroup] sg ON acl.iSecurityId = sg.iSecGroupId
	WHERE iEntityId = @iFolderId
		AND iApplicationId = 136 -- Handbook module
		AND (iPermissionSetId = 461 OR iPermissionSetId = 462) -- 461: group permission for folder rights, 462: group permissions for document rights
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartments]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: JUNE 24, 2015
-- Description:	Get all departments. 
--				Because the list of department does not long, so we will get all and paging on client if any.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDepartments] 
	@iDepartmentId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    SELECT	dpt.iDepartmentId, 
			dpt.strName, 
			dpt.strDescription,
			dpt.iDepartmentParentId, 
			dpt.iLevel,
			dpt.bCompany,
			dpt.strOrgNo,
			tc.strName AS Country,
			[dbo].[fn136_GetDepartmentPath](dpt.iDepartmentId) AS [Path],
			dpt.strVisitAddress1, 
			dpt.strVisitAddress2, 
			dpt.strVisitAddress3, 
			dpt.strAddress1, 
			dpt.strAddress2, 
			dpt.strAddress3,
			dpt.strPhone, 
			dpt.strFax, 
			dpt.strEmail, 
			dpt.strURL,
			dpt.iCountryId
		FROM dbo.tblDepartment dpt
		LEFT JOIN dbo.tblCountry tc ON tc.iCountryId = dpt.iCountryId
		WHERE ((@iDepartmentID IS NULL AND (dpt.iDepartmentParentId IS NULL OR dpt.iDepartmentParentId = 0)) 
			OR dpt.iDepartmentParentId = @iDepartmentID);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartmentPostions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 17, 2015
-- Description:	Get department positions
-- Modified date: FEB 03, 2016
-- Modified: order by strName
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDepartmentPostions]
	@iDepartmentId INT
AS
BEGIN
	SET NOCOUNT ON;
    SELECT tp.* FROM dbo.tblPosition tp
		INNER JOIN dbo.relDepartmentPosition rdp ON rdp.iPositionId = tp.iPositionId
		WHERE rdp.iDepartmentId = @iDepartmentId
	ORDER BY tp.strName
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartmentPermissions]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 17, 2015
-- Description:	Get permissions for a specified organization.
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDepartmentPermissions]
	@iDepartmentId INT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT iEntityId
		, iPermissionSetId AS iAccessRights
		,[iBit]
		,iSecurityId AS iGroupingId,
		sg.strName AS strGroupName
	FROM [dbo].[tblACL] acl
		LEFT JOIN [dbo].[tblSecGroup] sg ON acl.iSecurityId = sg.iSecGroupId
	WHERE iEntityId = @iDepartmentId
		AND iApplicationId = 97 -- organization
		AND (iPermissionSetId = 99);
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_GetDepartmentById]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		EM.LAM.VAN.MAI
-- Create date: AUGUST 13, 2015
-- Description:	Get department by id
-- =============================================
CREATE PROCEDURE [dbo].[m136_be_GetDepartmentById]
	@iDepartmentId INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT	dpt.iDepartmentId, 
			dpt.strName, 
			dpt.strDescription,
			dpt.iDepartmentParentId, 
			dpt.iLevel,
			dpt.bCompany,
			dpt.strOrgNo,
			tc.strName AS Country,
			[dbo].[fn136_GetDepartmentPath](dpt.iDepartmentId) AS [Path],
			dpt.strVisitAddress1, 
			dpt.strVisitAddress2, 
			dpt.strVisitAddress3, 
			dpt.strAddress1, 
			dpt.strAddress2, 
			dpt.strAddress3,
			dpt.strPhone, 
			dpt.strFax, 
			dpt.strEmail, 
			dpt.strURL,
			dpt.iCountryId
		FROM dbo.tblDepartment dpt
		LEFT JOIN dbo.tblCountry tc ON tc.iCountryId = dpt.iCountryId
		WHERE dpt.iDepartmentId = @iDepartmentID;
END
GO
/****** Object:  StoredProcedure [dbo].[m136_be_CreateHearingComment]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[m136_be_CreateHearingComment] 
	@UserId AS INT,
	@HearingsId AS INT,
	@FieldId AS INT = NULL,
	@Comment AS NVARCHAR(MAX),
	@IsDraft AS BIT
AS
BEGIN
	DECLARE @Published AS DATETIME = NULL
	DECLARE @CurrentDate AS DATETIME = GETDATE()
	IF(@IsDraft = 0)
		BEGIN
			SET @Published = @CurrentDate
		END
	INSERT INTO dbo.m136_HearingComments(HearingsId,iMetaInfoTemplateRecordsId,CreatedDate,CreatedBy,Comment,IsDraft,Published)
	VALUES(@HearingsId, @FieldId, @CurrentDate, @UserId, @Comment, @IsDraft, @Published)
END
GO
/****** Object:  Table [Risk].[AnalysisDangerProbability]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisDangerProbability](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisDangerId] [int] NOT NULL,
	[ProbabilityId] [tinyint] NOT NULL,
	[ReevaluatedProbabilityId] [tinyint] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](1000) NULL,
 CONSTRAINT [PK_Risk_AnalysisDangerProbability_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSecurityGetPermissionSecGroup]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSecurityGetPermissionSecGroup] (@iApplicationId int, @iPermissionSetId int, @iSecurityId int, @iEntityId int)  
RETURNS int AS  
BEGIN 

declare @var int
select @var = 0
select @var = @var | iBit from tblAcl a  where a.iApplicationId = @iApplicationId and a.iPermissionSetId = @iPermissionSetId and a.iEntityId = @iEntityId and a.iSecurityId = @iSecurityId

return @var

END
GO
/****** Object:  Table [Risk].[AnalysisDangerEvaluation]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Risk].[AnalysisDangerEvaluation](
	[Id] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[AnalysisDangerId] [int] NOT NULL,
	[AnalysisDangerAcceptanceCriteriasId] [int] NOT NULL,
	[ConsequenceId] [tinyint] NOT NULL,
	[ReevaluatedConsequenceId] [tinyint] NOT NULL,
	[Description] [nvarchar](1000) NULL,
	[Grounds] [nvarchar](250) NULL,
 CONSTRAINT [PK_Risk_AnalysisDangerEvaluation_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [Risk].[AddDangerProbability]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[AddDangerProbability] 
	@AnalysisDangerId INT,
	@ProbabilityId INT,
	@ReevaluatedProbabilityId INT,
	@Name [nvarchar](250),
	@Description [nvarchar](1000)
AS
BEGIN
	SET NOCOUNT ON;

    INSERT INTO Risk.AnalysisDangerProbability(AnalysisDangerId, ProbabilityId, 
		ReevaluatedProbabilityId, Name, Description)
    VALUES(@AnalysisDangerId, @ProbabilityId, 
        @ReevaluatedProbabilityId, @Name, @Description);
        
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS Id;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateDangerProbability]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateDangerProbability] 
	@Id INT,
	@AnalysisDangerId INT,
	@ProbabilityId INT,
	@ReevaluatedProbabilityId INT,
	@Name [nvarchar](250),
	@Description [nvarchar](1000)
AS
BEGIN
	SET NOCOUNT ON;

    UPDATE Risk.AnalysisDangerProbability
    SET
        AnalysisDangerId = @AnalysisDangerId, 
        ProbabilityId = @ProbabilityId, 
        ReevaluatedProbabilityId = @ReevaluatedProbabilityId, 
        Name = @Name, 
        [Description] = @Description
    WHERE Id = @Id;
END
GO
/****** Object:  StoredProcedure [Risk].[GetDangerCauses]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Risk].[GetDangerCauses]
	@DangerId INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT adp.Id, adp.AnalysisDangerId, adp.ProbabilityId, 
    adp.ReevaluatedProbabilityId, adp.Name, adp.[Description],
    Risk.GetProbabilityName(adp.ProbabilityId, @Language) AS Probability,
    Risk.GetProbabilityName(adp.ReevaluatedProbabilityId, @Language) AS ReevaluatedProbability
    FROM Risk.AnalysisDangerProbability adp
    WHERE adp.AnalysisDangerId = @DangerId;
END
GO
/****** Object:  StoredProcedure [Risk].[GetDangerAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetDangerAcceptanceCriterias] 
	@DangerId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT adac.* 
	FROM Risk.AnalysisDangerAcceptanceCriterias adac
	WHERE adac.AnalysisDangerId = @DangerId
	ORDER BY adac.AnalysisAcceptanceCriteriaId;
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteDangerProbabilities]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteDangerProbabilities] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

    DELETE Risk.AnalysisDangerProbability
    WHERE Id IN (SELECT Id FROM @Items);
END
GO
/****** Object:  StoredProcedure [Risk].[DeleteAnalysisDangers]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[DeleteAnalysisDangers] 
	@Items AS dbo.Item READONLY
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		BEGIN TRANSACTION;
			DELETE Risk.AnalysisDangerEvaluation
			WHERE AnalysisDangerId IN (SELECT Id FROM @Items);
			
			DELETE Risk.AnalysisDangerAcceptanceCriterias
			WHERE AnalysisDangerId IN (SELECT Id FROM @Items);
			
			DELETE Risk.AnalysisDangerProbability
			WHERE AnalysisDangerId IN (SELECT Id FROM @Items);
			
			DELETE Risk.AnalysisDangers
			WHERE Id IN (SELECT Id FROM @Items);
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH    
END
GO
/****** Object:  StoredProcedure [Risk].[GetDangerEvaluations]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetDangerEvaluations]
	@DangerId INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @AnalysisId INT;
	
	SELECT @AnalysisId = ad.AnalysisId 
	FROM Risk.AnalysisDangers ad WHERE ad.Id = @DangerId;

	DECLARE @TempDangerEvaluations TABLE(Id INT, AnalysisDangerId INT,
	Matrix INT, AnalysisAcceptanceCriteriaId INT,
	AnalysisDangerAcceptanceCriteriasId INT,
	ConsequenceTypeId INT, ConsequenceType [nvarchar](255), 
	ConsequenceId INT, Consequence [nvarchar](255),
	ReevaluatedConsequenceId INT, ReevaluatedConsequence [nvarchar](255),
	[Description] [nvarchar](1000), Grounds [nvarchar](250));

	INSERT INTO @TempDangerEvaluations
	SELECT ade.Id, ade.AnalysisDangerId, 
		aac.ConsequenceId AS Matrix, adac.AnalysisAcceptanceCriteriaId, 
		ade.AnalysisDangerAcceptanceCriteriasId, aac.ConsequenceTypeId, 
		[Risk].[GetConsequenceTypeName](aac.ConsequenceTypeId, @Language) AS ConsequenceType,
		ade.ConsequenceId, [Risk].[GetConsequenceName](ade.ConsequenceId, @Language) AS Consequence,
		ade.ReevaluatedConsequenceId, 
		[Risk].[GetConsequenceName](ade.ReevaluatedConsequenceId, @Language) AS ReevaluatedConsequence, 
		ade.[Description], ade.Grounds	 
	FROM Risk.AnalysisDangerEvaluation ade
	JOIN Risk.AnalysisDangerAcceptanceCriterias adac ON adac.Id = ade.AnalysisDangerAcceptanceCriteriasId 
													AND adac.AnalysisDangerId = @DangerId
	JOIN Risk.AnalysisAcceptanceCriterias aac ON adac.AnalysisAcceptanceCriteriaId = aac.Id 
													AND aac.AnalysisId = @AnalysisId
	WHERE ade.AnalysisDangerId = @DangerId;

	SELECT 0 as Id, @DangerId AS AnalysisDangerId, 
		aac.ConsequenceId AS Matrix, adac.AnalysisAcceptanceCriteriaId,
		adac.Id AS AnalysisDangerAcceptanceCriteriasId, aac.ConsequenceTypeId, 
		[Risk].[GetConsequenceTypeName](aac.ConsequenceTypeId, @Language) AS ConsequenceType, aac.ConsequenceId, 
		[Risk].[GetConsequenceName](aac.ConsequenceId, @Language) AS Consequence, 
		0 AS ReevaluatedConsequenceId, [Risk].[GetConsequenceName](0, @Language) AS ReevaluatedConsequence, 
		NULL AS [Description], NULL AS Grounds
	FROM Risk.AnalysisDangerAcceptanceCriterias adac
	JOIN Risk.AnalysisAcceptanceCriterias aac ON aac.Id = adac.AnalysisAcceptanceCriteriaId
	WHERE adac.AnalysisDangerId = @DangerId
		AND adac.Id NOT IN (SELECT AnalysisDangerAcceptanceCriteriasId FROM @TempDangerEvaluations)
	UNION 
	SELECT tde.Id, tde.AnalysisDangerId, tde.Matrix, tde.AnalysisAcceptanceCriteriaId, 
		tde.AnalysisDangerAcceptanceCriteriasId, tde.ConsequenceTypeId, tde.ConsequenceType, tde.ConsequenceId, 
		tde.Consequence, tde.ReevaluatedConsequenceId, tde.ReevaluatedConsequence, tde.[Description], tde.Grounds 
	FROM @TempDangerEvaluations tde
	ORDER BY AnalysisAcceptanceCriteriaId;
END
GO
/****** Object:  StoredProcedure [Risk].[LockAnalysisResults]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[LockAnalysisResults] 
	@AnalysisId INT
AS
BEGIN
    BEGIN TRY
		BEGIN TRANSACTION;
			SET NOCOUNT ON;

			UPDATE Risk.Analysis
			SET
				Risk.Analysis.ResultsLocked = 1
			WHERE Id = @AnalysisId;
			
			UPDATE Risk.AnalysisDangerEvaluation
			SET
			    ReevaluatedConsequenceId = ConsequenceId
			WHERE AnalysisDangerId IN (SELECT ad.Id 
				FROM Risk.AnalysisDangers ad 
				WHERE ad.AnalysisId = @AnalysisId);
				
			UPDATE Risk.AnalysisDangerProbability
			SET
			    ReevaluatedProbabilityId = ProbabilityId
			WHERE AnalysisDangerId IN (SELECT ad.Id 
				FROM Risk.AnalysisDangers ad 
				WHERE ad.AnalysisId = @AnalysisId);
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
END
GO
/****** Object:  StoredProcedure [Risk].[GetAnalysisDangerResults]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[GetAnalysisDangerResults]
	@AnalysisId INT,
	@Language INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ad.Id, ad.AnalysisId, aac.ConsequenceId AS Matrix, ad.Name AS Danger, aac.ConsequenceTypeId, 
		Risk.GetConsequenceTypeName(aac.ConsequenceTypeId, @Language) AS ConsequenceType,
		ade.ConsequenceId, [Risk].[GetConsequenceName](ade.ConsequenceId, @Language) AS Consequence, 
		ade.ReevaluatedConsequenceId, [Risk].[GetConsequenceName](ade.ReevaluatedConsequenceId, @Language) AS ReevaluatedConsequence,
		adp.ProbabilityId, Risk.GetProbabilityName(adp.ProbabilityId, @Language) AS Probability, 
		adp.ReevaluatedProbabilityId, adp.Name AS Cause
	FROM Risk.AnalysisDangers ad 
	JOIN Risk.AnalysisDangerEvaluation ade ON ade.AnalysisDangerId = ad.Id
	JOIN Risk.AnalysisDangerAcceptanceCriterias adac ON adac.Id = ade.AnalysisDangerAcceptanceCriteriasId
	JOIN Risk.AnalysisAcceptanceCriterias aac ON aac.Id = adac.AnalysisAcceptanceCriteriaId 
												AND aac.AnalysisId = @AnalysisId
	JOIN Risk.AnalysisDangerProbability adp ON adp.AnalysisDangerId = ad.Id
	WHERE ad.AnalysisId = @AnalysisId;
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisDangerEvaluations]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisDangerEvaluations] 
	@DangerId INT,
	@Items AS Risk.AnalysisDangerEvaluationTable READONLY
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;
		
			SET NOCOUNT ON;
			
			DELETE Risk.AnalysisDangerEvaluation 
			WHERE AnalysisDangerId = @DangerId
			AND AnalysisDangerAcceptanceCriteriasId NOT IN (SELECT AnalysisDangerAcceptanceCriteriasId 
				FROM @Items WHERE AnalysisDangerId = @DangerId);
			
			UPDATE ade
			SET
				ade.ReevaluatedConsequenceId = i.ReevaluatedConsequenceId,
				ade.ConsequenceId = i.ConsequenceId,
				ade.[Description] = i.[Description],
				ade.Grounds = i.Grounds
			FROM Risk.AnalysisDangerEvaluation ade
			JOIN @Items i ON i.AnalysisDangerAcceptanceCriteriasId = ade.AnalysisDangerAcceptanceCriteriasId
				AND i.AnalysisDangerId = ade.AnalysisDangerId
				AND ade.AnalysisDangerId = @DangerId;
				    
			INSERT INTO Risk.AnalysisDangerEvaluation(AnalysisDangerId, AnalysisDangerAcceptanceCriteriasId, 
				ConsequenceId, ReevaluatedConsequenceId, [Description], Grounds)
			SELECT AnalysisDangerId, AnalysisDangerAcceptanceCriteriasId, ConsequenceId, ReevaluatedConsequenceId, [Description], Grounds 
				FROM @Items WHERE AnalysisDangerAcceptanceCriteriasId NOT IN (SELECT ade.AnalysisDangerAcceptanceCriteriasId
					FROM Risk.AnalysisDangerEvaluation ade WHERE ade.AnalysisDangerId = @DangerId);
					
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH
	
	
END
GO
/****** Object:  StoredProcedure [Risk].[UpdateAnalysisDangerAcceptanceCriterias]    Script Date: 10/20/2016 11:39:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Risk].[UpdateAnalysisDangerAcceptanceCriterias] 
    @AnalysisId INT,
	@DangerId INT,
	@Items AS Risk.AnalysisDangerAcceptanceCriteriasTable READONLY
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		BEGIN TRANSACTION;
			DELETE Risk.AnalysisDangerEvaluation
			WHERE AnalysisDangerId = @DangerId
			AND AnalysisDangerAcceptanceCriteriasId NOT IN (SELECT adac.Id FROM @Items i
				JOIN Risk.AnalysisDangerAcceptanceCriterias adac ON adac.AnalysisAcceptanceCriteriaId = i.AnalysisAcceptanceCriteriaId
				AND adac.AnalysisDangerId = i.AnalysisDangerId
				WHERE i.AnalysisDangerId = @DangerId);
			
			DELETE Risk.AnalysisDangerAcceptanceCriterias 
			WHERE AnalysisDangerId = @DangerId 
			AND AnalysisAcceptanceCriteriaId NOT IN (SELECT AnalysisAcceptanceCriteriaId FROM @Items 
				WHERE AnalysisDangerId = @DangerId);
			
			INSERT INTO Risk.AnalysisDangerAcceptanceCriterias(AnalysisDangerId, AnalysisAcceptanceCriteriaId)
			SELECT AnalysisDangerId, AnalysisAcceptanceCriteriaId FROM @Items
				WHERE AnalysisAcceptanceCriteriaId NOT IN 
					(SELECT AnalysisAcceptanceCriteriaId FROM Risk.AnalysisDangerAcceptanceCriterias adac 
					WHERE adac.AnalysisDangerId = @DangerId);
					
			DECLARE @Evaluations AS [Risk].[AnalysisDangerEvaluationTable];
			INSERT INTO @Evaluations SELECT 0, @DangerId, adac.Id, ISNULL(ade.ConsequenceId, 0),
				ISNULL(ade.ReevaluatedConsequenceId, 0), ade.[Description], ade.Grounds 
			FROM @Items i
				LEFT JOIN Risk.AnalysisDangerAcceptanceCriterias adac ON adac.AnalysisAcceptanceCriteriaId = i.AnalysisAcceptanceCriteriaId
														AND adac.AnalysisDangerId = i.AnalysisDangerId
														AND adac.AnalysisDangerId = @DangerId		
				LEFT JOIN Risk.AnalysisDangerEvaluation ade ON ade.AnalysisDangerAcceptanceCriteriasId = adac.Id;
				
			EXEC [Risk].[UpdateAnalysisDangerEvaluations] @DangerId, @Evaluations;
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK
		DECLARE @ErrorMessage nvarchar(MAX), @ErrorNumber int, @ErrorSeverity int, @ErrorState int, @ErrorLine int
		SELECT @ErrorMessage = N'Error %d, Line %d, Message: '+ERROR_MESSAGE(),@ErrorNumber = ERROR_NUMBER(),@ErrorSeverity = ERROR_SEVERITY(),@ErrorState = ERROR_STATE(),@ErrorLine = ERROR_LINE();
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorNumber,@ErrorLine);
	END CATCH	
END
GO
/****** Object:  Default [DF__m136_tblH__iView__2799C73C]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblHandbook] ADD  DEFAULT ((1)) FOR [iViewTypeId]
GO
/****** Object:  Default [DF__m136_tblH__iSort__4B22FA9B]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblHandbook] ADD  DEFAULT ((0)) FOR [iSort]
GO
/****** Object:  Default [DF_m136_tblDocument_iLatestVersion]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblDocument] ADD  CONSTRAINT [DF_m136_tblDocument_iLatestVersion]  DEFAULT ((0)) FOR [iLatestVersion]
GO
/****** Object:  Default [DF_m136_tblDocument_iLatestApproved]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblDocument] ADD  CONSTRAINT [DF_m136_tblDocument_iLatestApproved]  DEFAULT ((0)) FOR [iLatestApproved]
GO
/****** Object:  Default [DF__m136_tblD__iOrie__69E778DD]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblDocument] ADD  DEFAULT ((1)) FOR [iOrientation]
GO
/****** Object:  Default [DF__m136_tblD__iRece__0189F844]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblDocument] ADD  DEFAULT ((0)) FOR [iReceiptsCopied]
GO
/****** Object:  Default [DF_m147_relRegisterItemItem_iModuleId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m147_relRegisterItemItem] ADD  CONSTRAINT [DF_m147_relRegisterItemItem_iModuleId]  DEFAULT ((0)) FOR [iModuleId]
GO
/****** Object:  Default [DF__m136_tblD__iSort__29820FAE]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_tblDocumentType] ADD  DEFAULT ((0)) FOR [iSort]
GO
/****** Object:  Default [DF_m151_DeviationHistory_Id]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m151_DeviationHistory] ADD  CONSTRAINT [DF_m151_DeviationHistory_Id]  DEFAULT (newid()) FOR [Id]
GO
/****** Object:  Default [DF_m151_Deviation_Id]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m151_Deviation] ADD  CONSTRAINT [DF_m151_Deviation_Id]  DEFAULT (newid()) FOR [Id]
GO
/****** Object:  Default [DF_m151_Category_CatActive]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m151_Category] ADD  CONSTRAINT [DF_m151_Category_CatActive]  DEFAULT ((1)) FOR [CatActive]
GO
/****** Object:  Default [DF__BaseActio__State__79A8DF5A]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[BaseAction] ADD  DEFAULT ((0)) FOR [State]
GO
/****** Object:  Default [DF__BaseActio__Actio__7A9D0393]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[BaseAction] ADD  DEFAULT ((0)) FOR [ActionType]
GO
/****** Object:  Default [DF__Deviation__IsDel__08EB22EA]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[DeviationAttachment] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  Default [DF__ReadingLi__IsIna__3553B50D]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[ReadingList] ADD  DEFAULT ((1)) FOR [IsInactive]
GO
/****** Object:  Default [DF__ReadingLi__IsDel__3647D946]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[ReadingList] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  Default [DF__ProgressR__Times__118068EB]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[ProgressReport] ADD  DEFAULT (getdate()) FOR [Timestamp]
GO
/****** Object:  Default [DF__CategoryR__TypeI__76CC72AF]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[CategoryResponsible] ADD  DEFAULT ((0)) FOR [TypeId]
GO
/****** Object:  Default [DF__CategoryC__Delet__73F00604]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[CategoryCustomFieldOptions] ADD  DEFAULT ((0)) FOR [Deleted]
GO
/****** Object:  Default [DF__CategoryC__Visib__6F2B50E7]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[CategoryCustomField] ADD  DEFAULT ((0)) FOR [VisibleOnRegistration]
GO
/****** Object:  Default [DF__CategoryC__IsMan__701F7520]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[CategoryCustomField] ADD  DEFAULT ((0)) FOR [IsMandatory]
GO
/****** Object:  Default [DF__CategoryC__Delet__71139959]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[CategoryCustomField] ADD  DEFAULT ((0)) FOR [Deleted]
GO
/****** Object:  Default [DF__ActionAtt__Actio__7D79703E]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[ActionAttachment] ADD  DEFAULT ((0)) FOR [ActionType]
GO
/****** Object:  Default [DF__Areas__iDeleted__4322B177]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[Areas] ADD  DEFAULT ((0)) FOR [iDeleted]
GO
/****** Object:  Default [DF__Deviation__State__023E255B]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Deviation] ADD  DEFAULT ((0)) FOR [State]
GO
/****** Object:  Default [DF__Deviation__Type__03324994]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Deviation] ADD  DEFAULT ((0)) FOR [Type]
GO
/****** Object:  Default [DF__Deviation__IsDel__04266DCD]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Deviation] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  Default [DF__Category__Includ__6A669BCA]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Category] ADD  DEFAULT ((0)) FOR [IncludePatientInfo]
GO
/****** Object:  Default [DF__Category__Includ__6B5AC003]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Category] ADD  DEFAULT ((0)) FOR [IncludeForwaringOption]
GO
/****** Object:  Default [DF__Category__IsDele__6C4EE43C]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Category] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  Default [DF__Category__Includ__5927012F]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Deviation].[Category] ADD  DEFAULT ((0)) FOR [IncludeServiceArea]
GO
/****** Object:  Default [DF_m147_relRegisterItemCategory_iModuleId]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m147_relRegisterItemCategory] ADD  CONSTRAINT [DF_m147_relRegisterItemCategory_iModuleId]  DEFAULT ((0)) FOR [iModuleId]
GO
/****** Object:  Default [DF_m151_ReportList_ReportSort]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m151_ReportList] ADD  CONSTRAINT [DF_m151_ReportList_ReportSort]  DEFAULT ((50)) FOR [ReportSort]
GO
/****** Object:  Default [DF_m151_Priority_Sort]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[m151_Priority] ADD  CONSTRAINT [DF_m151_Priority_Sort]  DEFAULT ((10)) FOR [Sort]
GO
/****** Object:  Default [DF__EditorTem__Delet__1AD4C8FB]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[EditorTemplate] ADD  DEFAULT ((0)) FOR [Deleted]
GO
/****** Object:  Default [DF__Uploads__iType__17E34DB7]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[Uploads] ADD  DEFAULT ((1)) FOR [iType]
GO
/****** Object:  Default [DF__AreaConse__iDele__49CFAF06]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[AreaConsequences] ADD  DEFAULT ((0)) FOR [iDeleted]
GO
/****** Object:  Default [DF__Analysis__Result__44D5EFBF]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[Analysis] ADD  DEFAULT ((0)) FOR [ResultsLocked]
GO
/****** Object:  Default [DF__AnalysisA__IsDel__644E9B18]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisAttachments] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  Default [DF__AnalysisC__IsDel__607E0A34]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisCounterMeasures] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
/****** Object:  ForeignKey [FK__relEmployeeSecGroup_iEmployeeId__tblEmployee_iEmployeeId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relEmployeeSecGroup]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeeSecGroup_iEmployeeId__tblEmployee_iEmployeeId] FOREIGN KEY([iEmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[relEmployeeSecGroup] CHECK CONSTRAINT [FK__relEmployeeSecGroup_iEmployeeId__tblEmployee_iEmployeeId]
GO
/****** Object:  ForeignKey [FK__relEmployeeSecGroup_iSecGroupId__tblSecGroup_iSecGroupId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relEmployeeSecGroup]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeeSecGroup_iSecGroupId__tblSecGroup_iSecGroupId] FOREIGN KEY([iSecGroupId])
REFERENCES [dbo].[tblSecGroup] ([iSecGroupId])
GO
ALTER TABLE [dbo].[relEmployeeSecGroup] CHECK CONSTRAINT [FK__relEmployeeSecGroup_iSecGroupId__tblSecGroup_iSecGroupId]
GO
/****** Object:  ForeignKey [FK__tblImage_iItemId__tblItem_iItemId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblImage]  WITH CHECK ADD  CONSTRAINT [FK__tblImage_iItemId__tblItem_iItemId] FOREIGN KEY([iItemId])
REFERENCES [dbo].[tblItem] ([iItemId])
GO
ALTER TABLE [dbo].[tblImage] CHECK CONSTRAINT [FK__tblImage_iItemId__tblItem_iItemId]
GO
/****** Object:  ForeignKey [FK__tblFile_iItemId__tblItem_iItemId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblFile]  WITH CHECK ADD  CONSTRAINT [FK__tblFile_iItemId__tblItem_iItemId] FOREIGN KEY([iItemId])
REFERENCES [dbo].[tblItem] ([iItemId])
GO
ALTER TABLE [dbo].[tblFile] CHECK CONSTRAINT [FK__tblFile_iItemId__tblItem_iItemId]
GO
/****** Object:  ForeignKey [FK_Activities_tblEmployee_CreatedBy]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[Activities]  WITH CHECK ADD  CONSTRAINT [FK_Activities_tblEmployee_CreatedBy] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Calendar].[Activities] CHECK CONSTRAINT [FK_Activities_tblEmployee_CreatedBy]
GO
/****** Object:  ForeignKey [FK_Activities_tblEmployee_ResponsibleId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[Activities]  WITH CHECK ADD  CONSTRAINT [FK_Activities_tblEmployee_ResponsibleId] FOREIGN KEY([ResponsibleId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Calendar].[Activities] CHECK CONSTRAINT [FK_Activities_tblEmployee_ResponsibleId]
GO
/****** Object:  ForeignKey [FK_Activities_tblEmployee_UpdatedBy]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[Activities]  WITH CHECK ADD  CONSTRAINT [FK_Activities_tblEmployee_UpdatedBy] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Calendar].[Activities] CHECK CONSTRAINT [FK_Activities_tblEmployee_UpdatedBy]
GO
/****** Object:  ForeignKey [FK__tblEmployee_iCountryId__tblCountry_iCountryId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblEmployee]  WITH CHECK ADD  CONSTRAINT [FK__tblEmployee_iCountryId__tblCountry_iCountryId] FOREIGN KEY([iCountryId])
REFERENCES [dbo].[tblCountry] ([iCountryId])
GO
ALTER TABLE [dbo].[tblEmployee] CHECK CONSTRAINT [FK__tblEmployee_iCountryId__tblCountry_iCountryId]
GO
/****** Object:  ForeignKey [FK__tblEmployee_iDepartmentId__tblDepartment_iDepartmentId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblEmployee]  WITH CHECK ADD  CONSTRAINT [FK__tblEmployee_iDepartmentId__tblDepartment_iDepartmentId] FOREIGN KEY([iDepartmentId])
REFERENCES [dbo].[tblDepartment] ([iDepartmentId])
GO
ALTER TABLE [dbo].[tblEmployee] CHECK CONSTRAINT [FK__tblEmployee_iDepartmentId__tblDepartment_iDepartmentId]
GO
/****** Object:  ForeignKey [FK__tblEmployee_iImageId__tblItem_iItemId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblEmployee]  WITH CHECK ADD  CONSTRAINT [FK__tblEmployee_iImageId__tblItem_iItemId] FOREIGN KEY([iImageId])
REFERENCES [dbo].[tblItem] ([iItemId])
GO
ALTER TABLE [dbo].[tblEmployee] CHECK CONSTRAINT [FK__tblEmployee_iImageId__tblItem_iItemId]
GO
/****** Object:  ForeignKey [FK_DepartmentResponsibles_ResponsibleTypes]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[DepartmentResponsibles]  WITH CHECK ADD  CONSTRAINT [FK_DepartmentResponsibles_ResponsibleTypes] FOREIGN KEY([ResponsibleTypeId])
REFERENCES [dbo].[luResponsibleTypes] ([Id])
GO
ALTER TABLE [dbo].[DepartmentResponsibles] CHECK CONSTRAINT [FK_DepartmentResponsibles_ResponsibleTypes]
GO
/****** Object:  ForeignKey [FK_DepartmentResponsibles_tblDepartment1]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[DepartmentResponsibles]  WITH CHECK ADD  CONSTRAINT [FK_DepartmentResponsibles_tblDepartment1] FOREIGN KEY([DepartmentId])
REFERENCES [dbo].[tblDepartment] ([iDepartmentId])
GO
ALTER TABLE [dbo].[DepartmentResponsibles] CHECK CONSTRAINT [FK_DepartmentResponsibles_tblDepartment1]
GO
/****** Object:  ForeignKey [FK_DepartmentResponsibles_tblEmployee1]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[DepartmentResponsibles]  WITH CHECK ADD  CONSTRAINT [FK_DepartmentResponsibles_tblEmployee1] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[DepartmentResponsibles] CHECK CONSTRAINT [FK_DepartmentResponsibles_tblEmployee1]
GO
/****** Object:  ForeignKey [FK__tblDepartment_iCountryId__tblCountry_iCountryId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblDepartment]  WITH CHECK ADD  CONSTRAINT [FK__tblDepartment_iCountryId__tblCountry_iCountryId] FOREIGN KEY([iCountryId])
REFERENCES [dbo].[tblCountry] ([iCountryId])
GO
ALTER TABLE [dbo].[tblDepartment] CHECK CONSTRAINT [FK__tblDepartment_iCountryId__tblCountry_iCountryId]
GO
/****** Object:  ForeignKey [FK__relItem_iItemChildId__tblItem_iItemId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relItem]  WITH CHECK ADD  CONSTRAINT [FK__relItem_iItemChildId__tblItem_iItemId] FOREIGN KEY([iItemChildId])
REFERENCES [dbo].[tblItem] ([iItemId])
GO
ALTER TABLE [dbo].[relItem] CHECK CONSTRAINT [FK__relItem_iItemChildId__tblItem_iItemId]
GO
/****** Object:  ForeignKey [Analysis_AnalysisMembers_FK]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Risk].[AnalysisMembers]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisMembers_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisMembers] CHECK CONSTRAINT [Analysis_AnalysisMembers_FK]
GO
/****** Object:  ForeignKey [tblEmployee_AnalysisMembers_FK]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Risk].[AnalysisMembers]  WITH CHECK ADD  CONSTRAINT [tblEmployee_AnalysisMembers_FK] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Risk].[AnalysisMembers] CHECK CONSTRAINT [tblEmployee_AnalysisMembers_FK]
GO
/****** Object:  ForeignKey [FK_ActivityTasks_Activities]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[ActivityTasks]  WITH CHECK ADD  CONSTRAINT [FK_ActivityTasks_Activities] FOREIGN KEY([ActivityId])
REFERENCES [Calendar].[Activities] ([ActivityId])
GO
ALTER TABLE [Calendar].[ActivityTasks] CHECK CONSTRAINT [FK_ActivityTasks_Activities]
GO
/****** Object:  ForeignKey [FK_ActivityTasks_tblEmployee_CreatedBy]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[ActivityTasks]  WITH CHECK ADD  CONSTRAINT [FK_ActivityTasks_tblEmployee_CreatedBy] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Calendar].[ActivityTasks] CHECK CONSTRAINT [FK_ActivityTasks_tblEmployee_CreatedBy]
GO
/****** Object:  ForeignKey [FK_ActivityTasks_tblEmployee_UpdatedBy]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[ActivityTasks]  WITH CHECK ADD  CONSTRAINT [FK_ActivityTasks_tblEmployee_UpdatedBy] FOREIGN KEY([UpdatedBy])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [Calendar].[ActivityTasks] CHECK CONSTRAINT [FK_ActivityTasks_tblEmployee_UpdatedBy]
GO
/****** Object:  ForeignKey [m136_Hearings_m136_HearingMembers_FK1]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_HearingMembers]  WITH CHECK ADD  CONSTRAINT [m136_Hearings_m136_HearingMembers_FK1] FOREIGN KEY([HearingsId])
REFERENCES [dbo].[m136_Hearings] ([Id])
GO
ALTER TABLE [dbo].[m136_HearingMembers] CHECK CONSTRAINT [m136_Hearings_m136_HearingMembers_FK1]
GO
/****** Object:  ForeignKey [m136_luHearingResponses_m136_HearingMembers_FK1]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_HearingMembers]  WITH CHECK ADD  CONSTRAINT [m136_luHearingResponses_m136_HearingMembers_FK1] FOREIGN KEY([HearingResponse])
REFERENCES [dbo].[m136_luHearingResponses] ([Id])
GO
ALTER TABLE [dbo].[m136_HearingMembers] CHECK CONSTRAINT [m136_luHearingResponses_m136_HearingMembers_FK1]
GO
/****** Object:  ForeignKey [tblEmployee_m136_HearingMembers_FK1]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[m136_HearingMembers]  WITH CHECK ADD  CONSTRAINT [tblEmployee_m136_HearingMembers_FK1] FOREIGN KEY([EmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[m136_HearingMembers] CHECK CONSTRAINT [tblEmployee_m136_HearingMembers_FK1]
GO
/****** Object:  ForeignKey [FK_ActivityDocuments_Activities]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [Calendar].[ActivityDocuments]  WITH CHECK ADD  CONSTRAINT [FK_ActivityDocuments_Activities] FOREIGN KEY([ActivityId])
REFERENCES [Calendar].[Activities] ([ActivityId])
GO
ALTER TABLE [Calendar].[ActivityDocuments] CHECK CONSTRAINT [FK_ActivityDocuments_Activities]
GO
/****** Object:  ForeignKey [FK__tblACL_iApplicationId__tblApplication_iApplicationId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblACL]  WITH CHECK ADD  CONSTRAINT [FK__tblACL_iApplicationId__tblApplication_iApplicationId] FOREIGN KEY([iApplicationId])
REFERENCES [dbo].[tblApplication] ([iApplicationId])
GO
ALTER TABLE [dbo].[tblACL] CHECK CONSTRAINT [FK__tblACL_iApplicationId__tblApplication_iApplicationId]
GO
/****** Object:  ForeignKey [FK__tblACL_iPermissionSetId__tblPermissionSet_iPermissionSetId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblACL]  WITH CHECK ADD  CONSTRAINT [FK__tblACL_iPermissionSetId__tblPermissionSet_iPermissionSetId] FOREIGN KEY([iPermissionSetId])
REFERENCES [dbo].[tblPermissionSet] ([iPermissionSetId])
GO
ALTER TABLE [dbo].[tblACL] CHECK CONSTRAINT [FK__tblACL_iPermissionSetId__tblPermissionSet_iPermissionSetId]
GO
/****** Object:  ForeignKey [FK__tblACL_iSecurityId__tblSecGroup_iSecGroupId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblACL]  WITH CHECK ADD  CONSTRAINT [FK__tblACL_iSecurityId__tblSecGroup_iSecGroupId] FOREIGN KEY([iSecurityId])
REFERENCES [dbo].[tblSecGroup] ([iSecGroupId])
GO
ALTER TABLE [dbo].[tblACL] CHECK CONSTRAINT [FK__tblACL_iSecurityId__tblSecGroup_iSecGroupId]
GO
/****** Object:  ForeignKey [FK__relItem_iItemId__tblItem_iItemId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblItem]  WITH CHECK ADD  CONSTRAINT [FK__relItem_iItemId__tblItem_iItemId] FOREIGN KEY([iItemId])
REFERENCES [dbo].[tblItem] ([iItemId])
GO
ALTER TABLE [dbo].[tblItem] CHECK CONSTRAINT [FK__relItem_iItemId__tblItem_iItemId]
GO
/****** Object:  ForeignKey [FK__tblItem_iAuthorId__tblEmployee_iEmployeeId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblItem]  WITH CHECK ADD  CONSTRAINT [FK__tblItem_iAuthorId__tblEmployee_iEmployeeId] FOREIGN KEY([iAuthorId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[tblItem] CHECK CONSTRAINT [FK__tblItem_iAuthorId__tblEmployee_iEmployeeId]
GO
/****** Object:  ForeignKey [FK__tblItem_iGroupId__tblGroup_iGroupId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblItem]  WITH CHECK ADD  CONSTRAINT [FK__tblItem_iGroupId__tblGroup_iGroupId] FOREIGN KEY([iGroupId])
REFERENCES [dbo].[tblGroup] ([iGroupId])
GO
ALTER TABLE [dbo].[tblItem] CHECK CONSTRAINT [FK__tblItem_iGroupId__tblGroup_iGroupId]
GO
/****** Object:  ForeignKey [FK__tblItem_iInformationTypeId__tblInformationType_iInformationTypeId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[tblItem]  WITH CHECK ADD  CONSTRAINT [FK__tblItem_iInformationTypeId__tblInformationType_iInformationTypeId] FOREIGN KEY([iInformationTypeId])
REFERENCES [dbo].[tblInformationType] ([iInformationTypeId])
GO
ALTER TABLE [dbo].[tblItem] CHECK CONSTRAINT [FK__tblItem_iInformationTypeId__tblInformationType_iInformationTypeId]
GO
/****** Object:  ForeignKey [FK__relEmployeePosition_iDepartmentId__tblDepartment_iDepartmentId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relEmployeePosition]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeePosition_iDepartmentId__tblDepartment_iDepartmentId] FOREIGN KEY([iDepartmentId])
REFERENCES [dbo].[tblDepartment] ([iDepartmentId])
GO
ALTER TABLE [dbo].[relEmployeePosition] CHECK CONSTRAINT [FK__relEmployeePosition_iDepartmentId__tblDepartment_iDepartmentId]
GO
/****** Object:  ForeignKey [FK__relEmployeePosition_iEmployeeId__tblEmployee_iEmployeeId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relEmployeePosition]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeePosition_iEmployeeId__tblEmployee_iEmployeeId] FOREIGN KEY([iEmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[relEmployeePosition] CHECK CONSTRAINT [FK__relEmployeePosition_iEmployeeId__tblEmployee_iEmployeeId]
GO
/****** Object:  ForeignKey [FK__relEmployeePosition_iPositionId__tblPosition_iPositionId]    Script Date: 10/20/2016 11:39:16 ******/
ALTER TABLE [dbo].[relEmployeePosition]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeePosition_iPositionId__tblPosition_iPositionId] FOREIGN KEY([iPositionId])
REFERENCES [dbo].[tblPosition] ([iPositionId])
GO
ALTER TABLE [dbo].[relEmployeePosition] CHECK CONSTRAINT [FK__relEmployeePosition_iPositionId__tblPosition_iPositionId]
GO
/****** Object:  ForeignKey [FK__relEmployeeGroup_iEmployeeId__tblEmployee_iEmployeeId]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[relEmployeeGroup]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeeGroup_iEmployeeId__tblEmployee_iEmployeeId] FOREIGN KEY([iEmployeeId])
REFERENCES [dbo].[tblEmployee] ([iEmployeeId])
GO
ALTER TABLE [dbo].[relEmployeeGroup] CHECK CONSTRAINT [FK__relEmployeeGroup_iEmployeeId__tblEmployee_iEmployeeId]
GO
/****** Object:  ForeignKey [FK__relEmployeeGroup_iGroupId__tblGroup_iGroupId]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[relEmployeeGroup]  WITH CHECK ADD  CONSTRAINT [FK__relEmployeeGroup_iGroupId__tblGroup_iGroupId] FOREIGN KEY([iGroupId])
REFERENCES [dbo].[tblGroup] ([iGroupId])
GO
ALTER TABLE [dbo].[relEmployeeGroup] CHECK CONSTRAINT [FK__relEmployeeGroup_iGroupId__tblGroup_iGroupId]
GO
/****** Object:  ForeignKey [FK__tblGroup_iGroupParentId__tblGroup_iGroupId]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[tblGroup]  WITH CHECK ADD  CONSTRAINT [FK__tblGroup_iGroupParentId__tblGroup_iGroupId] FOREIGN KEY([iGroupParentId])
REFERENCES [dbo].[tblGroup] ([iGroupId])
GO
ALTER TABLE [dbo].[tblGroup] CHECK CONSTRAINT [FK__tblGroup_iGroupParentId__tblGroup_iGroupId]
GO
/****** Object:  ForeignKey [FK__tblGroup_iInformationTypeId__tblInformationType_iInformationTypeId]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[tblGroup]  WITH CHECK ADD  CONSTRAINT [FK__tblGroup_iInformationTypeId__tblInformationType_iInformationTypeId] FOREIGN KEY([iInformationTypeId])
REFERENCES [dbo].[tblInformationType] ([iInformationTypeId])
GO
ALTER TABLE [dbo].[tblGroup] CHECK CONSTRAINT [FK__tblGroup_iInformationTypeId__tblInformationType_iInformationTypeId]
GO
/****** Object:  ForeignKey [luConsequenceTypes_luConsequenceTypesLanguage_FK]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[luConsequenceTypesLanguage]  WITH CHECK ADD  CONSTRAINT [luConsequenceTypes_luConsequenceTypesLanguage_FK] FOREIGN KEY([ConsequenceTypeId])
REFERENCES [Risk].[luConsequenceTypes] ([Id])
GO
ALTER TABLE [Risk].[luConsequenceTypesLanguage] CHECK CONSTRAINT [luConsequenceTypes_luConsequenceTypesLanguage_FK]
GO
/****** Object:  ForeignKey [luConsequences_luConsequencesLanguage_FK]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[luConsequencesLanguage]  WITH CHECK ADD  CONSTRAINT [luConsequences_luConsequencesLanguage_FK] FOREIGN KEY([ConsequencesId])
REFERENCES [Risk].[luConsequences] ([Id])
GO
ALTER TABLE [Risk].[luConsequencesLanguage] CHECK CONSTRAINT [luConsequences_luConsequencesLanguage_FK]
GO
/****** Object:  ForeignKey [FK_ReadingListReaders_luReaderTypes]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[ReadingListReaders]  WITH CHECK ADD  CONSTRAINT [FK_ReadingListReaders_luReaderTypes] FOREIGN KEY([ReaderTypeId])
REFERENCES [dbo].[luReaderTypes] ([Id])
GO
ALTER TABLE [dbo].[ReadingListReaders] CHECK CONSTRAINT [FK_ReadingListReaders_luReaderTypes]
GO
/****** Object:  ForeignKey [FK_ReadingListReaders_ReadingList]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[ReadingListReaders]  WITH CHECK ADD  CONSTRAINT [FK_ReadingListReaders_ReadingList] FOREIGN KEY([ReadingListId])
REFERENCES [dbo].[ReadingList] ([ReadingListId])
GO
ALTER TABLE [dbo].[ReadingListReaders] CHECK CONSTRAINT [FK_ReadingListReaders_ReadingList]
GO
/****** Object:  ForeignKey [FK_ReadingListDocuments_m136_tblDocument]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [dbo].[ReadingListDocuments]  WITH CHECK ADD  CONSTRAINT [FK_ReadingListDocuments_m136_tblDocument] FOREIGN KEY([DocumentId])
REFERENCES [dbo].[m136_tblDocument] ([iEntityId])
GO
ALTER TABLE [dbo].[ReadingListDocuments] CHECK CONSTRAINT [FK_ReadingListDocuments_m136_tblDocument]
GO
/****** Object:  ForeignKey [luProbability_luProbabilityLanguage_FK]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[luProbabilityLanguage]  WITH CHECK ADD  CONSTRAINT [luProbability_luProbabilityLanguage_FK] FOREIGN KEY([ProbabilityId])
REFERENCES [Risk].[luProbability] ([Id])
GO
ALTER TABLE [Risk].[luProbabilityLanguage] CHECK CONSTRAINT [luProbability_luProbabilityLanguage_FK]
GO
/****** Object:  ForeignKey [Areas_AreaConsequences_FK1]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[AreaConsequences]  WITH CHECK ADD  CONSTRAINT [Areas_AreaConsequences_FK1] FOREIGN KEY([AreaId])
REFERENCES [Risk].[Areas] ([Id])
GO
ALTER TABLE [Risk].[AreaConsequences] CHECK CONSTRAINT [Areas_AreaConsequences_FK1]
GO
/****** Object:  ForeignKey [luConsequences_AreaConsequences_FK3]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[AreaConsequences]  WITH CHECK ADD  CONSTRAINT [luConsequences_AreaConsequences_FK3] FOREIGN KEY([ConsequenceId])
REFERENCES [Risk].[luConsequences] ([Id])
GO
ALTER TABLE [Risk].[AreaConsequences] CHECK CONSTRAINT [luConsequences_AreaConsequences_FK3]
GO
/****** Object:  ForeignKey [luConsequenceTypes_AreaConsequences_FK2]    Script Date: 10/20/2016 11:39:17 ******/
ALTER TABLE [Risk].[AreaConsequences]  WITH CHECK ADD  CONSTRAINT [luConsequenceTypes_AreaConsequences_FK2] FOREIGN KEY([ConsequenceTypeId])
REFERENCES [Risk].[luConsequenceTypes] ([Id])
GO
ALTER TABLE [Risk].[AreaConsequences] CHECK CONSTRAINT [luConsequenceTypes_AreaConsequences_FK2]
GO
/****** Object:  ForeignKey [FK__tblPermissionSet_iPermissionSetTypeId__tblPermissionSetType_iPermissionSetTypeId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[tblPermissionSet]  WITH CHECK ADD  CONSTRAINT [FK__tblPermissionSet_iPermissionSetTypeId__tblPermissionSetType_iPermissionSetTypeId] FOREIGN KEY([iPermissionSetTypeId])
REFERENCES [dbo].[tblPermissionSetType] ([iPermissionSetTypeId])
GO
ALTER TABLE [dbo].[tblPermissionSet] CHECK CONSTRAINT [FK__tblPermissionSet_iPermissionSetTypeId__tblPermissionSetType_iPermissionSetTypeId]
GO
/****** Object:  ForeignKey [FK__tblMenu_iInformationTypeId__tblInformationType_iInformationTypeId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[tblMenu]  WITH CHECK ADD  CONSTRAINT [FK__tblMenu_iInformationTypeId__tblInformationType_iInformationTypeId] FOREIGN KEY([iInformationTypeId])
REFERENCES [dbo].[tblInformationType] ([iInformationTypeId])
GO
ALTER TABLE [dbo].[tblMenu] CHECK CONSTRAINT [FK__tblMenu_iInformationTypeId__tblInformationType_iInformationTypeId]
GO
/****** Object:  ForeignKey [MessageTemplate_Framework_MessageTemplateLanguage_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[MessageTemplateLanguage]  WITH CHECK ADD  CONSTRAINT [MessageTemplate_Framework_MessageTemplateLanguage_FK1] FOREIGN KEY([TemplateId])
REFERENCES [dbo].[MessageTemplate] ([TemplateId])
GO
ALTER TABLE [dbo].[MessageTemplateLanguage] CHECK CONSTRAINT [MessageTemplate_Framework_MessageTemplateLanguage_FK1]
GO
/****** Object:  ForeignKey [Areas_Analysis_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[Analysis]  WITH CHECK ADD  CONSTRAINT [Areas_Analysis_FK] FOREIGN KEY([AreaId])
REFERENCES [Risk].[Areas] ([Id])
GO
ALTER TABLE [Risk].[Analysis] CHECK CONSTRAINT [Areas_Analysis_FK]
GO
/****** Object:  ForeignKey [FK_NewsMedia_Info]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[m123_tblNewsMedia]  WITH CHECK ADD  CONSTRAINT [FK_NewsMedia_Info] FOREIGN KEY([InfoId])
REFERENCES [dbo].[m123_tblInfo] ([iInfoId])
GO
ALTER TABLE [dbo].[m123_tblNewsMedia] CHECK CONSTRAINT [FK_NewsMedia_Info]
GO
/****** Object:  ForeignKey [m136_tblDocument_m136_Hearings_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[m136_Hearings]  WITH CHECK ADD  CONSTRAINT [m136_tblDocument_m136_Hearings_FK1] FOREIGN KEY([EntityId])
REFERENCES [dbo].[m136_tblDocument] ([iEntityId])
GO
ALTER TABLE [dbo].[m136_Hearings] CHECK CONSTRAINT [m136_tblDocument_m136_Hearings_FK1]
GO
/****** Object:  ForeignKey [Analysis_AnalysisAttachments_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisAttachments]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisAttachments_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisAttachments] CHECK CONSTRAINT [Analysis_AnalysisAttachments_FK]
GO
/****** Object:  ForeignKey [Analysis_AnalysisAcceptanceCriterias_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisAcceptanceCriterias_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias] CHECK CONSTRAINT [Analysis_AnalysisAcceptanceCriterias_FK]
GO
/****** Object:  ForeignKey [luConsequences_AnalysisAcceptanceCriterias_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias]  WITH CHECK ADD  CONSTRAINT [luConsequences_AnalysisAcceptanceCriterias_FK] FOREIGN KEY([ConsequenceId])
REFERENCES [Risk].[luConsequences] ([Id])
GO
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias] CHECK CONSTRAINT [luConsequences_AnalysisAcceptanceCriterias_FK]
GO
/****** Object:  ForeignKey [luConsequenceTypes_AnalysisAcceptanceCriterias_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias]  WITH CHECK ADD  CONSTRAINT [luConsequenceTypes_AnalysisAcceptanceCriterias_FK] FOREIGN KEY([ConsequenceTypeId])
REFERENCES [Risk].[luConsequenceTypes] ([Id])
GO
ALTER TABLE [Risk].[AnalysisAcceptanceCriterias] CHECK CONSTRAINT [luConsequenceTypes_AnalysisAcceptanceCriterias_FK]
GO
/****** Object:  ForeignKey [Analysis_AnalysisDangers_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangers]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisDangers_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangers] CHECK CONSTRAINT [Analysis_AnalysisDangers_FK]
GO
/****** Object:  ForeignKey [Analysis_AnalysisCounterMeasures_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisCounterMeasures]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisCounterMeasures_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisCounterMeasures] CHECK CONSTRAINT [Analysis_AnalysisCounterMeasures_FK]
GO
/****** Object:  ForeignKey [FK__tblPermissionBit_iPermissionSetId__tblPermissionSet_iPermissionSetId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[tblPermissionBit]  WITH CHECK ADD  CONSTRAINT [FK__tblPermissionBit_iPermissionSetId__tblPermissionSet_iPermissionSetId] FOREIGN KEY([iPermissionSetId])
REFERENCES [dbo].[tblPermissionSet] ([iPermissionSetId])
GO
ALTER TABLE [dbo].[tblPermissionBit] CHECK CONSTRAINT [FK__tblPermissionBit_iPermissionSetId__tblPermissionSet_iPermissionSetId]
GO
/****** Object:  ForeignKey [Analysis_AnalysisExistingActions_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisExistingActions]  WITH CHECK ADD  CONSTRAINT [Analysis_AnalysisExistingActions_FK] FOREIGN KEY([AnalysisId])
REFERENCES [Risk].[Analysis] ([Id])
GO
ALTER TABLE [Risk].[AnalysisExistingActions] CHECK CONSTRAINT [Analysis_AnalysisExistingActions_FK]
GO
/****** Object:  ForeignKey [FK__relDepartmentPosition_iDepartmentId__tblDepartment_iDepartmentId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[relDepartmentPosition]  WITH CHECK ADD  CONSTRAINT [FK__relDepartmentPosition_iDepartmentId__tblDepartment_iDepartmentId] FOREIGN KEY([iDepartmentId])
REFERENCES [dbo].[tblDepartment] ([iDepartmentId])
GO
ALTER TABLE [dbo].[relDepartmentPosition] CHECK CONSTRAINT [FK__relDepartmentPosition_iDepartmentId__tblDepartment_iDepartmentId]
GO
/****** Object:  ForeignKey [FK__relDepartmentPosition_iPositionId__tblPosition_iPositionId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[relDepartmentPosition]  WITH CHECK ADD  CONSTRAINT [FK__relDepartmentPosition_iPositionId__tblPosition_iPositionId] FOREIGN KEY([iPositionId])
REFERENCES [dbo].[tblPosition] ([iPositionId])
GO
ALTER TABLE [dbo].[relDepartmentPosition] CHECK CONSTRAINT [FK__relDepartmentPosition_iPositionId__tblPosition_iPositionId]
GO
/****** Object:  ForeignKey [FK__relApplicationPermissionSet_iApplicationId__tblApplication_iApplicationId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[relApplicationPermissionSet]  WITH CHECK ADD  CONSTRAINT [FK__relApplicationPermissionSet_iApplicationId__tblApplication_iApplicationId] FOREIGN KEY([iApplicationId])
REFERENCES [dbo].[tblApplication] ([iApplicationId])
GO
ALTER TABLE [dbo].[relApplicationPermissionSet] CHECK CONSTRAINT [FK__relApplicationPermissionSet_iApplicationId__tblApplication_iApplicationId]
GO
/****** Object:  ForeignKey [FK__relApplicationPermissionSet_iPermissionSetId__tblPermissionSet_iPermissionSetId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[relApplicationPermissionSet]  WITH CHECK ADD  CONSTRAINT [FK__relApplicationPermissionSet_iPermissionSetId__tblPermissionSet_iPermissionSetId] FOREIGN KEY([iPermissionSetId])
REFERENCES [dbo].[tblPermissionSet] ([iPermissionSetId])
GO
ALTER TABLE [dbo].[relApplicationPermissionSet] CHECK CONSTRAINT [FK__relApplicationPermissionSet_iPermissionSetId__tblPermissionSet_iPermissionSetId]
GO
/****** Object:  ForeignKey [m136_Hearings_m136_HearingComments_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[m136_HearingComments]  WITH CHECK ADD  CONSTRAINT [m136_Hearings_m136_HearingComments_FK1] FOREIGN KEY([HearingsId])
REFERENCES [dbo].[m136_Hearings] ([Id])
GO
ALTER TABLE [dbo].[m136_HearingComments] CHECK CONSTRAINT [m136_Hearings_m136_HearingComments_FK1]
GO
/****** Object:  ForeignKey [m136_tblMetaInfoTemplateRecords_m136_HearingComments_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[m136_HearingComments]  WITH CHECK ADD  CONSTRAINT [m136_tblMetaInfoTemplateRecords_m136_HearingComments_FK1] FOREIGN KEY([iMetaInfoTemplateRecordsId])
REFERENCES [dbo].[m136_tblMetaInfoTemplateRecords] ([iMetaInfoTemplateRecordsId])
GO
ALTER TABLE [dbo].[m136_HearingComments] CHECK CONSTRAINT [m136_tblMetaInfoTemplateRecords_m136_HearingComments_FK1]
GO
/****** Object:  ForeignKey [FK__relDepartmentTarget_iDepartmentId__tblDepartment_iDepartmentId]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [dbo].[relDepartmentTarget]  WITH CHECK ADD  CONSTRAINT [FK__relDepartmentTarget_iDepartmentId__tblDepartment_iDepartmentId] FOREIGN KEY([iDepartmentId])
REFERENCES [dbo].[tblDepartment] ([iDepartmentId])
GO
ALTER TABLE [dbo].[relDepartmentTarget] CHECK CONSTRAINT [FK__relDepartmentTarget_iDepartmentId__tblDepartment_iDepartmentId]
GO
/****** Object:  ForeignKey [AnalysisAcceptanceCriterias_AnalysisDangerAcceptanceCriterias_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerAcceptanceCriterias]  WITH CHECK ADD  CONSTRAINT [AnalysisAcceptanceCriterias_AnalysisDangerAcceptanceCriterias_FK] FOREIGN KEY([AnalysisAcceptanceCriteriaId])
REFERENCES [Risk].[AnalysisAcceptanceCriterias] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerAcceptanceCriterias] CHECK CONSTRAINT [AnalysisAcceptanceCriterias_AnalysisDangerAcceptanceCriterias_FK]
GO
/****** Object:  ForeignKey [AnalysisDangers_AnalysisDangerAcceptanceCriterias_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerAcceptanceCriterias]  WITH CHECK ADD  CONSTRAINT [AnalysisDangers_AnalysisDangerAcceptanceCriterias_FK] FOREIGN KEY([AnalysisDangerId])
REFERENCES [Risk].[AnalysisDangers] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerAcceptanceCriterias] CHECK CONSTRAINT [AnalysisDangers_AnalysisDangerAcceptanceCriterias_FK]
GO
/****** Object:  ForeignKey [AnalysisDangers_AnalysisDangerProbability_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerProbability]  WITH CHECK ADD  CONSTRAINT [AnalysisDangers_AnalysisDangerProbability_FK] FOREIGN KEY([AnalysisDangerId])
REFERENCES [Risk].[AnalysisDangers] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerProbability] CHECK CONSTRAINT [AnalysisDangers_AnalysisDangerProbability_FK]
GO
/****** Object:  ForeignKey [luProbability_AnalysisDangerProbability_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerProbability]  WITH CHECK ADD  CONSTRAINT [luProbability_AnalysisDangerProbability_FK1] FOREIGN KEY([ProbabilityId])
REFERENCES [Risk].[luProbability] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerProbability] CHECK CONSTRAINT [luProbability_AnalysisDangerProbability_FK1]
GO
/****** Object:  ForeignKey [luProbability_AnalysisDangerProbability_FK2]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerProbability]  WITH CHECK ADD  CONSTRAINT [luProbability_AnalysisDangerProbability_FK2] FOREIGN KEY([ReevaluatedProbabilityId])
REFERENCES [Risk].[luProbability] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerProbability] CHECK CONSTRAINT [luProbability_AnalysisDangerProbability_FK2]
GO
/****** Object:  ForeignKey [AnalysisDangerAcceptanceCriterias_AnalysisDangerEvaluation_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerEvaluation]  WITH CHECK ADD  CONSTRAINT [AnalysisDangerAcceptanceCriterias_AnalysisDangerEvaluation_FK] FOREIGN KEY([AnalysisDangerAcceptanceCriteriasId])
REFERENCES [Risk].[AnalysisDangerAcceptanceCriterias] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerEvaluation] CHECK CONSTRAINT [AnalysisDangerAcceptanceCriterias_AnalysisDangerEvaluation_FK]
GO
/****** Object:  ForeignKey [AnalysisDangers_AnalysisDangerEvaluation_FK]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerEvaluation]  WITH CHECK ADD  CONSTRAINT [AnalysisDangers_AnalysisDangerEvaluation_FK] FOREIGN KEY([AnalysisDangerId])
REFERENCES [Risk].[AnalysisDangers] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerEvaluation] CHECK CONSTRAINT [AnalysisDangers_AnalysisDangerEvaluation_FK]
GO
/****** Object:  ForeignKey [luConsequences_AnalysisDangerEvaluation_FK1]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerEvaluation]  WITH CHECK ADD  CONSTRAINT [luConsequences_AnalysisDangerEvaluation_FK1] FOREIGN KEY([ConsequenceId])
REFERENCES [Risk].[luConsequences] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerEvaluation] CHECK CONSTRAINT [luConsequences_AnalysisDangerEvaluation_FK1]
GO
/****** Object:  ForeignKey [luConsequences_AnalysisDangerEvaluation_FK2]    Script Date: 10/20/2016 11:39:18 ******/
ALTER TABLE [Risk].[AnalysisDangerEvaluation]  WITH CHECK ADD  CONSTRAINT [luConsequences_AnalysisDangerEvaluation_FK2] FOREIGN KEY([ReevaluatedConsequenceId])
REFERENCES [Risk].[luConsequences] ([Id])
GO
ALTER TABLE [Risk].[AnalysisDangerEvaluation] CHECK CONSTRAINT [luConsequences_AnalysisDangerEvaluation_FK2]
GO
